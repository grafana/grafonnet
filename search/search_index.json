{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Grafonnet","text":"<p>Jsonnet library for generating Grafana dashboards.</p>"},{"location":"index.html#introduction","title":"Introduction","text":"<p>This library is generated from OpenAPI documents in grafana-foundation-sdk, these are generated from the Grafana repository to ensure Grafonnet can keep up with Grafana development.</p> <p>Grafonnet is the spiritual successor of grafonnet-lib. As grafonnet-lib was manually written, it had a hard time to keep up with Grafana development, this resulted in it being under-maintained. Besides that, it also came with a performance penalty in jsonnet as it used the builder pattern, although visually appealing it becomes very slow for environments that need to manage many dashboards.</p> <p>This library is experimental</p> <p>The code in this repository should be considered experimental. Documentation is only available alongside the code. It comes without support, but we are keen to receive feedback on the product and suggestions on how to improve it, though we cannot commit to resolution of any particular issue. No SLAs are available. It is not meant to be used in production environments, and the risks are unknown/high.</p> <p>Additional information can be found in Release life cycle for Grafana Labs.</p>"},{"location":"index.html#requirements","title":"Requirements","text":"<p>Grafonnet uses the Jsonnet programming language.</p> <p>NOTE: There is a significant performance issue with the C implementation of Jsonnet. You are strongly recommended to use the newer go-jsonnet Jsonnet implementation. This is also the implementation recommended by the Jsonnet developers themselves.</p> <p>The library can be installed with jsonnet-bundler.</p>"},{"location":"index.html#install","title":"Install","text":"<p>To add grafonnet to a jsonnet project:</p> <pre><code>jb install github.com/grafana/grafonnet/gen/grafonnet-latest@main\n</code></pre>"},{"location":"index.html#usage","title":"Usage","text":"<pre><code>// dashboard.jsonnet\nlocal grafonnet = import 'github.com/grafana/grafonnet/gen/grafonnet-latest/main.libsonnet';\n\ngrafonnet.dashboard.new('My Dashboard')\n</code></pre> <pre><code>jsonnet -J vendor dashboard.jsonnet\n</code></pre>"},{"location":"API/index.html","title":"API","text":""},{"location":"API/index.html#subpackages","title":"Subpackages","text":"<ul> <li>accesspolicy</li> <li>alerting</li> <li>dashboard</li> <li>folder</li> <li>librarypanel</li> <li>panel</li> <li>preferences</li> <li>publicdashboard</li> <li>query</li> <li>role</li> <li>rolebinding</li> <li>team</li> <li>util</li> </ul>"},{"location":"API/folder.html","title":"folder","text":"<p>grafonnet.folder</p>"},{"location":"API/folder.html#index","title":"Index","text":"<ul> <li><code>fn withParentUid(value)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withUid(value)</code></li> </ul>"},{"location":"API/folder.html#fields","title":"Fields","text":""},{"location":"API/folder.html#fn-withparentuid","title":"fn withParentUid","text":"<pre><code>withParentUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>only used if nested folders are enabled</p>"},{"location":"API/folder.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Folder title</p>"},{"location":"API/folder.html#fn-withuid","title":"fn withUid","text":"<pre><code>withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique folder id</p>"},{"location":"API/preferences.html","title":"preferences","text":"<p>grafonnet.preferences</p>"},{"location":"API/preferences.html#index","title":"Index","text":"<ul> <li><code>fn withCookiePreferences(value)</code></li> <li><code>fn withCookiePreferencesMixin(value)</code></li> <li><code>fn withHomeDashboardUID(value)</code></li> <li><code>fn withLanguage(value)</code></li> <li><code>fn withQueryHistory(value)</code></li> <li><code>fn withQueryHistoryMixin(value)</code></li> <li><code>fn withTheme(value)</code></li> <li><code>fn withTimezone(value)</code></li> <li><code>fn withWeekStart(value)</code></li> <li><code>obj cookiePreferences</code><ul> <li><code>fn withAnalytics(value)</code></li> <li><code>fn withAnalyticsMixin(value)</code></li> <li><code>fn withFunctional(value)</code></li> <li><code>fn withFunctionalMixin(value)</code></li> <li><code>fn withPerformance(value)</code></li> <li><code>fn withPerformanceMixin(value)</code></li> </ul> </li> <li><code>obj queryHistory</code><ul> <li><code>fn withHomeTab(value)</code></li> </ul> </li> </ul>"},{"location":"API/preferences.html#fields","title":"Fields","text":""},{"location":"API/preferences.html#fn-withcookiepreferences","title":"fn withCookiePreferences","text":"<pre><code>withCookiePreferences(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/preferences.html#fn-withcookiepreferencesmixin","title":"fn withCookiePreferencesMixin","text":"<pre><code>withCookiePreferencesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/preferences.html#fn-withhomedashboarduid","title":"fn withHomeDashboardUID","text":"<pre><code>withHomeDashboardUID(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>UID for the home dashboard</p>"},{"location":"API/preferences.html#fn-withlanguage","title":"fn withLanguage","text":"<pre><code>withLanguage(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Selected language (beta)</p>"},{"location":"API/preferences.html#fn-withqueryhistory","title":"fn withQueryHistory","text":"<pre><code>withQueryHistory(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/preferences.html#fn-withqueryhistorymixin","title":"fn withQueryHistoryMixin","text":"<pre><code>withQueryHistoryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/preferences.html#fn-withtheme","title":"fn withTheme","text":"<pre><code>withTheme(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>light, dark, empty is default</p>"},{"location":"API/preferences.html#fn-withtimezone","title":"fn withTimezone","text":"<pre><code>withTimezone(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The timezone selection TODO: this should use the timezone defined in common</p>"},{"location":"API/preferences.html#fn-withweekstart","title":"fn withWeekStart","text":"<pre><code>withWeekStart(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>day of the week (sunday, monday, etc)</p>"},{"location":"API/preferences.html#obj-cookiepreferences","title":"obj cookiePreferences","text":""},{"location":"API/preferences.html#fn-cookiepreferenceswithanalytics","title":"fn cookiePreferences.withAnalytics","text":"<pre><code>cookiePreferences.withAnalytics(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/preferences.html#fn-cookiepreferenceswithanalyticsmixin","title":"fn cookiePreferences.withAnalyticsMixin","text":"<pre><code>cookiePreferences.withAnalyticsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/preferences.html#fn-cookiepreferenceswithfunctional","title":"fn cookiePreferences.withFunctional","text":"<pre><code>cookiePreferences.withFunctional(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/preferences.html#fn-cookiepreferenceswithfunctionalmixin","title":"fn cookiePreferences.withFunctionalMixin","text":"<pre><code>cookiePreferences.withFunctionalMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/preferences.html#fn-cookiepreferenceswithperformance","title":"fn cookiePreferences.withPerformance","text":"<pre><code>cookiePreferences.withPerformance(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/preferences.html#fn-cookiepreferenceswithperformancemixin","title":"fn cookiePreferences.withPerformanceMixin","text":"<pre><code>cookiePreferences.withPerformanceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/preferences.html#obj-queryhistory","title":"obj queryHistory","text":""},{"location":"API/preferences.html#fn-queryhistorywithhometab","title":"fn queryHistory.withHomeTab","text":"<pre><code>queryHistory.withHomeTab(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>one of: '' | 'query' | 'starred';</p>"},{"location":"API/publicdashboard.html","title":"publicdashboard","text":"<p>grafonnet.publicdashboard</p>"},{"location":"API/publicdashboard.html#index","title":"Index","text":"<ul> <li><code>fn withAccessToken(value)</code></li> <li><code>fn withAnnotationsEnabled(value=true)</code></li> <li><code>fn withDashboardUid(value)</code></li> <li><code>fn withIsEnabled(value=true)</code></li> <li><code>fn withTimeSelectionEnabled(value=true)</code></li> <li><code>fn withUid(value)</code></li> </ul>"},{"location":"API/publicdashboard.html#fields","title":"Fields","text":""},{"location":"API/publicdashboard.html#fn-withaccesstoken","title":"fn withAccessToken","text":"<pre><code>withAccessToken(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique public access token</p>"},{"location":"API/publicdashboard.html#fn-withannotationsenabled","title":"fn withAnnotationsEnabled","text":"<pre><code>withAnnotationsEnabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Flag that indicates if annotations are enabled</p>"},{"location":"API/publicdashboard.html#fn-withdashboarduid","title":"fn withDashboardUid","text":"<pre><code>withDashboardUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Dashboard unique identifier referenced by this public dashboard</p>"},{"location":"API/publicdashboard.html#fn-withisenabled","title":"fn withIsEnabled","text":"<pre><code>withIsEnabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Flag that indicates if the public dashboard is enabled</p>"},{"location":"API/publicdashboard.html#fn-withtimeselectionenabled","title":"fn withTimeSelectionEnabled","text":"<pre><code>withTimeSelectionEnabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Flag that indicates if the time range picker is enabled</p>"},{"location":"API/publicdashboard.html#fn-withuid","title":"fn withUid","text":"<pre><code>withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique public dashboard identifier</p>"},{"location":"API/role.html","title":"role","text":"<p>grafonnet.role</p>"},{"location":"API/role.html#index","title":"Index","text":"<ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withGroupName(value)</code></li> <li><code>fn withHidden(value=true)</code></li> <li><code>fn withName(value)</code></li> </ul>"},{"location":"API/role.html#fields","title":"Fields","text":""},{"location":"API/role.html#fn-withdescription","title":"fn withDescription","text":"<pre><code>withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Role description</p>"},{"location":"API/role.html#fn-withdisplayname","title":"fn withDisplayName","text":"<pre><code>withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Optional display</p>"},{"location":"API/role.html#fn-withgroupname","title":"fn withGroupName","text":"<pre><code>withGroupName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of the team.</p>"},{"location":"API/role.html#fn-withhidden","title":"fn withHidden","text":"<pre><code>withHidden(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Do not show this role</p>"},{"location":"API/role.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The role identifier <code>managed:builtins:editor:permissions</code></p>"},{"location":"API/rolebinding.html","title":"rolebinding","text":"<p>grafonnet.rolebinding</p>"},{"location":"API/rolebinding.html#index","title":"Index","text":"<ul> <li><code>fn withRole(value)</code></li> <li><code>fn withRoleMixin(value)</code></li> <li><code>fn withSubject(value)</code></li> <li><code>fn withSubjectMixin(value)</code></li> <li><code>obj role</code><ul> <li><code>fn withBuiltinRoleRef(value)</code></li> <li><code>fn withBuiltinRoleRefMixin(value)</code></li> <li><code>fn withCustomRoleRef(value)</code></li> <li><code>fn withCustomRoleRefMixin(value)</code></li> <li><code>obj BuiltinRoleRef</code><ul> <li><code>fn withKind()</code></li> <li><code>fn withName(value)</code></li> </ul> </li> <li><code>obj CustomRoleRef</code><ul> <li><code>fn withKind()</code></li> <li><code>fn withName(value)</code></li> </ul> </li> </ul> </li> <li><code>obj subject</code><ul> <li><code>fn withKind(value)</code></li> <li><code>fn withName(value)</code></li> </ul> </li> </ul>"},{"location":"API/rolebinding.html#fields","title":"Fields","text":""},{"location":"API/rolebinding.html#fn-withrole","title":"fn withRole","text":"<pre><code>withRole(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The role we are discussing</p>"},{"location":"API/rolebinding.html#fn-withrolemixin","title":"fn withRoleMixin","text":"<pre><code>withRoleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The role we are discussing</p>"},{"location":"API/rolebinding.html#fn-withsubject","title":"fn withSubject","text":"<pre><code>withSubject(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/rolebinding.html#fn-withsubjectmixin","title":"fn withSubjectMixin","text":"<pre><code>withSubjectMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/rolebinding.html#obj-role","title":"obj role","text":""},{"location":"API/rolebinding.html#fn-rolewithbuiltinroleref","title":"fn role.withBuiltinRoleRef","text":"<pre><code>role.withBuiltinRoleRef(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/rolebinding.html#fn-rolewithbuiltinrolerefmixin","title":"fn role.withBuiltinRoleRefMixin","text":"<pre><code>role.withBuiltinRoleRefMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/rolebinding.html#fn-rolewithcustomroleref","title":"fn role.withCustomRoleRef","text":"<pre><code>role.withCustomRoleRef(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/rolebinding.html#fn-rolewithcustomrolerefmixin","title":"fn role.withCustomRoleRefMixin","text":"<pre><code>role.withCustomRoleRefMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/rolebinding.html#obj-rolebuiltinroleref","title":"obj role.BuiltinRoleRef","text":""},{"location":"API/rolebinding.html#fn-rolebuiltinrolerefwithkind","title":"fn role.BuiltinRoleRef.withKind","text":"<pre><code>role.BuiltinRoleRef.withKind()\n</code></pre>"},{"location":"API/rolebinding.html#fn-rolebuiltinrolerefwithname","title":"fn role.BuiltinRoleRef.withName","text":"<pre><code>role.BuiltinRoleRef.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"viewer\"</code>, <code>\"editor\"</code>, <code>\"admin\"</code></li> </ul> </li> </ul>"},{"location":"API/rolebinding.html#obj-rolecustomroleref","title":"obj role.CustomRoleRef","text":""},{"location":"API/rolebinding.html#fn-rolecustomrolerefwithkind","title":"fn role.CustomRoleRef.withKind","text":"<pre><code>role.CustomRoleRef.withKind()\n</code></pre>"},{"location":"API/rolebinding.html#fn-rolecustomrolerefwithname","title":"fn role.CustomRoleRef.withName","text":"<pre><code>role.CustomRoleRef.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/rolebinding.html#obj-subject","title":"obj subject","text":""},{"location":"API/rolebinding.html#fn-subjectwithkind","title":"fn subject.withKind","text":"<pre><code>subject.withKind(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"Team\"</code>, <code>\"User\"</code></li> </ul> </li> </ul>"},{"location":"API/rolebinding.html#fn-subjectwithname","title":"fn subject.withName","text":"<pre><code>subject.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The team/user identifier name</p>"},{"location":"API/team.html","title":"team","text":"<p>grafonnet.team</p>"},{"location":"API/team.html#index","title":"Index","text":"<ul> <li><code>fn withEmail(value)</code></li> <li><code>fn withName(value)</code></li> </ul>"},{"location":"API/team.html#fields","title":"Fields","text":""},{"location":"API/team.html#fn-withemail","title":"fn withEmail","text":"<pre><code>withEmail(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Email of the team.</p>"},{"location":"API/team.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of the team.</p>"},{"location":"API/util.html","title":"util","text":"<p>Helper functions that work well with Grafonnet.</p>"},{"location":"API/util.html#index","title":"Index","text":"<ul> <li><code>obj dashboard</code><ul> <li><code>fn getOptionsForCustomQuery(query)</code></li> </ul> </li> <li><code>obj grid</code><ul> <li><code>fn makeGrid(panels, panelWidth, panelHeight, startY)</code></li> <li><code>fn wrapPanels(panels, panelWidth, panelHeight, startY)</code></li> </ul> </li> <li><code>obj panel</code><ul> <li><code>fn calculateLowestYforPanel(panel, panels)</code></li> <li><code>fn dedupeQueryTargets(panels)</code></li> <li><code>fn getPanelIDs(panels)</code></li> <li><code>fn getPanelsBeforeNextRow(panels)</code></li> <li><code>fn groupPanelsInRows(panels)</code></li> <li><code>fn mapToRows(func, panels)</code></li> <li><code>fn normalizeY(panels)</code></li> <li><code>fn normalizeYInRow(rowPanel)</code></li> <li><code>fn resolveCollapsedFlagOnRows(panels)</code></li> <li><code>fn sanitizePanel(panel, defaultX=0, defaultY=0, defaultHeight=8, defaultWidth=8)</code></li> <li><code>fn setPanelIDs(panels, overrideExistingIDs=true)</code></li> <li><code>fn setRefIDs(panel, overrideExistingIDs=true)</code></li> <li><code>fn setRefIDsOnPanels(panels)</code></li> <li><code>fn sortPanelsByXY(panels)</code></li> <li><code>fn sortPanelsInRow(rowPanel)</code></li> <li><code>fn validatePanelIDs(panels)</code></li> </ul> </li> <li><code>obj string</code><ul> <li><code>fn slugify(string)</code></li> </ul> </li> </ul>"},{"location":"API/util.html#fields","title":"Fields","text":""},{"location":"API/util.html#obj-dashboard","title":"obj dashboard","text":""},{"location":"API/util.html#fn-dashboardgetoptionsforcustomquery","title":"fn dashboard.getOptionsForCustomQuery","text":"<pre><code>dashboard.getOptionsForCustomQuery(query)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>query (<code>string</code>)</li> </ul> <p><code>getOptionsForCustomQuery</code> provides values for the <code>options</code> and <code>current</code> fields. These are required for template variables of type 'custom'but do not automatically get populated by Grafana when importing a dashboard from JSON.</p> <p>This is a bit of a hack and should always be called on functions that set <code>type</code> on a template variable. Ideally Grafana populates these fields from the <code>query</code> value but this provides a backwards compatible solution.</p>"},{"location":"API/util.html#obj-grid","title":"obj grid","text":""},{"location":"API/util.html#fn-gridmakegrid","title":"fn grid.makeGrid","text":"<pre><code>grid.makeGrid(panels, panelWidth, panelHeight, startY)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panels (<code>array</code>)</li> <li>panelWidth (<code>number</code>)</li> <li>panelHeight (<code>number</code>)</li> <li>startY (<code>number</code>)</li> </ul> <p><code>makeGrid</code> returns an array of <code>panels</code> organized in a grid with equal <code>panelWidth</code> and <code>panelHeight</code>. Row panels are used as \"linebreaks\", if a Row panel is collapsed, then all panels below it will be folded into the row.</p> <p>This function will use the full grid of 24 columns, setting <code>panelWidth</code> to a value that can divide 24 into equal parts will fill up the page nicely. (1, 2, 3, 4, 6, 8, 12) Other value for <code>panelWidth</code> will leave a gap on the far right.</p> <p>Optional <code>startY</code> can be provided to place generated grid above or below existing panels.</p>"},{"location":"API/util.html#fn-gridwrappanels","title":"fn grid.wrapPanels","text":"<pre><code>grid.wrapPanels(panels, panelWidth, panelHeight, startY)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panels (<code>array</code>)</li> <li>panelWidth (<code>number</code>)</li> <li>panelHeight (<code>number</code>)</li> <li>startY (<code>number</code>)</li> </ul> <p><code>wrapPanels</code> returns an array of <code>panels</code> organized in a grid, wrapping up to next 'row' if total width exceeds full grid of 24 columns. 'panelHeight' and 'panelWidth' are used unless panels already have height and width defined.</p>"},{"location":"API/util.html#obj-panel","title":"obj panel","text":""},{"location":"API/util.html#fn-panelcalculatelowestyforpanel","title":"fn panel.calculateLowestYforPanel","text":"<pre><code>panel.calculateLowestYforPanel(panel, panels)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panel (<code>object</code>)</li> <li>panels (<code>array</code>)</li> </ul> <p><code>calculateLowestYforPanel</code> calculates Y for a given <code>panel</code> from the <code>gridPos</code> of an array of <code>panels</code>. This function is used in <code>normalizeY</code>.</p>"},{"location":"API/util.html#fn-paneldedupequerytargets","title":"fn panel.dedupeQueryTargets","text":"<pre><code>panel.dedupeQueryTargets(panels)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panels (<code>array</code>)</li> </ul> <p><code>dedupeQueryTargets</code> dedupes the query targets in a set of panels and replaces the duplicates with a 'shared query'. Sharing query results across panels reduces the number of queries made to your data source, which can improve the performance of your dashboard.</p> <p>This function requires that the query targets have <code>refId</code> set, <code>setRefIDs</code> and <code>setRefIDsOnPanels</code> can help with that.</p>"},{"location":"API/util.html#fn-panelgetpanelids","title":"fn panel.getPanelIDs","text":"<pre><code>panel.getPanelIDs(panels)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panels (<code>array</code>)</li> </ul> <p><code>getPanelIDs</code> returns an array with all panel IDs including IDs from panels in rows.</p>"},{"location":"API/util.html#fn-panelgetpanelsbeforenextrow","title":"fn panel.getPanelsBeforeNextRow","text":"<pre><code>panel.getPanelsBeforeNextRow(panels)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panels (<code>array</code>)</li> </ul> <p><code>getPanelsBeforeNextRow</code> returns all panels in an array up until a row has been found. Used in <code>groupPanelsInRows</code>.</p>"},{"location":"API/util.html#fn-panelgrouppanelsinrows","title":"fn panel.groupPanelsInRows","text":"<pre><code>panel.groupPanelsInRows(panels)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panels (<code>array</code>)</li> </ul> <p><code>groupPanelsInRows</code> ensures that panels that come after a row panel in an array are added to the <code>row.panels</code> attribute. This can be useful to apply intermediate functions to only the panels that belong to a row. Finally the panel array should get processed by <code>resolveCollapsedFlagOnRows</code> to \"unfold\" the rows that are not collapsed into the main array.</p>"},{"location":"API/util.html#fn-panelmaptorows","title":"fn panel.mapToRows","text":"<pre><code>panel.mapToRows(func, panels)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>func (<code>function</code>)</li> <li>panels (<code>array</code>)</li> </ul> <p><code>mapToRows</code> is a little helper function that applies <code>func</code> to all row panels in an array. Other panels in that array are returned ad verbatim.</p>"},{"location":"API/util.html#fn-panelnormalizey","title":"fn panel.normalizeY","text":"<pre><code>panel.normalizeY(panels)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panels (<code>array</code>)</li> </ul> <p><code>normalizeY</code> applies negative gravity on the inverted Y axis. This mimics the behavior of Grafana: when a panel is created without panel above it, then it'll float upward.</p> <p>This is strictly not required as Grafana will do this on dashboard load, however it might be helpful when used when calculating the correct <code>gridPos</code>.</p>"},{"location":"API/util.html#fn-panelnormalizeyinrow","title":"fn panel.normalizeYInRow","text":"<pre><code>panel.normalizeYInRow(rowPanel)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>rowPanel (<code>object</code>)</li> </ul> <p><code>normalizeYInRow</code> applies <code>normalizeY</code> to the panels in a row panel.</p>"},{"location":"API/util.html#fn-panelresolvecollapsedflagonrows","title":"fn panel.resolveCollapsedFlagOnRows","text":"<pre><code>panel.resolveCollapsedFlagOnRows(panels)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panels (<code>array</code>)</li> </ul> <p><code>resolveCollapsedFlagOnRows</code> should be applied to the final panel array to \"unfold\" the rows that are not collapsed into the main array.</p>"},{"location":"API/util.html#fn-panelsanitizepanel","title":"fn panel.sanitizePanel","text":"<pre><code>panel.sanitizePanel(panel, defaultX=0, defaultY=0, defaultHeight=8, defaultWidth=8)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panel (<code>object</code>)</li> <li>defaultX (<code>number</code>)<ul> <li>default value: <code>0</code></li> </ul> </li> <li>defaultY (<code>number</code>)<ul> <li>default value: <code>0</code></li> </ul> </li> <li>defaultHeight (<code>number</code>)<ul> <li>default value: <code>8</code></li> </ul> </li> <li>defaultWidth (<code>number</code>)<ul> <li>default value: <code>8</code></li> </ul> </li> </ul> <p><code>sanitizePanel</code> ensures the panel has a valid <code>gridPos</code> and row panels have <code>collapsed</code> and <code>panels</code>. This function is recursively applied to panels inside row panels.</p> <p>The default values for x,y,h,w are only applied if not already set.</p>"},{"location":"API/util.html#fn-panelsetpanelids","title":"fn panel.setPanelIDs","text":"<pre><code>panel.setPanelIDs(panels, overrideExistingIDs=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panels (<code>array</code>)</li> <li>overrideExistingIDs (<code>bool</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p><code>setPanelIDs</code> ensures that all <code>panels</code> have a unique ID, this function is used in <code>dashboard.withPanels</code> and <code>dashboard.withPanelsMixin</code> to provide a consistent experience.</p> <p><code>overrideExistingIDs</code> can be set to not replace existing IDs, consider validating the IDs with <code>validatePanelIDs()</code> to ensure there are no duplicate IDs.</p>"},{"location":"API/util.html#fn-panelsetrefids","title":"fn panel.setRefIDs","text":"<pre><code>panel.setRefIDs(panel, overrideExistingIDs=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panel (<code>object</code>)</li> <li>overrideExistingIDs (<code>bool</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p><code>setRefIDs</code> calculates the <code>refId</code> field for each target on a panel.</p>"},{"location":"API/util.html#fn-panelsetrefidsonpanels","title":"fn panel.setRefIDsOnPanels","text":"<pre><code>panel.setRefIDsOnPanels(panels)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panels (<code>array</code>)</li> </ul> <p><code>setRefIDsOnPanels</code> applies <code>setRefIDs on all</code>panels`.</p>"},{"location":"API/util.html#fn-panelsortpanelsbyxy","title":"fn panel.sortPanelsByXY","text":"<pre><code>panel.sortPanelsByXY(panels)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panels (<code>array</code>)</li> </ul> <p><code>sortPanelsByXY</code> applies a simple sorting algorithm, first by x then again by y. This does not take width and height into account.</p>"},{"location":"API/util.html#fn-panelsortpanelsinrow","title":"fn panel.sortPanelsInRow","text":"<pre><code>panel.sortPanelsInRow(rowPanel)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>rowPanel (<code>object</code>)</li> </ul> <p><code>sortPanelsInRow</code> applies <code>sortPanelsByXY</code> on the panels in a rowPanel.</p>"},{"location":"API/util.html#fn-panelvalidatepanelids","title":"fn panel.validatePanelIDs","text":"<pre><code>panel.validatePanelIDs(panels)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panels (<code>array</code>)</li> </ul> <p><code>validatePanelIDs</code> validates returns <code>false</code> if there are duplicate panel IDs in <code>panels</code>.</p>"},{"location":"API/util.html#obj-string","title":"obj string","text":""},{"location":"API/util.html#fn-stringslugify","title":"fn string.slugify","text":"<pre><code>string.slugify(string)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>string (<code>string</code>)</li> </ul> <p><code>slugify</code> will create a simple slug from <code>string</code>, keeping only alphanumeric characters and replacing spaces with dashes.</p>"},{"location":"API/accesspolicy/index.html","title":"accesspolicy","text":"<p>grafonnet.accesspolicy</p>"},{"location":"API/accesspolicy/index.html#subpackages","title":"Subpackages","text":"<ul> <li>rules</li> </ul>"},{"location":"API/accesspolicy/index.html#index","title":"Index","text":"<ul> <li><code>fn withRole(value)</code></li> <li><code>fn withRoleMixin(value)</code></li> <li><code>fn withRules(value)</code></li> <li><code>fn withRulesMixin(value)</code></li> <li><code>fn withScope(value)</code></li> <li><code>fn withScopeMixin(value)</code></li> <li><code>obj role</code><ul> <li><code>fn withKind(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>fn withXname(value)</code></li> </ul> </li> <li><code>obj scope</code><ul> <li><code>fn withKind(value)</code></li> <li><code>fn withName(value)</code></li> </ul> </li> </ul>"},{"location":"API/accesspolicy/index.html#fields","title":"Fields","text":""},{"location":"API/accesspolicy/index.html#fn-withrole","title":"fn withRole","text":"<pre><code>withRole(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/accesspolicy/index.html#fn-withrolemixin","title":"fn withRoleMixin","text":"<pre><code>withRoleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/accesspolicy/index.html#fn-withrules","title":"fn withRules","text":"<pre><code>withRules(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The set of rules to apply.  Note that * is required to modify access policy rules, and that \"none\" will reject all actions</p>"},{"location":"API/accesspolicy/index.html#fn-withrulesmixin","title":"fn withRulesMixin","text":"<pre><code>withRulesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The set of rules to apply.  Note that * is required to modify access policy rules, and that \"none\" will reject all actions</p>"},{"location":"API/accesspolicy/index.html#fn-withscope","title":"fn withScope","text":"<pre><code>withScope(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/accesspolicy/index.html#fn-withscopemixin","title":"fn withScopeMixin","text":"<pre><code>withScopeMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/accesspolicy/index.html#obj-role","title":"obj role","text":""},{"location":"API/accesspolicy/index.html#fn-rolewithkind","title":"fn role.withKind","text":"<pre><code>role.withKind(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"Role\"</code>, <code>\"BuiltinRole\"</code>, <code>\"Team\"</code>, <code>\"User\"</code></li> </ul> </li> </ul> <p>Policies can apply to roles, teams, or users Applying policies to individual users is supported, but discouraged</p>"},{"location":"API/accesspolicy/index.html#fn-rolewithname","title":"fn role.withName","text":"<pre><code>role.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/accesspolicy/index.html#fn-rolewithxname","title":"fn role.withXname","text":"<pre><code>role.withXname(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/accesspolicy/index.html#obj-scope","title":"obj scope","text":""},{"location":"API/accesspolicy/index.html#fn-scopewithkind","title":"fn scope.withKind","text":"<pre><code>scope.withKind(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/accesspolicy/index.html#fn-scopewithname","title":"fn scope.withName","text":"<pre><code>scope.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/accesspolicy/rules.html","title":"rules","text":""},{"location":"API/accesspolicy/rules.html#index","title":"Index","text":"<ul> <li><code>fn withKind(value=\"*\")</code></li> <li><code>fn withTarget(value)</code></li> <li><code>fn withVerb(value)</code></li> <li><code>fn withVerbMixin(value)</code></li> </ul>"},{"location":"API/accesspolicy/rules.html#fields","title":"Fields","text":""},{"location":"API/accesspolicy/rules.html#fn-withkind","title":"fn withKind","text":"<pre><code>withKind(value=\"*\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"*\"</code></li> </ul> </li> </ul> <p>The kind this rule applies to (dashboards, alert, etc)</p>"},{"location":"API/accesspolicy/rules.html#fn-withtarget","title":"fn withTarget","text":"<pre><code>withTarget(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specific sub-elements like \"alert.rules\" or \"dashboard.permissions\"????</p>"},{"location":"API/accesspolicy/rules.html#fn-withverb","title":"fn withVerb","text":"<pre><code>withVerb(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>READ, WRITE, CREATE, DELETE, ... should move to k8s style verbs like: \"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"</p>"},{"location":"API/accesspolicy/rules.html#fn-withverbmixin","title":"fn withVerbMixin","text":"<pre><code>withVerbMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>READ, WRITE, CREATE, DELETE, ... should move to k8s style verbs like: \"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"</p>"},{"location":"API/alerting/index.html","title":"alerting","text":"<p>grafonnet.alerting</p>"},{"location":"API/alerting/index.html#subpackages","title":"Subpackages","text":"<ul> <li>contactPoint</li> <li>messageTemplate</li> <li>muteTiming</li> <li>notificationPolicy</li> <li>ruleGroup</li> </ul>"},{"location":"API/alerting/contactPoint.html","title":"contactPoint","text":"<p>grafonnet.alerting.contactPoint</p> <p>NOTE: The schemas for all different contact points is under development, this means we can't properly express them in Grafonnet yet. The way this works now may change heavily.</p>"},{"location":"API/alerting/contactPoint.html#index","title":"Index","text":"<ul> <li><code>fn withDisableResolveMessage(value=true)</code></li> <li><code>fn withName(value)</code></li> <li><code>fn withProvenance(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUid(value)</code></li> </ul>"},{"location":"API/alerting/contactPoint.html#fields","title":"Fields","text":""},{"location":"API/alerting/contactPoint.html#fn-withdisableresolvemessage","title":"fn withDisableResolveMessage","text":"<pre><code>withDisableResolveMessage(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/alerting/contactPoint.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name is used as grouping key in the UI. Contact points with the same name will be grouped in the UI.</p>"},{"location":"API/alerting/contactPoint.html#fn-withprovenance","title":"fn withProvenance","text":"<pre><code>withProvenance(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/contactPoint.html#fn-withsettings","title":"fn withSettings","text":"<pre><code>withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/alerting/contactPoint.html#fn-withsettingsmixin","title":"fn withSettingsMixin","text":"<pre><code>withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/alerting/contactPoint.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"alertmanager\"</code>, <code>\" dingding\"</code>, <code>\" discord\"</code>, <code>\" email\"</code>, <code>\" googlechat\"</code>, <code>\" kafka\"</code>, <code>\" line\"</code>, <code>\" opsgenie\"</code>, <code>\" pagerduty\"</code>, <code>\" pushover\"</code>, <code>\" sensugo\"</code>, <code>\" slack\"</code>, <code>\" teams\"</code>, <code>\" telegram\"</code>, <code>\" threema\"</code>, <code>\" victorops\"</code>, <code>\" webhook\"</code>, <code>\" wecom\"</code></li> </ul> </li> </ul>"},{"location":"API/alerting/contactPoint.html#fn-withuid","title":"fn withUid","text":"<pre><code>withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>UID is the unique identifier of the contact point. The UID can be set by the user.</p>"},{"location":"API/alerting/messageTemplate.html","title":"messageTemplate","text":"<p>grafonnet.alerting.messageTemplate</p>"},{"location":"API/alerting/messageTemplate.html#index","title":"Index","text":"<ul> <li><code>fn withName(value)</code></li> <li><code>fn withTemplate(value)</code></li> </ul>"},{"location":"API/alerting/messageTemplate.html#fields","title":"Fields","text":""},{"location":"API/alerting/messageTemplate.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/messageTemplate.html#fn-withtemplate","title":"fn withTemplate","text":"<pre><code>withTemplate(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/index.html","title":"muteTiming","text":"<p>grafonnet.alerting.muteTiming</p>"},{"location":"API/alerting/muteTiming/index.html#subpackages","title":"Subpackages","text":"<ul> <li>interval</li> </ul>"},{"location":"API/alerting/muteTiming/index.html#index","title":"Index","text":"<ul> <li><code>fn withIntervals(value)</code></li> <li><code>fn withIntervalsMixin(value)</code></li> <li><code>fn withName(value)</code></li> </ul>"},{"location":"API/alerting/muteTiming/index.html#fields","title":"Fields","text":""},{"location":"API/alerting/muteTiming/index.html#fn-withintervals","title":"fn withIntervals","text":"<pre><code>withIntervals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/index.html#fn-withintervalsmixin","title":"fn withIntervalsMixin","text":"<pre><code>withIntervalsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/index.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/index.html","title":"interval","text":""},{"location":"API/alerting/muteTiming/interval/index.html#subpackages","title":"Subpackages","text":"<ul> <li>time_intervals</li> </ul>"},{"location":"API/alerting/muteTiming/interval/index.html#index","title":"Index","text":"<ul> <li><code>fn withName(value)</code></li> <li><code>fn withTimeIntervals(value)</code></li> <li><code>fn withTimeIntervalsMixin(value)</code></li> </ul>"},{"location":"API/alerting/muteTiming/interval/index.html#fields","title":"Fields","text":""},{"location":"API/alerting/muteTiming/interval/index.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/index.html#fn-withtimeintervals","title":"fn withTimeIntervals","text":"<pre><code>withTimeIntervals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/index.html#fn-withtimeintervalsmixin","title":"fn withTimeIntervalsMixin","text":"<pre><code>withTimeIntervalsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html","title":"time_intervals","text":""},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html#subpackages","title":"Subpackages","text":"<ul> <li>times</li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html#index","title":"Index","text":"<ul> <li><code>fn withDaysOfMonth(value)</code></li> <li><code>fn withDaysOfMonthMixin(value)</code></li> <li><code>fn withLocation(value)</code></li> <li><code>fn withMonths(value)</code></li> <li><code>fn withMonthsMixin(value)</code></li> <li><code>fn withTimes(value)</code></li> <li><code>fn withTimesMixin(value)</code></li> <li><code>fn withWeekdays(value)</code></li> <li><code>fn withWeekdaysMixin(value)</code></li> <li><code>fn withYears(value)</code></li> <li><code>fn withYearsMixin(value)</code></li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html#fields","title":"Fields","text":""},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html#fn-withdaysofmonth","title":"fn withDaysOfMonth","text":"<pre><code>withDaysOfMonth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html#fn-withdaysofmonthmixin","title":"fn withDaysOfMonthMixin","text":"<pre><code>withDaysOfMonthMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html#fn-withlocation","title":"fn withLocation","text":"<pre><code>withLocation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html#fn-withmonths","title":"fn withMonths","text":"<pre><code>withMonths(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html#fn-withmonthsmixin","title":"fn withMonthsMixin","text":"<pre><code>withMonthsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html#fn-withtimes","title":"fn withTimes","text":"<pre><code>withTimes(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html#fn-withtimesmixin","title":"fn withTimesMixin","text":"<pre><code>withTimesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html#fn-withweekdays","title":"fn withWeekdays","text":"<pre><code>withWeekdays(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html#fn-withweekdaysmixin","title":"fn withWeekdaysMixin","text":"<pre><code>withWeekdaysMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html#fn-withyears","title":"fn withYears","text":"<pre><code>withYears(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/index.html#fn-withyearsmixin","title":"fn withYearsMixin","text":"<pre><code>withYearsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/times.html","title":"times","text":""},{"location":"API/alerting/muteTiming/interval/time_intervals/times.html#index","title":"Index","text":"<ul> <li><code>fn withEndTime(value)</code></li> <li><code>fn withStartTime(value)</code></li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/times.html#fields","title":"Fields","text":""},{"location":"API/alerting/muteTiming/interval/time_intervals/times.html#fn-withendtime","title":"fn withEndTime","text":"<pre><code>withEndTime(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/muteTiming/interval/time_intervals/times.html#fn-withstarttime","title":"fn withStartTime","text":"<pre><code>withStartTime(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/notificationPolicy/index.html","title":"notificationPolicy","text":"<p>grafonnet.alerting.notificationPolicy</p>"},{"location":"API/alerting/notificationPolicy/index.html#subpackages","title":"Subpackages","text":"<ul> <li>matcher</li> </ul>"},{"location":"API/alerting/notificationPolicy/index.html#index","title":"Index","text":"<ul> <li><code>fn withContactPoint(value)</code></li> <li><code>fn withContinue(value=true)</code></li> <li><code>fn withGroupBy(value)</code></li> <li><code>fn withGroupByMixin(value)</code></li> <li><code>fn withGroupInterval(value)</code></li> <li><code>fn withGroupWait(value)</code></li> <li><code>fn withMatchers(value)</code></li> <li><code>fn withMatchersMixin(value)</code></li> <li><code>fn withMuteTimeIntervals(value)</code></li> <li><code>fn withMuteTimeIntervalsMixin(value)</code></li> <li><code>fn withPolicy(value)</code></li> <li><code>fn withPolicyMixin(value)</code></li> <li><code>fn withRepeatInterval(value)</code></li> </ul>"},{"location":"API/alerting/notificationPolicy/index.html#fields","title":"Fields","text":""},{"location":"API/alerting/notificationPolicy/index.html#fn-withcontactpoint","title":"fn withContactPoint","text":"<pre><code>withContactPoint(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/notificationPolicy/index.html#fn-withcontinue","title":"fn withContinue","text":"<pre><code>withContinue(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/alerting/notificationPolicy/index.html#fn-withgroupby","title":"fn withGroupBy","text":"<pre><code>withGroupBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/notificationPolicy/index.html#fn-withgroupbymixin","title":"fn withGroupByMixin","text":"<pre><code>withGroupByMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/notificationPolicy/index.html#fn-withgroupinterval","title":"fn withGroupInterval","text":"<pre><code>withGroupInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/notificationPolicy/index.html#fn-withgroupwait","title":"fn withGroupWait","text":"<pre><code>withGroupWait(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/notificationPolicy/index.html#fn-withmatchers","title":"fn withMatchers","text":"<pre><code>withMatchers(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Matchers is a slice of Matchers that is sortable, implements Stringer, and provides a Matches method to match a LabelSet against all Matchers in the slice. Note that some users of Matchers might require it to be sorted.</p>"},{"location":"API/alerting/notificationPolicy/index.html#fn-withmatchersmixin","title":"fn withMatchersMixin","text":"<pre><code>withMatchersMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Matchers is a slice of Matchers that is sortable, implements Stringer, and provides a Matches method to match a LabelSet against all Matchers in the slice. Note that some users of Matchers might require it to be sorted.</p>"},{"location":"API/alerting/notificationPolicy/index.html#fn-withmutetimeintervals","title":"fn withMuteTimeIntervals","text":"<pre><code>withMuteTimeIntervals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/notificationPolicy/index.html#fn-withmutetimeintervalsmixin","title":"fn withMuteTimeIntervalsMixin","text":"<pre><code>withMuteTimeIntervalsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/notificationPolicy/index.html#fn-withpolicy","title":"fn withPolicy","text":"<pre><code>withPolicy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/notificationPolicy/index.html#fn-withpolicymixin","title":"fn withPolicyMixin","text":"<pre><code>withPolicyMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/notificationPolicy/index.html#fn-withrepeatinterval","title":"fn withRepeatInterval","text":"<pre><code>withRepeatInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/notificationPolicy/matcher.html","title":"matcher","text":""},{"location":"API/alerting/notificationPolicy/matcher.html#index","title":"Index","text":"<ul> <li><code>fn withName(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/alerting/notificationPolicy/matcher.html#fields","title":"Fields","text":""},{"location":"API/alerting/notificationPolicy/matcher.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/notificationPolicy/matcher.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"=\"</code>, <code>\"!=\"</code>, <code>\"=~\"</code>, <code>\"!~\"</code></li> </ul> </li> </ul> <p>MatchType is an enum for label matching types.</p>"},{"location":"API/alerting/notificationPolicy/matcher.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/index.html","title":"ruleGroup","text":"<p>grafonnet.alerting.ruleGroup</p>"},{"location":"API/alerting/ruleGroup/index.html#subpackages","title":"Subpackages","text":"<ul> <li>rule</li> </ul>"},{"location":"API/alerting/ruleGroup/index.html#index","title":"Index","text":"<ul> <li><code>fn withFolderUid(value)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>fn withRules(value)</code></li> <li><code>fn withRulesMixin(value)</code></li> </ul>"},{"location":"API/alerting/ruleGroup/index.html#fields","title":"Fields","text":""},{"location":"API/alerting/ruleGroup/index.html#fn-withfolderuid","title":"fn withFolderUid","text":"<pre><code>withFolderUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/index.html#fn-withinterval","title":"fn withInterval","text":"<pre><code>withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/index.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/index.html#fn-withrules","title":"fn withRules","text":"<pre><code>withRules(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/index.html#fn-withrulesmixin","title":"fn withRulesMixin","text":"<pre><code>withRulesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html","title":"rule","text":""},{"location":"API/alerting/ruleGroup/rule/index.html#subpackages","title":"Subpackages","text":"<ul> <li>data</li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#index","title":"Index","text":"<ul> <li><code>fn withAnnotations(value)</code></li> <li><code>fn withAnnotationsMixin(value)</code></li> <li><code>fn withCondition(value)</code></li> <li><code>fn withData(value)</code></li> <li><code>fn withDataMixin(value)</code></li> <li><code>fn withExecErrState(value)</code></li> <li><code>fn withFolderUID(value)</code></li> <li><code>fn withFor(value)</code></li> <li><code>fn withIsPaused(value=true)</code></li> <li><code>fn withLabels(value)</code></li> <li><code>fn withLabelsMixin(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>fn withNoDataState(value)</code></li> <li><code>fn withOrgID(value)</code></li> <li><code>fn withRuleGroup(value)</code></li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#fields","title":"Fields","text":""},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withannotations","title":"fn withAnnotations","text":"<pre><code>withAnnotations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withannotationsmixin","title":"fn withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withcondition","title":"fn withCondition","text":"<pre><code>withCondition(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withdata","title":"fn withData","text":"<pre><code>withData(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withdatamixin","title":"fn withDataMixin","text":"<pre><code>withDataMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withexecerrstate","title":"fn withExecErrState","text":"<pre><code>withExecErrState(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"OK\"</code>, <code>\"Alerting\"</code>, <code>\"Error\"</code></li> </ul> </li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withfolderuid","title":"fn withFolderUID","text":"<pre><code>withFolderUID(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withfor","title":"fn withFor","text":"<pre><code>withFor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.</p>"},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withispaused","title":"fn withIsPaused","text":"<pre><code>withIsPaused(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withlabels","title":"fn withLabels","text":"<pre><code>withLabels(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withlabelsmixin","title":"fn withLabelsMixin","text":"<pre><code>withLabelsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withnodatastate","title":"fn withNoDataState","text":"<pre><code>withNoDataState(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"Alerting\"</code>, <code>\"NoData\"</code>, <code>\"OK\"</code></li> </ul> </li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withorgid","title":"fn withOrgID","text":"<pre><code>withOrgID(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/rule/index.html#fn-withrulegroup","title":"fn withRuleGroup","text":"<pre><code>withRuleGroup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/alerting/ruleGroup/rule/data.html","title":"data","text":""},{"location":"API/alerting/ruleGroup/rule/data.html#index","title":"Index","text":"<ul> <li><code>fn withDatasourceUid(value)</code></li> <li><code>fn withModel(value)</code></li> <li><code>fn withModelMixin(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withRelativeTimeRange(value)</code></li> <li><code>fn withRelativeTimeRangeMixin(value)</code></li> <li><code>obj relativeTimeRange</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withTo(value)</code></li> </ul> </li> </ul>"},{"location":"API/alerting/ruleGroup/rule/data.html#fields","title":"Fields","text":""},{"location":"API/alerting/ruleGroup/rule/data.html#fn-withdatasourceuid","title":"fn withDatasourceUid","text":"<pre><code>withDatasourceUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Grafana data source unique identifier; it should be 'expr' for a Server Side Expression operation.</p>"},{"location":"API/alerting/ruleGroup/rule/data.html#fn-withmodel","title":"fn withModel","text":"<pre><code>withModel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>JSON is the raw JSON query and includes the above properties as well as custom properties.</p>"},{"location":"API/alerting/ruleGroup/rule/data.html#fn-withmodelmixin","title":"fn withModelMixin","text":"<pre><code>withModelMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>JSON is the raw JSON query and includes the above properties as well as custom properties.</p>"},{"location":"API/alerting/ruleGroup/rule/data.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>QueryType is an optional identifier for the type of query. It can be used to distinguish different types of queries.</p>"},{"location":"API/alerting/ruleGroup/rule/data.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>RefID is the unique identifier of the query, set by the frontend call.</p>"},{"location":"API/alerting/ruleGroup/rule/data.html#fn-withrelativetimerange","title":"fn withRelativeTimeRange","text":"<pre><code>withRelativeTimeRange(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>RelativeTimeRange is the per query start and end time for requests.</p>"},{"location":"API/alerting/ruleGroup/rule/data.html#fn-withrelativetimerangemixin","title":"fn withRelativeTimeRangeMixin","text":"<pre><code>withRelativeTimeRangeMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>RelativeTimeRange is the per query start and end time for requests.</p>"},{"location":"API/alerting/ruleGroup/rule/data.html#obj-relativetimerange","title":"obj relativeTimeRange","text":""},{"location":"API/alerting/ruleGroup/rule/data.html#fn-relativetimerangewithfrom","title":"fn relativeTimeRange.withFrom","text":"<pre><code>relativeTimeRange.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.</p>"},{"location":"API/alerting/ruleGroup/rule/data.html#fn-relativetimerangewithto","title":"fn relativeTimeRange.withTo","text":"<pre><code>relativeTimeRange.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.</p>"},{"location":"API/dashboard/index.html","title":"dashboard","text":"<p>grafonnet.dashboard</p>"},{"location":"API/dashboard/index.html#subpackages","title":"Subpackages","text":"<ul> <li>annotation</li> <li>link</li> <li>variable</li> </ul>"},{"location":"API/dashboard/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>fn withAnnotations(value)</code></li> <li><code>fn withAnnotationsMixin(value)</code></li> <li><code>fn withDescription(value)</code></li> <li><code>fn withEditable(value=true)</code></li> <li><code>fn withFiscalYearStartMonth(value=0)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withLiveNow(value=true)</code></li> <li><code>fn withPanels(panels, setPanelIDs=true)</code></li> <li><code>fn withPanelsMixin(panels, setPanelIDs=true)</code></li> <li><code>fn withRefresh(value)</code></li> <li><code>fn withSchemaVersion(value=39)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTemplating(value)</code></li> <li><code>fn withTemplatingMixin(value)</code></li> <li><code>fn withTimezone(value=\"browser\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withUid(value)</code></li> <li><code>fn withVariables(value)</code></li> <li><code>fn withVariablesMixin(value)</code></li> <li><code>fn withWeekStart(value)</code></li> <li><code>obj graphTooltip</code><ul> <li><code>fn withSharedCrosshair()</code></li> <li><code>fn withSharedTooltip()</code></li> </ul> </li> <li><code>obj time</code><ul> <li><code>fn withFrom(value=\"now-6h\")</code></li> <li><code>fn withTo(value=\"now\")</code></li> </ul> </li> <li><code>obj timepicker</code><ul> <li><code>fn withHidden(value=true)</code></li> <li><code>fn withNowDelay(value)</code></li> <li><code>fn withRefreshIntervals(value=[\"5s\",\"10s\",\"30s\",\"1m\",\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"1d\"])</code></li> <li><code>fn withRefreshIntervalsMixin(value=[\"5s\",\"10s\",\"30s\",\"1m\",\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"1d\"])</code></li> <li><code>fn withTimeOptions(value=[\"5m\",\"15m\",\"1h\",\"6h\",\"12h\",\"24h\",\"2d\",\"7d\",\"30d\"])</code></li> <li><code>fn withTimeOptionsMixin(value=[\"5m\",\"15m\",\"1h\",\"6h\",\"12h\",\"24h\",\"2d\",\"7d\",\"30d\"])</code></li> </ul> </li> </ul>"},{"location":"API/dashboard/index.html#fields","title":"Fields","text":""},{"location":"API/dashboard/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new dashboard with a title.</p>"},{"location":"API/dashboard/index.html#fn-withannotations","title":"fn withAnnotations","text":"<pre><code>withAnnotations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p><code>withAnnotations</code> adds an array of annotations to a dashboard.</p> <p>This function appends passed data to existing values</p>"},{"location":"API/dashboard/index.html#fn-withannotationsmixin","title":"fn withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p><code>withAnnotationsMixin</code> adds an array of annotations to a dashboard.</p> <p>This function appends passed data to existing values</p>"},{"location":"API/dashboard/index.html#fn-withdescription","title":"fn withDescription","text":"<pre><code>withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Description of dashboard.</p>"},{"location":"API/dashboard/index.html#fn-witheditable","title":"fn withEditable","text":"<pre><code>withEditable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether a dashboard is editable or not.</p>"},{"location":"API/dashboard/index.html#fn-withfiscalyearstartmonth","title":"fn withFiscalYearStartMonth","text":"<pre><code>withFiscalYearStartMonth(value=0)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>0</code></li> </ul> </li> </ul> <p>The month that the fiscal year starts on.  0 = January, 11 = December</p>"},{"location":"API/dashboard/index.html#fn-withlinks","title":"fn withLinks","text":"<pre><code>withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Dashboard links are displayed at the top of the dashboard, these can either link to other dashboards or to external URLs.</p> <p><code>withLinks</code> takes an array of link objects.</p> <p>The docs give a more comprehensive description.</p> <p>Example:</p> <pre><code>local g = import 'g.libsonnet';\nlocal link = g.dashboard.link;\n\ng.dashboard.new('Title dashboard')\n+ g.dashboard.withLinks([\n  link.link.new('My title', 'https://wikipedia.org/'),\n])\n</code></pre>"},{"location":"API/dashboard/index.html#fn-withlinksmixin","title":"fn withLinksMixin","text":"<pre><code>withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Dashboard links are displayed at the top of the dashboard, these can either link to other dashboards or to external URLs.</p> <p><code>withLinks</code> takes an array of link objects.</p> <p>The docs give a more comprehensive description.</p> <p>Example:</p> <pre><code>local g = import 'g.libsonnet';\nlocal link = g.dashboard.link;\n\ng.dashboard.new('Title dashboard')\n+ g.dashboard.withLinks([\n  link.link.new('My title', 'https://wikipedia.org/'),\n])\n</code></pre>"},{"location":"API/dashboard/index.html#fn-withlivenow","title":"fn withLiveNow","text":"<pre><code>withLiveNow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>When set to true, the dashboard will redraw panels at an interval matching the pixel width. This will keep data \"moving left\" regardless of the query refresh rate. This setting helps avoid dashboards presenting stale live data</p>"},{"location":"API/dashboard/index.html#fn-withpanels","title":"fn withPanels","text":"<pre><code>withPanels(panels, setPanelIDs=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panels (<code>array</code>)</li> <li>setPanelIDs (<code>bool</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p><code>withPanels</code> sets the panels on a dashboard authoratively. It automatically adds IDs to the panels, this can be disabled with <code>setPanelIDs=false</code>.</p>"},{"location":"API/dashboard/index.html#fn-withpanelsmixin","title":"fn withPanelsMixin","text":"<pre><code>withPanelsMixin(panels, setPanelIDs=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>panels (<code>array</code>)</li> <li>setPanelIDs (<code>bool</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p><code>withPanelsMixin</code> adds more panels to a dashboard.</p>"},{"location":"API/dashboard/index.html#fn-withrefresh","title":"fn withRefresh","text":"<pre><code>withRefresh(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Refresh rate of dashboard. Represented via interval string, e.g. \"5s\", \"1m\", \"1h\", \"1d\".</p>"},{"location":"API/dashboard/index.html#fn-withschemaversion","title":"fn withSchemaVersion","text":"<pre><code>withSchemaVersion(value=39)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)<ul> <li>default value: <code>39</code></li> </ul> </li> </ul>"},{"location":"API/dashboard/index.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Tags associated with dashboard.</p>"},{"location":"API/dashboard/index.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Tags associated with dashboard.</p>"},{"location":"API/dashboard/index.html#fn-withtemplating","title":"fn withTemplating","text":"<pre><code>withTemplating(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Configured template variables</p>"},{"location":"API/dashboard/index.html#fn-withtemplatingmixin","title":"fn withTemplatingMixin","text":"<pre><code>withTemplatingMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Configured template variables</p>"},{"location":"API/dashboard/index.html#fn-withtimezone","title":"fn withTimezone","text":"<pre><code>withTimezone(value=\"browser\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"browser\"</code></li> </ul> </li> </ul> <p>Timezone of dashboard. Accepted values are IANA TZDB zone ID or \"browser\" or \"utc\".</p>"},{"location":"API/dashboard/index.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title of dashboard.</p>"},{"location":"API/dashboard/index.html#fn-withuid","title":"fn withUid","text":"<pre><code>withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique dashboard identifier that can be generated by anyone. string (8-40)</p>"},{"location":"API/dashboard/index.html#fn-withvariables","title":"fn withVariables","text":"<pre><code>withVariables(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p><code>withVariables</code> adds an array of variables to a dashboard</p>"},{"location":"API/dashboard/index.html#fn-withvariablesmixin","title":"fn withVariablesMixin","text":"<pre><code>withVariablesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p><code>withVariablesMixin</code> adds an array of variables to a dashboard.</p> <p>This function appends passed data to existing values</p>"},{"location":"API/dashboard/index.html#fn-withweekstart","title":"fn withWeekStart","text":"<pre><code>withWeekStart(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Day when the week starts. Expressed by the name of the day in lowercase, e.g. \"monday\".</p>"},{"location":"API/dashboard/index.html#obj-graphtooltip","title":"obj graphTooltip","text":""},{"location":"API/dashboard/index.html#fn-graphtooltipwithsharedcrosshair","title":"fn graphTooltip.withSharedCrosshair","text":"<pre><code>graphTooltip.withSharedCrosshair()\n</code></pre> <p>Share crosshair on all panels.</p>"},{"location":"API/dashboard/index.html#fn-graphtooltipwithsharedtooltip","title":"fn graphTooltip.withSharedTooltip","text":"<pre><code>graphTooltip.withSharedTooltip()\n</code></pre> <p>Share crosshair and tooltip on all panels.</p>"},{"location":"API/dashboard/index.html#obj-time","title":"obj time","text":""},{"location":"API/dashboard/index.html#fn-timewithfrom","title":"fn time.withFrom","text":"<pre><code>time.withFrom(value=\"now-6h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now-6h\"</code></li> </ul> </li> </ul>"},{"location":"API/dashboard/index.html#fn-timewithto","title":"fn time.withTo","text":"<pre><code>time.withTo(value=\"now\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now\"</code></li> </ul> </li> </ul>"},{"location":"API/dashboard/index.html#obj-timepicker","title":"obj timepicker","text":""},{"location":"API/dashboard/index.html#fn-timepickerwithhidden","title":"fn timepicker.withHidden","text":"<pre><code>timepicker.withHidden(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether timepicker is visible or not.</p>"},{"location":"API/dashboard/index.html#fn-timepickerwithnowdelay","title":"fn timepicker.withNowDelay","text":"<pre><code>timepicker.withNowDelay(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Override the now time by entering a time delay. Use this option to accommodate known delays in data aggregation to avoid null values.</p>"},{"location":"API/dashboard/index.html#fn-timepickerwithrefreshintervals","title":"fn timepicker.withRefreshIntervals","text":"<pre><code>timepicker.withRefreshIntervals(value=[\"5s\",\"10s\",\"30s\",\"1m\",\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"1d\"])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[\"5s\",\"10s\",\"30s\",\"1m\",\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"1d\"]</code></li> </ul> </li> </ul> <p>Interval options available in the refresh picker dropdown.</p>"},{"location":"API/dashboard/index.html#fn-timepickerwithrefreshintervalsmixin","title":"fn timepicker.withRefreshIntervalsMixin","text":"<pre><code>timepicker.withRefreshIntervalsMixin(value=[\"5s\",\"10s\",\"30s\",\"1m\",\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"1d\"])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[\"5s\",\"10s\",\"30s\",\"1m\",\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"1d\"]</code></li> </ul> </li> </ul> <p>Interval options available in the refresh picker dropdown.</p>"},{"location":"API/dashboard/index.html#fn-timepickerwithtimeoptions","title":"fn timepicker.withTimeOptions","text":"<pre><code>timepicker.withTimeOptions(value=[\"5m\",\"15m\",\"1h\",\"6h\",\"12h\",\"24h\",\"2d\",\"7d\",\"30d\"])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[\"5m\",\"15m\",\"1h\",\"6h\",\"12h\",\"24h\",\"2d\",\"7d\",\"30d\"]</code></li> </ul> </li> </ul> <p>Selectable options available in the time picker dropdown. Has no effect on provisioned dashboard.</p>"},{"location":"API/dashboard/index.html#fn-timepickerwithtimeoptionsmixin","title":"fn timepicker.withTimeOptionsMixin","text":"<pre><code>timepicker.withTimeOptionsMixin(value=[\"5m\",\"15m\",\"1h\",\"6h\",\"12h\",\"24h\",\"2d\",\"7d\",\"30d\"])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[\"5m\",\"15m\",\"1h\",\"6h\",\"12h\",\"24h\",\"2d\",\"7d\",\"30d\"]</code></li> </ul> </li> </ul> <p>Selectable options available in the time picker dropdown. Has no effect on provisioned dashboard.</p>"},{"location":"API/dashboard/annotation.html","title":"annotation","text":""},{"location":"API/dashboard/annotation.html#index","title":"Index","text":"<ul> <li><code>fn withBuiltIn(value=0)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withEnable(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withIconColor(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>fn withTarget(value)</code></li> <li><code>fn withTargetMixin(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>obj datasource</code><ul> <li><code>fn withType(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj filter</code><ul> <li><code>fn withExclude(value=true)</code></li> <li><code>fn withIds(value)</code></li> <li><code>fn withIdsMixin(value)</code></li> </ul> </li> <li><code>obj target</code><ul> <li><code>fn withLimit(value)</code></li> <li><code>fn withMatchAny(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> </ul>"},{"location":"API/dashboard/annotation.html#fields","title":"Fields","text":""},{"location":"API/dashboard/annotation.html#fn-withbuiltin","title":"fn withBuiltIn","text":"<pre><code>withBuiltIn(value=0)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)<ul> <li>default value: <code>0</code></li> </ul> </li> </ul> <p>Set to 1 for the standard annotation query all dashboards have by default.</p>"},{"location":"API/dashboard/annotation.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/dashboard/annotation.html#fn-withdatasourcemixin","title":"fn withDatasourceMixin","text":"<pre><code>withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/dashboard/annotation.html#fn-withenable","title":"fn withEnable","text":"<pre><code>withEnable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>When enabled the annotation query is issued with every dashboard refresh</p>"},{"location":"API/dashboard/annotation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/dashboard/annotation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/dashboard/annotation.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Annotation queries can be toggled on or off at the top of the dashboard. When hide is true, the toggle is not shown in the dashboard.</p>"},{"location":"API/dashboard/annotation.html#fn-withiconcolor","title":"fn withIconColor","text":"<pre><code>withIconColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color to use for the annotation event markers</p>"},{"location":"API/dashboard/annotation.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of annotation.</p>"},{"location":"API/dashboard/annotation.html#fn-withtarget","title":"fn withTarget","text":"<pre><code>withTarget(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO: this should be a regular DataQuery that depends on the selected dashboard these match the properties of the \"grafana\" datasouce that is default in most dashboards</p>"},{"location":"API/dashboard/annotation.html#fn-withtargetmixin","title":"fn withTargetMixin","text":"<pre><code>withTargetMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO: this should be a regular DataQuery that depends on the selected dashboard these match the properties of the \"grafana\" datasouce that is default in most dashboards</p>"},{"location":"API/dashboard/annotation.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>TODO -- this should not exist here, it is based on the --grafana-- datasource</p>"},{"location":"API/dashboard/annotation.html#obj-datasource","title":"obj datasource","text":""},{"location":"API/dashboard/annotation.html#fn-datasourcewithtype","title":"fn datasource.withType","text":"<pre><code>datasource.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The plugin type-id</p>"},{"location":"API/dashboard/annotation.html#fn-datasourcewithuid","title":"fn datasource.withUid","text":"<pre><code>datasource.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specific datasource instance</p>"},{"location":"API/dashboard/annotation.html#obj-filter","title":"obj filter","text":""},{"location":"API/dashboard/annotation.html#fn-filterwithexclude","title":"fn filter.withExclude","text":"<pre><code>filter.withExclude(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Should the specified panels be included or excluded</p>"},{"location":"API/dashboard/annotation.html#fn-filterwithids","title":"fn filter.withIds","text":"<pre><code>filter.withIds(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel IDs that should be included or excluded</p>"},{"location":"API/dashboard/annotation.html#fn-filterwithidsmixin","title":"fn filter.withIdsMixin","text":"<pre><code>filter.withIdsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel IDs that should be included or excluded</p>"},{"location":"API/dashboard/annotation.html#obj-target","title":"obj target","text":""},{"location":"API/dashboard/annotation.html#fn-targetwithlimit","title":"fn target.withLimit","text":"<pre><code>target.withLimit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Only required/valid for the grafana datasource... but code+tests is already depending on it so hard to change</p>"},{"location":"API/dashboard/annotation.html#fn-targetwithmatchany","title":"fn target.withMatchAny","text":"<pre><code>target.withMatchAny(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Only required/valid for the grafana datasource... but code+tests is already depending on it so hard to change</p>"},{"location":"API/dashboard/annotation.html#fn-targetwithtags","title":"fn target.withTags","text":"<pre><code>target.withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Only required/valid for the grafana datasource... but code+tests is already depending on it so hard to change</p>"},{"location":"API/dashboard/annotation.html#fn-targetwithtagsmixin","title":"fn target.withTagsMixin","text":"<pre><code>target.withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Only required/valid for the grafana datasource... but code+tests is already depending on it so hard to change</p>"},{"location":"API/dashboard/annotation.html#fn-targetwithtype","title":"fn target.withType","text":"<pre><code>target.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Only required/valid for the grafana datasource... but code+tests is already depending on it so hard to change</p>"},{"location":"API/dashboard/link.html","title":"link","text":"<p>Dashboard links are displayed at the top of the dashboard, these can either link to other dashboards or to external URLs.</p> <p>The docs give a more comprehensive description.</p> <p>Example:</p> <pre><code>local g = import 'g.libsonnet';\nlocal link = g.dashboard.link;\n\ng.dashboard.new('Title dashboard')\n+ g.dashboard.withLinks([\n  link.link.new('My title', 'https://wikipedia.org/'),\n])\n</code></pre>"},{"location":"API/dashboard/link.html#index","title":"Index","text":"<ul> <li><code>obj dashboards</code><ul> <li><code>fn new(title, tags)</code></li> <li><code>obj options</code><ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> </ul> </li> </ul> </li> <li><code>obj link</code><ul> <li><code>fn new(title, url)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>obj options</code><ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/dashboard/link.html#fields","title":"Fields","text":""},{"location":"API/dashboard/link.html#obj-dashboards","title":"obj dashboards","text":""},{"location":"API/dashboard/link.html#fn-dashboardsnew","title":"fn dashboards.new","text":"<pre><code>dashboards.new(title, tags)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> <li>tags (<code>array</code>)</li> </ul> <p>Create links to dashboards based on <code>tags</code>.</p>"},{"location":"API/dashboard/link.html#obj-dashboardsoptions","title":"obj dashboards.options","text":""},{"location":"API/dashboard/link.html#fn-dashboardsoptionswithasdropdown","title":"fn dashboards.options.withAsDropdown","text":"<pre><code>dashboards.options.withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/dashboard/link.html#fn-dashboardsoptionswithincludevars","title":"fn dashboards.options.withIncludeVars","text":"<pre><code>dashboards.options.withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/dashboard/link.html#fn-dashboardsoptionswithkeeptime","title":"fn dashboards.options.withKeepTime","text":"<pre><code>dashboards.options.withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/dashboard/link.html#fn-dashboardsoptionswithtargetblank","title":"fn dashboards.options.withTargetBlank","text":"<pre><code>dashboards.options.withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/dashboard/link.html#obj-link","title":"obj link","text":""},{"location":"API/dashboard/link.html#fn-linknew","title":"fn link.new","text":"<pre><code>link.new(title, url)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> <li>url (<code>string</code>)</li> </ul> <p>Create link to an arbitrary URL.</p>"},{"location":"API/dashboard/link.html#fn-linkwithicon","title":"fn link.withIcon","text":"<pre><code>link.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/dashboard/link.html#fn-linkwithtooltip","title":"fn link.withTooltip","text":"<pre><code>link.withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/dashboard/link.html#obj-linkoptions","title":"obj link.options","text":""},{"location":"API/dashboard/link.html#fn-linkoptionswithasdropdown","title":"fn link.options.withAsDropdown","text":"<pre><code>link.options.withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/dashboard/link.html#fn-linkoptionswithincludevars","title":"fn link.options.withIncludeVars","text":"<pre><code>link.options.withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/dashboard/link.html#fn-linkoptionswithkeeptime","title":"fn link.options.withKeepTime","text":"<pre><code>link.options.withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/dashboard/link.html#fn-linkoptionswithtargetblank","title":"fn link.options.withTargetBlank","text":"<pre><code>link.options.withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/dashboard/variable.html","title":"variable","text":"<p>Example usage:</p> <pre><code>local g = import 'g.libsonnet';\nlocal var = g.dashboard.variable;\n\nlocal customVar =\n  var.custom.new(\n    'myOptions',\n    values=['a', 'b', 'c', 'd'],\n  )\n  + var.custom.generalOptions.withDescription(\n    'This is a variable for my custom options.'\n  )\n  + var.custom.selectionOptions.withMulti();\n\nlocal queryVar =\n  var.query.new('queryOptions')\n  + var.query.queryTypes.withLabelValues(\n    'up',\n    'instance',\n  )\n  + var.query.withDatasource(\n    type='prometheus',\n    uid='mimir-prod',\n  )\n  + var.query.selectionOptions.withIncludeAll();\n\n\ng.dashboard.new('my dashboard')\n+ g.dashboard.withVariables([\n  customVar,\n  queryVar,\n])\n</code></pre>"},{"location":"API/dashboard/variable.html#index","title":"Index","text":"<ul> <li><code>obj adhoc</code><ul> <li><code>fn new(name, type, uid)</code></li> <li><code>fn newFromDatasourceVariable(name, variable)</code></li> <li><code>obj generalOptions</code><ul> <li><code>fn withCurrent(key, value=\"&lt;same-as-key&gt;\")</code></li> <li><code>fn withDescription(value)</code></li> <li><code>fn withLabel(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>obj showOnDashboard</code><ul> <li><code>fn withLabelAndValue()</code></li> <li><code>fn withNothing()</code></li> <li><code>fn withValueOnly()</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj constant</code><ul> <li><code>fn new(name, value)</code></li> <li><code>obj generalOptions</code><ul> <li><code>fn withCurrent(key, value=\"&lt;same-as-key&gt;\")</code></li> <li><code>fn withDescription(value)</code></li> <li><code>fn withLabel(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>obj showOnDashboard</code><ul> <li><code>fn withLabelAndValue()</code></li> <li><code>fn withNothing()</code></li> <li><code>fn withValueOnly()</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj custom</code><ul> <li><code>fn new(name, values)</code></li> <li><code>obj generalOptions</code><ul> <li><code>fn withCurrent(key, value=\"&lt;same-as-key&gt;\")</code></li> <li><code>fn withDescription(value)</code></li> <li><code>fn withLabel(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>obj showOnDashboard</code><ul> <li><code>fn withLabelAndValue()</code></li> <li><code>fn withNothing()</code></li> <li><code>fn withValueOnly()</code></li> </ul> </li> </ul> </li> <li><code>obj selectionOptions</code><ul> <li><code>fn withIncludeAll(value=true, customAllValue)</code></li> <li><code>fn withMulti(value=true)</code></li> </ul> </li> </ul> </li> <li><code>obj datasource</code><ul> <li><code>fn new(name, type)</code></li> <li><code>fn withRegex(value)</code></li> <li><code>obj generalOptions</code><ul> <li><code>fn withCurrent(key, value=\"&lt;same-as-key&gt;\")</code></li> <li><code>fn withDescription(value)</code></li> <li><code>fn withLabel(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>obj showOnDashboard</code><ul> <li><code>fn withLabelAndValue()</code></li> <li><code>fn withNothing()</code></li> <li><code>fn withValueOnly()</code></li> </ul> </li> </ul> </li> <li><code>obj selectionOptions</code><ul> <li><code>fn withIncludeAll(value=true, customAllValue)</code></li> <li><code>fn withMulti(value=true)</code></li> </ul> </li> </ul> </li> <li><code>obj interval</code><ul> <li><code>fn new(name, values)</code></li> <li><code>fn withAutoOption(count, minInterval)</code></li> <li><code>obj generalOptions</code><ul> <li><code>fn withCurrent(key, value=\"&lt;same-as-key&gt;\")</code></li> <li><code>fn withDescription(value)</code></li> <li><code>fn withLabel(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>obj showOnDashboard</code><ul> <li><code>fn withLabelAndValue()</code></li> <li><code>fn withNothing()</code></li> <li><code>fn withValueOnly()</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj query</code><ul> <li><code>fn new(name, query=\"\")</code></li> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceFromVariable(variable)</code></li> <li><code>fn withRegex(value)</code></li> <li><code>fn withSort(i=0, type=\"alphabetical\", asc=true, caseInsensitive=false)</code></li> <li><code>obj generalOptions</code><ul> <li><code>fn withCurrent(key, value=\"&lt;same-as-key&gt;\")</code></li> <li><code>fn withDescription(value)</code></li> <li><code>fn withLabel(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>obj showOnDashboard</code><ul> <li><code>fn withLabelAndValue()</code></li> <li><code>fn withNothing()</code></li> <li><code>fn withValueOnly()</code></li> </ul> </li> </ul> </li> <li><code>obj queryTypes</code><ul> <li><code>fn withLabelValues(label, metric=\"\")</code></li> <li><code>fn withQueryResult(query)</code></li> </ul> </li> <li><code>obj refresh</code><ul> <li><code>fn onLoad()</code></li> <li><code>fn onTime()</code></li> </ul> </li> <li><code>obj selectionOptions</code><ul> <li><code>fn withIncludeAll(value=true, customAllValue)</code></li> <li><code>fn withMulti(value=true)</code></li> </ul> </li> </ul> </li> <li><code>obj textbox</code><ul> <li><code>fn new(name, default=\"\")</code></li> <li><code>obj generalOptions</code><ul> <li><code>fn withCurrent(key, value=\"&lt;same-as-key&gt;\")</code></li> <li><code>fn withDescription(value)</code></li> <li><code>fn withLabel(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>obj showOnDashboard</code><ul> <li><code>fn withLabelAndValue()</code></li> <li><code>fn withNothing()</code></li> <li><code>fn withValueOnly()</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"API/dashboard/variable.html#fields","title":"Fields","text":""},{"location":"API/dashboard/variable.html#obj-adhoc","title":"obj adhoc","text":""},{"location":"API/dashboard/variable.html#fn-adhocnew","title":"fn adhoc.new","text":"<pre><code>adhoc.new(name, type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>name (<code>string</code>)</li> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>new</code> creates an adhoc template variable for datasource with <code>type</code> and <code>uid</code>.</p>"},{"location":"API/dashboard/variable.html#fn-adhocnewfromdatasourcevariable","title":"fn adhoc.newFromDatasourceVariable","text":"<pre><code>adhoc.newFromDatasourceVariable(name, variable)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>name (<code>string</code>)</li> <li>variable (<code>object</code>)</li> </ul> <p>Same as <code>new</code> but selecting the datasource from another template variable.</p>"},{"location":"API/dashboard/variable.html#obj-adhocgeneraloptions","title":"obj adhoc.generalOptions","text":""},{"location":"API/dashboard/variable.html#fn-adhocgeneraloptionswithcurrent","title":"fn adhoc.generalOptions.withCurrent","text":"<pre><code>adhoc.generalOptions.withCurrent(key, value=\"&lt;same-as-key&gt;\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>key (<code>any</code>)</li> <li>value (<code>any</code>)<ul> <li>default value: <code>\"&lt;same-as-key&gt;\"</code></li> </ul> </li> </ul> <p><code>withCurrent</code> sets the currently selected value of a variable. If key and value are different, both need to be given.</p>"},{"location":"API/dashboard/variable.html#fn-adhocgeneraloptionswithdescription","title":"fn adhoc.generalOptions.withDescription","text":"<pre><code>adhoc.generalOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Description of variable. It can be defined but <code>null</code>.</p>"},{"location":"API/dashboard/variable.html#fn-adhocgeneraloptionswithlabel","title":"fn adhoc.generalOptions.withLabel","text":"<pre><code>adhoc.generalOptions.withLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Optional display name</p>"},{"location":"API/dashboard/variable.html#fn-adhocgeneraloptionswithname","title":"fn adhoc.generalOptions.withName","text":"<pre><code>adhoc.generalOptions.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of variable</p>"},{"location":"API/dashboard/variable.html#obj-adhocgeneraloptionsshowondashboard","title":"obj adhoc.generalOptions.showOnDashboard","text":""},{"location":"API/dashboard/variable.html#fn-adhocgeneraloptionsshowondashboardwithlabelandvalue","title":"fn adhoc.generalOptions.showOnDashboard.withLabelAndValue","text":"<pre><code>adhoc.generalOptions.showOnDashboard.withLabelAndValue()\n</code></pre>"},{"location":"API/dashboard/variable.html#fn-adhocgeneraloptionsshowondashboardwithnothing","title":"fn adhoc.generalOptions.showOnDashboard.withNothing","text":"<pre><code>adhoc.generalOptions.showOnDashboard.withNothing()\n</code></pre>"},{"location":"API/dashboard/variable.html#fn-adhocgeneraloptionsshowondashboardwithvalueonly","title":"fn adhoc.generalOptions.showOnDashboard.withValueOnly","text":"<pre><code>adhoc.generalOptions.showOnDashboard.withValueOnly()\n</code></pre>"},{"location":"API/dashboard/variable.html#obj-constant","title":"obj constant","text":""},{"location":"API/dashboard/variable.html#fn-constantnew","title":"fn constant.new","text":"<pre><code>constant.new(name, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>name (<code>string</code>)</li> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a hidden constant template variable.</p>"},{"location":"API/dashboard/variable.html#obj-constantgeneraloptions","title":"obj constant.generalOptions","text":""},{"location":"API/dashboard/variable.html#fn-constantgeneraloptionswithcurrent","title":"fn constant.generalOptions.withCurrent","text":"<pre><code>constant.generalOptions.withCurrent(key, value=\"&lt;same-as-key&gt;\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>key (<code>any</code>)</li> <li>value (<code>any</code>)<ul> <li>default value: <code>\"&lt;same-as-key&gt;\"</code></li> </ul> </li> </ul> <p><code>withCurrent</code> sets the currently selected value of a variable. If key and value are different, both need to be given.</p>"},{"location":"API/dashboard/variable.html#fn-constantgeneraloptionswithdescription","title":"fn constant.generalOptions.withDescription","text":"<pre><code>constant.generalOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Description of variable. It can be defined but <code>null</code>.</p>"},{"location":"API/dashboard/variable.html#fn-constantgeneraloptionswithlabel","title":"fn constant.generalOptions.withLabel","text":"<pre><code>constant.generalOptions.withLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Optional display name</p>"},{"location":"API/dashboard/variable.html#fn-constantgeneraloptionswithname","title":"fn constant.generalOptions.withName","text":"<pre><code>constant.generalOptions.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of variable</p>"},{"location":"API/dashboard/variable.html#obj-constantgeneraloptionsshowondashboard","title":"obj constant.generalOptions.showOnDashboard","text":""},{"location":"API/dashboard/variable.html#fn-constantgeneraloptionsshowondashboardwithlabelandvalue","title":"fn constant.generalOptions.showOnDashboard.withLabelAndValue","text":"<pre><code>constant.generalOptions.showOnDashboard.withLabelAndValue()\n</code></pre>"},{"location":"API/dashboard/variable.html#fn-constantgeneraloptionsshowondashboardwithnothing","title":"fn constant.generalOptions.showOnDashboard.withNothing","text":"<pre><code>constant.generalOptions.showOnDashboard.withNothing()\n</code></pre>"},{"location":"API/dashboard/variable.html#fn-constantgeneraloptionsshowondashboardwithvalueonly","title":"fn constant.generalOptions.showOnDashboard.withValueOnly","text":"<pre><code>constant.generalOptions.showOnDashboard.withValueOnly()\n</code></pre>"},{"location":"API/dashboard/variable.html#obj-custom","title":"obj custom","text":""},{"location":"API/dashboard/variable.html#fn-customnew","title":"fn custom.new","text":"<pre><code>custom.new(name, values)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>name (<code>string</code>)</li> <li>values (<code>array</code>)</li> </ul> <p><code>new</code> creates a custom template variable.</p> <p>The <code>values</code> array accepts an object with key/value keys, if it's not an object then it will be added as a string.</p> <p>Example: <pre><code>[\n  { key: 'mykey', value: 'myvalue' },\n  'myvalue',\n  12,\n]\n\n#### obj custom.generalOptions\n\n\n##### fn custom.generalOptions.withCurrent\n\n```jsonnet\ncustom.generalOptions.withCurrent(key, value=\"&lt;same-as-key&gt;\")\n</code></pre></p> <p>PARAMETERS:</p> <ul> <li>key (<code>any</code>)</li> <li>value (<code>any</code>)<ul> <li>default value: <code>\"&lt;same-as-key&gt;\"</code></li> </ul> </li> </ul> <p><code>withCurrent</code> sets the currently selected value of a variable. If key and value are different, both need to be given.</p>"},{"location":"API/dashboard/variable.html#fn-customgeneraloptionswithdescription","title":"fn custom.generalOptions.withDescription","text":"<pre><code>custom.generalOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Description of variable. It can be defined but <code>null</code>.</p>"},{"location":"API/dashboard/variable.html#fn-customgeneraloptionswithlabel","title":"fn custom.generalOptions.withLabel","text":"<pre><code>custom.generalOptions.withLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Optional display name</p>"},{"location":"API/dashboard/variable.html#fn-customgeneraloptionswithname","title":"fn custom.generalOptions.withName","text":"<pre><code>custom.generalOptions.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of variable</p>"},{"location":"API/dashboard/variable.html#obj-customgeneraloptionsshowondashboard","title":"obj custom.generalOptions.showOnDashboard","text":""},{"location":"API/dashboard/variable.html#fn-customgeneraloptionsshowondashboardwithlabelandvalue","title":"fn custom.generalOptions.showOnDashboard.withLabelAndValue","text":"<pre><code>custom.generalOptions.showOnDashboard.withLabelAndValue()\n</code></pre>"},{"location":"API/dashboard/variable.html#fn-customgeneraloptionsshowondashboardwithnothing","title":"fn custom.generalOptions.showOnDashboard.withNothing","text":"<pre><code>custom.generalOptions.showOnDashboard.withNothing()\n</code></pre>"},{"location":"API/dashboard/variable.html#fn-customgeneraloptionsshowondashboardwithvalueonly","title":"fn custom.generalOptions.showOnDashboard.withValueOnly","text":"<pre><code>custom.generalOptions.showOnDashboard.withValueOnly()\n</code></pre>"},{"location":"API/dashboard/variable.html#obj-customselectionoptions","title":"obj custom.selectionOptions","text":""},{"location":"API/dashboard/variable.html#fn-customselectionoptionswithincludeall","title":"fn custom.selectionOptions.withIncludeAll","text":"<pre><code>custom.selectionOptions.withIncludeAll(value=true, customAllValue)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>bool</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> <li>customAllValue (<code>string</code>)</li> </ul> <p><code>withIncludeAll</code> enables an option to include all variables.</p> <p>Optionally you can set a <code>customAllValue</code>.</p>"},{"location":"API/dashboard/variable.html#fn-customselectionoptionswithmulti","title":"fn custom.selectionOptions.withMulti","text":"<pre><code>custom.selectionOptions.withMulti(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>bool</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Enable selecting multiple values.</p>"},{"location":"API/dashboard/variable.html#obj-datasource","title":"obj datasource","text":""},{"location":"API/dashboard/variable.html#fn-datasourcenew","title":"fn datasource.new","text":"<pre><code>datasource.new(name, type)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>name (<code>string</code>)</li> <li>type (<code>string</code>)</li> </ul> <p><code>new</code> creates a datasource template variable.</p>"},{"location":"API/dashboard/variable.html#fn-datasourcewithregex","title":"fn datasource.withRegex","text":"<pre><code>datasource.withRegex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>withRegex</code> filter for which data source instances to choose from in the variable value list. Example: <code>/^prod/</code></p>"},{"location":"API/dashboard/variable.html#obj-datasourcegeneraloptions","title":"obj datasource.generalOptions","text":""},{"location":"API/dashboard/variable.html#fn-datasourcegeneraloptionswithcurrent","title":"fn datasource.generalOptions.withCurrent","text":"<pre><code>datasource.generalOptions.withCurrent(key, value=\"&lt;same-as-key&gt;\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>key (<code>any</code>)</li> <li>value (<code>any</code>)<ul> <li>default value: <code>\"&lt;same-as-key&gt;\"</code></li> </ul> </li> </ul> <p><code>withCurrent</code> sets the currently selected value of a variable. If key and value are different, both need to be given.</p>"},{"location":"API/dashboard/variable.html#fn-datasourcegeneraloptionswithdescription","title":"fn datasource.generalOptions.withDescription","text":"<pre><code>datasource.generalOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Description of variable. It can be defined but <code>null</code>.</p>"},{"location":"API/dashboard/variable.html#fn-datasourcegeneraloptionswithlabel","title":"fn datasource.generalOptions.withLabel","text":"<pre><code>datasource.generalOptions.withLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Optional display name</p>"},{"location":"API/dashboard/variable.html#fn-datasourcegeneraloptionswithname","title":"fn datasource.generalOptions.withName","text":"<pre><code>datasource.generalOptions.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of variable</p>"},{"location":"API/dashboard/variable.html#obj-datasourcegeneraloptionsshowondashboard","title":"obj datasource.generalOptions.showOnDashboard","text":""},{"location":"API/dashboard/variable.html#fn-datasourcegeneraloptionsshowondashboardwithlabelandvalue","title":"fn datasource.generalOptions.showOnDashboard.withLabelAndValue","text":"<pre><code>datasource.generalOptions.showOnDashboard.withLabelAndValue()\n</code></pre>"},{"location":"API/dashboard/variable.html#fn-datasourcegeneraloptionsshowondashboardwithnothing","title":"fn datasource.generalOptions.showOnDashboard.withNothing","text":"<pre><code>datasource.generalOptions.showOnDashboard.withNothing()\n</code></pre>"},{"location":"API/dashboard/variable.html#fn-datasourcegeneraloptionsshowondashboardwithvalueonly","title":"fn datasource.generalOptions.showOnDashboard.withValueOnly","text":"<pre><code>datasource.generalOptions.showOnDashboard.withValueOnly()\n</code></pre>"},{"location":"API/dashboard/variable.html#obj-datasourceselectionoptions","title":"obj datasource.selectionOptions","text":""},{"location":"API/dashboard/variable.html#fn-datasourceselectionoptionswithincludeall","title":"fn datasource.selectionOptions.withIncludeAll","text":"<pre><code>datasource.selectionOptions.withIncludeAll(value=true, customAllValue)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>bool</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> <li>customAllValue (<code>string</code>)</li> </ul> <p><code>withIncludeAll</code> enables an option to include all variables.</p> <p>Optionally you can set a <code>customAllValue</code>.</p>"},{"location":"API/dashboard/variable.html#fn-datasourceselectionoptionswithmulti","title":"fn datasource.selectionOptions.withMulti","text":"<pre><code>datasource.selectionOptions.withMulti(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>bool</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Enable selecting multiple values.</p>"},{"location":"API/dashboard/variable.html#obj-interval","title":"obj interval","text":""},{"location":"API/dashboard/variable.html#fn-intervalnew","title":"fn interval.new","text":"<pre><code>interval.new(name, values)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>name (<code>string</code>)</li> <li>values (<code>array</code>)</li> </ul> <p><code>new</code> creates an interval template variable.</p>"},{"location":"API/dashboard/variable.html#fn-intervalwithautooption","title":"fn interval.withAutoOption","text":"<pre><code>interval.withAutoOption(count, minInterval)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>count (<code>number</code>)</li> <li>minInterval (<code>string</code>)</li> </ul> <p><code>withAutoOption</code> adds an options to dynamically calculate interval by dividing time range by the count specified.</p> <p>`minInterval' has to be either unit-less or end with one of the following units: \"y, M, w, d, h, m, s, ms\".</p>"},{"location":"API/dashboard/variable.html#obj-intervalgeneraloptions","title":"obj interval.generalOptions","text":""},{"location":"API/dashboard/variable.html#fn-intervalgeneraloptionswithcurrent","title":"fn interval.generalOptions.withCurrent","text":"<pre><code>interval.generalOptions.withCurrent(key, value=\"&lt;same-as-key&gt;\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>key (<code>any</code>)</li> <li>value (<code>any</code>)<ul> <li>default value: <code>\"&lt;same-as-key&gt;\"</code></li> </ul> </li> </ul> <p><code>withCurrent</code> sets the currently selected value of a variable. If key and value are different, both need to be given.</p>"},{"location":"API/dashboard/variable.html#fn-intervalgeneraloptionswithdescription","title":"fn interval.generalOptions.withDescription","text":"<pre><code>interval.generalOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Description of variable. It can be defined but <code>null</code>.</p>"},{"location":"API/dashboard/variable.html#fn-intervalgeneraloptionswithlabel","title":"fn interval.generalOptions.withLabel","text":"<pre><code>interval.generalOptions.withLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Optional display name</p>"},{"location":"API/dashboard/variable.html#fn-intervalgeneraloptionswithname","title":"fn interval.generalOptions.withName","text":"<pre><code>interval.generalOptions.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of variable</p>"},{"location":"API/dashboard/variable.html#obj-intervalgeneraloptionsshowondashboard","title":"obj interval.generalOptions.showOnDashboard","text":""},{"location":"API/dashboard/variable.html#fn-intervalgeneraloptionsshowondashboardwithlabelandvalue","title":"fn interval.generalOptions.showOnDashboard.withLabelAndValue","text":"<pre><code>interval.generalOptions.showOnDashboard.withLabelAndValue()\n</code></pre>"},{"location":"API/dashboard/variable.html#fn-intervalgeneraloptionsshowondashboardwithnothing","title":"fn interval.generalOptions.showOnDashboard.withNothing","text":"<pre><code>interval.generalOptions.showOnDashboard.withNothing()\n</code></pre>"},{"location":"API/dashboard/variable.html#fn-intervalgeneraloptionsshowondashboardwithvalueonly","title":"fn interval.generalOptions.showOnDashboard.withValueOnly","text":"<pre><code>interval.generalOptions.showOnDashboard.withValueOnly()\n</code></pre>"},{"location":"API/dashboard/variable.html#obj-query","title":"obj query","text":""},{"location":"API/dashboard/variable.html#fn-querynew","title":"fn query.new","text":"<pre><code>query.new(name, query=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>name (<code>string</code>)</li> <li>query (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>Create a query template variable.</p> <p><code>query</code> argument is optional, this can also be set with <code>query.queryTypes</code>.</p>"},{"location":"API/dashboard/variable.html#fn-querywithdatasource","title":"fn query.withDatasource","text":"<pre><code>query.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p>Select a datasource for the variable template query.</p>"},{"location":"API/dashboard/variable.html#fn-querywithdatasourcefromvariable","title":"fn query.withDatasourceFromVariable","text":"<pre><code>query.withDatasourceFromVariable(variable)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>variable (<code>object</code>)</li> </ul> <p>Select the datasource from another template variable.</p>"},{"location":"API/dashboard/variable.html#fn-querywithregex","title":"fn query.withRegex","text":"<pre><code>query.withRegex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>withRegex</code> can extract part of a series name or metric node segment. Named capture groups can be used to separate the display text and value (see examples).</p>"},{"location":"API/dashboard/variable.html#fn-querywithsort","title":"fn query.withSort","text":"<pre><code>query.withSort(i=0, type=\"alphabetical\", asc=true, caseInsensitive=false)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>i (<code>number</code>)<ul> <li>default value: <code>0</code></li> </ul> </li> <li>type (<code>string</code>)<ul> <li>default value: <code>\"alphabetical\"</code></li> </ul> </li> <li>asc (<code>bool</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> <li>caseInsensitive (<code>bool</code>)<ul> <li>default value: <code>false</code></li> </ul> </li> </ul> <p>Choose how to sort the values in the dropdown.</p> <p>This can be called as <code>withSort(&lt;number&gt;) to use the integer values for each option. If</code>i==0` then it will be ignored and the other arguments will take precedence.</p> <p>The numerical values are:</p> <ul> <li>1 - Alphabetical (asc)</li> <li>2 - Alphabetical (desc)</li> <li>3 - Numerical (asc)</li> <li>4 - Numerical (desc)</li> <li>5 - Alphabetical (case-insensitive, asc)</li> <li>6 - Alphabetical (case-insensitive, desc)</li> </ul>"},{"location":"API/dashboard/variable.html#obj-querygeneraloptions","title":"obj query.generalOptions","text":""},{"location":"API/dashboard/variable.html#fn-querygeneraloptionswithcurrent","title":"fn query.generalOptions.withCurrent","text":"<pre><code>query.generalOptions.withCurrent(key, value=\"&lt;same-as-key&gt;\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>key (<code>any</code>)</li> <li>value (<code>any</code>)<ul> <li>default value: <code>\"&lt;same-as-key&gt;\"</code></li> </ul> </li> </ul> <p><code>withCurrent</code> sets the currently selected value of a variable. If key and value are different, both need to be given.</p>"},{"location":"API/dashboard/variable.html#fn-querygeneraloptionswithdescription","title":"fn query.generalOptions.withDescription","text":"<pre><code>query.generalOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Description of variable. It can be defined but <code>null</code>.</p>"},{"location":"API/dashboard/variable.html#fn-querygeneraloptionswithlabel","title":"fn query.generalOptions.withLabel","text":"<pre><code>query.generalOptions.withLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Optional display name</p>"},{"location":"API/dashboard/variable.html#fn-querygeneraloptionswithname","title":"fn query.generalOptions.withName","text":"<pre><code>query.generalOptions.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of variable</p>"},{"location":"API/dashboard/variable.html#obj-querygeneraloptionsshowondashboard","title":"obj query.generalOptions.showOnDashboard","text":""},{"location":"API/dashboard/variable.html#fn-querygeneraloptionsshowondashboardwithlabelandvalue","title":"fn query.generalOptions.showOnDashboard.withLabelAndValue","text":"<pre><code>query.generalOptions.showOnDashboard.withLabelAndValue()\n</code></pre>"},{"location":"API/dashboard/variable.html#fn-querygeneraloptionsshowondashboardwithnothing","title":"fn query.generalOptions.showOnDashboard.withNothing","text":"<pre><code>query.generalOptions.showOnDashboard.withNothing()\n</code></pre>"},{"location":"API/dashboard/variable.html#fn-querygeneraloptionsshowondashboardwithvalueonly","title":"fn query.generalOptions.showOnDashboard.withValueOnly","text":"<pre><code>query.generalOptions.showOnDashboard.withValueOnly()\n</code></pre>"},{"location":"API/dashboard/variable.html#obj-queryquerytypes","title":"obj query.queryTypes","text":""},{"location":"API/dashboard/variable.html#fn-queryquerytypeswithlabelvalues","title":"fn query.queryTypes.withLabelValues","text":"<pre><code>query.queryTypes.withLabelValues(label, metric=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>label (<code>string</code>)</li> <li>metric (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>Construct a Prometheus template variable using <code>label_values()</code>.</p>"},{"location":"API/dashboard/variable.html#fn-queryquerytypeswithqueryresult","title":"fn query.queryTypes.withQueryResult","text":"<pre><code>query.queryTypes.withQueryResult(query)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>query (<code>string</code>)</li> </ul> <p>Construct a Prometheus template variable using <code>query_result()</code>.</p>"},{"location":"API/dashboard/variable.html#obj-queryrefresh","title":"obj query.refresh","text":""},{"location":"API/dashboard/variable.html#fn-queryrefreshonload","title":"fn query.refresh.onLoad","text":"<pre><code>query.refresh.onLoad()\n</code></pre> <p>Refresh label values on dashboard load.</p>"},{"location":"API/dashboard/variable.html#fn-queryrefreshontime","title":"fn query.refresh.onTime","text":"<pre><code>query.refresh.onTime()\n</code></pre> <p>Refresh label values on time range change.</p>"},{"location":"API/dashboard/variable.html#obj-queryselectionoptions","title":"obj query.selectionOptions","text":""},{"location":"API/dashboard/variable.html#fn-queryselectionoptionswithincludeall","title":"fn query.selectionOptions.withIncludeAll","text":"<pre><code>query.selectionOptions.withIncludeAll(value=true, customAllValue)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>bool</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> <li>customAllValue (<code>string</code>)</li> </ul> <p><code>withIncludeAll</code> enables an option to include all variables.</p> <p>Optionally you can set a <code>customAllValue</code>.</p>"},{"location":"API/dashboard/variable.html#fn-queryselectionoptionswithmulti","title":"fn query.selectionOptions.withMulti","text":"<pre><code>query.selectionOptions.withMulti(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>bool</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Enable selecting multiple values.</p>"},{"location":"API/dashboard/variable.html#obj-textbox","title":"obj textbox","text":""},{"location":"API/dashboard/variable.html#fn-textboxnew","title":"fn textbox.new","text":"<pre><code>textbox.new(name, default=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>name (<code>string</code>)</li> <li>default (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p><code>new</code> creates a textbox template variable.</p>"},{"location":"API/dashboard/variable.html#obj-textboxgeneraloptions","title":"obj textbox.generalOptions","text":""},{"location":"API/dashboard/variable.html#fn-textboxgeneraloptionswithcurrent","title":"fn textbox.generalOptions.withCurrent","text":"<pre><code>textbox.generalOptions.withCurrent(key, value=\"&lt;same-as-key&gt;\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>key (<code>any</code>)</li> <li>value (<code>any</code>)<ul> <li>default value: <code>\"&lt;same-as-key&gt;\"</code></li> </ul> </li> </ul> <p><code>withCurrent</code> sets the currently selected value of a variable. If key and value are different, both need to be given.</p>"},{"location":"API/dashboard/variable.html#fn-textboxgeneraloptionswithdescription","title":"fn textbox.generalOptions.withDescription","text":"<pre><code>textbox.generalOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Description of variable. It can be defined but <code>null</code>.</p>"},{"location":"API/dashboard/variable.html#fn-textboxgeneraloptionswithlabel","title":"fn textbox.generalOptions.withLabel","text":"<pre><code>textbox.generalOptions.withLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Optional display name</p>"},{"location":"API/dashboard/variable.html#fn-textboxgeneraloptionswithname","title":"fn textbox.generalOptions.withName","text":"<pre><code>textbox.generalOptions.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of variable</p>"},{"location":"API/dashboard/variable.html#obj-textboxgeneraloptionsshowondashboard","title":"obj textbox.generalOptions.showOnDashboard","text":""},{"location":"API/dashboard/variable.html#fn-textboxgeneraloptionsshowondashboardwithlabelandvalue","title":"fn textbox.generalOptions.showOnDashboard.withLabelAndValue","text":"<pre><code>textbox.generalOptions.showOnDashboard.withLabelAndValue()\n</code></pre>"},{"location":"API/dashboard/variable.html#fn-textboxgeneraloptionsshowondashboardwithnothing","title":"fn textbox.generalOptions.showOnDashboard.withNothing","text":"<pre><code>textbox.generalOptions.showOnDashboard.withNothing()\n</code></pre>"},{"location":"API/dashboard/variable.html#fn-textboxgeneraloptionsshowondashboardwithvalueonly","title":"fn textbox.generalOptions.showOnDashboard.withValueOnly","text":"<pre><code>textbox.generalOptions.showOnDashboard.withValueOnly()\n</code></pre>"},{"location":"API/librarypanel/index.html","title":"librarypanel","text":"<p>grafonnet.librarypanel</p>"},{"location":"API/librarypanel/index.html#subpackages","title":"Subpackages","text":"<ul> <li>model.fieldConfig.defaults.thresholds.steps</li> <li>model.fieldConfig.overrides</li> <li>model.links</li> <li>model.transformations</li> </ul>"},{"location":"API/librarypanel/index.html#index","title":"Index","text":"<ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withFolderUid(value)</code></li> <li><code>fn withMeta(value)</code></li> <li><code>fn withMetaMixin(value)</code></li> <li><code>fn withModel(value)</code></li> <li><code>fn withModelMixin(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>fn withSchemaVersion(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUid(value)</code></li> <li><code>fn withVersion(value)</code></li> <li><code>obj meta</code><ul> <li><code>fn withConnectedDashboards(value)</code></li> <li><code>fn withCreated(value)</code></li> <li><code>fn withCreatedBy(value)</code></li> <li><code>fn withCreatedByMixin(value)</code></li> <li><code>fn withFolderName(value)</code></li> <li><code>fn withFolderUid(value)</code></li> <li><code>fn withUpdated(value)</code></li> <li><code>fn withUpdatedBy(value)</code></li> <li><code>fn withUpdatedByMixin(value)</code></li> <li><code>obj createdBy</code><ul> <li><code>fn withAvatarUrl(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withName(value)</code></li> </ul> </li> <li><code>obj updatedBy</code><ul> <li><code>fn withAvatarUrl(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withName(value)</code></li> </ul> </li> </ul> </li> <li><code>obj model</code><ul> <li><code>fn withCacheTimeout(value)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withDescription(value)</code></li> <li><code>fn withFieldConfig(value)</code></li> <li><code>fn withFieldConfigMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withPluginVersion(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> <li><code>fn withType(value)</code></li> <li><code>obj datasource</code><ul> <li><code>fn withType(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj fieldConfig</code><ul> <li><code>fn withDefaults(value)</code></li> <li><code>fn withDefaultsMixin(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>obj defaults</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withColorMixin(value)</code></li> <li><code>fn withCustom(value)</code></li> <li><code>fn withCustomMixin(value)</code></li> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDescription(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withDisplayNameFromDS(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withThresholds(value)</code></li> <li><code>fn withThresholdsMixin(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>fn withWriteable(value=true)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj mappings</code><ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"API/librarypanel/index.html#fields","title":"Fields","text":""},{"location":"API/librarypanel/index.html#fn-withdescription","title":"fn withDescription","text":"<pre><code>withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description</p>"},{"location":"API/librarypanel/index.html#fn-withfolderuid","title":"fn withFolderUid","text":"<pre><code>withFolderUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Folder UID</p>"},{"location":"API/librarypanel/index.html#fn-withmeta","title":"fn withMeta","text":"<pre><code>withMeta(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-withmetamixin","title":"fn withMetaMixin","text":"<pre><code>withMetaMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-withmodel","title":"fn withModel","text":"<pre><code>withModel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO: should be the same panel schema defined in dashboard Typescript: Omit;"},{"location":"API/librarypanel/index.html#fn-withmodelmixin","title":"fn withModelMixin","text":"<pre><code>withModelMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO: should be the same panel schema defined in dashboard Typescript: Omit;"},{"location":"API/librarypanel/index.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel name (also saved in the model)</p>"},{"location":"API/librarypanel/index.html#fn-withschemaversion","title":"fn withSchemaVersion","text":"<pre><code>withSchemaVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Dashboard version when this was saved (zero if unknown)</p>"},{"location":"API/librarypanel/index.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The panel type (from inside the model)</p>"},{"location":"API/librarypanel/index.html#fn-withuid","title":"fn withUid","text":"<pre><code>withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library element UID</p>"},{"location":"API/librarypanel/index.html#fn-withversion","title":"fn withVersion","text":"<pre><code>withVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>panel version, incremented each time the dashboard is updated.</p>"},{"location":"API/librarypanel/index.html#obj-meta","title":"obj meta","text":""},{"location":"API/librarypanel/index.html#fn-metawithconnecteddashboards","title":"fn meta.withConnectedDashboards","text":"<pre><code>meta.withConnectedDashboards(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-metawithcreated","title":"fn meta.withCreated","text":"<pre><code>meta.withCreated(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-metawithcreatedby","title":"fn meta.withCreatedBy","text":"<pre><code>meta.withCreatedBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-metawithcreatedbymixin","title":"fn meta.withCreatedByMixin","text":"<pre><code>meta.withCreatedByMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-metawithfoldername","title":"fn meta.withFolderName","text":"<pre><code>meta.withFolderName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-metawithfolderuid","title":"fn meta.withFolderUid","text":"<pre><code>meta.withFolderUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-metawithupdated","title":"fn meta.withUpdated","text":"<pre><code>meta.withUpdated(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-metawithupdatedby","title":"fn meta.withUpdatedBy","text":"<pre><code>meta.withUpdatedBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-metawithupdatedbymixin","title":"fn meta.withUpdatedByMixin","text":"<pre><code>meta.withUpdatedByMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#obj-metacreatedby","title":"obj meta.createdBy","text":""},{"location":"API/librarypanel/index.html#fn-metacreatedbywithavatarurl","title":"fn meta.createdBy.withAvatarUrl","text":"<pre><code>meta.createdBy.withAvatarUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-metacreatedbywithid","title":"fn meta.createdBy.withId","text":"<pre><code>meta.createdBy.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-metacreatedbywithname","title":"fn meta.createdBy.withName","text":"<pre><code>meta.createdBy.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#obj-metaupdatedby","title":"obj meta.updatedBy","text":""},{"location":"API/librarypanel/index.html#fn-metaupdatedbywithavatarurl","title":"fn meta.updatedBy.withAvatarUrl","text":"<pre><code>meta.updatedBy.withAvatarUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-metaupdatedbywithid","title":"fn meta.updatedBy.withId","text":"<pre><code>meta.updatedBy.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-metaupdatedbywithname","title":"fn meta.updatedBy.withName","text":"<pre><code>meta.updatedBy.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#obj-model","title":"obj model","text":""},{"location":"API/librarypanel/index.html#fn-modelwithcachetimeout","title":"fn model.withCacheTimeout","text":"<pre><code>model.withCacheTimeout(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Sets panel queries cache timeout.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithdatasource","title":"fn model.withDatasource","text":"<pre><code>model.withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/librarypanel/index.html#fn-modelwithdatasourcemixin","title":"fn model.withDatasourceMixin","text":"<pre><code>model.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/librarypanel/index.html#fn-modelwithdescription","title":"fn model.withDescription","text":"<pre><code>model.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithfieldconfig","title":"fn model.withFieldConfig","text":"<pre><code>model.withFieldConfig(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The data model used in Grafana, namely the data frame, is a columnar-oriented table structure that unifies both time series and table query results. Each column within this structure is called a field. A field can represent a single time series or table column. Field options allow you to change how the data is displayed in your visualizations.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithfieldconfigmixin","title":"fn model.withFieldConfigMixin","text":"<pre><code>model.withFieldConfigMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The data model used in Grafana, namely the data frame, is a columnar-oriented table structure that unifies both time series and table query results. Each column within this structure is called a field. A field can represent a single time series or table column. Field options allow you to change how the data is displayed in your visualizations.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithhidetimeoverride","title":"fn model.withHideTimeOverride","text":"<pre><code>model.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/librarypanel/index.html#fn-modelwithinterval","title":"fn model.withInterval","text":"<pre><code>model.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/librarypanel/index.html#fn-modelwithlinks","title":"fn model.withLinks","text":"<pre><code>model.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithlinksmixin","title":"fn model.withLinksMixin","text":"<pre><code>model.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithmaxdatapoints","title":"fn model.withMaxDataPoints","text":"<pre><code>model.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithmaxperrow","title":"fn model.withMaxPerRow","text":"<pre><code>model.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/librarypanel/index.html#fn-modelwithoptions","title":"fn model.withOptions","text":"<pre><code>model.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>It depends on the panel plugin. They are specified by the Options field in panel plugin schemas.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithoptionsmixin","title":"fn model.withOptionsMixin","text":"<pre><code>model.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>It depends on the panel plugin. They are specified by the Options field in panel plugin schemas.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithpluginversion","title":"fn model.withPluginVersion","text":"<pre><code>model.withPluginVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The version of the plugin that is used for this panel. This is used to find the plugin to display the panel and to migrate old panel configs.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithquerycachingttl","title":"fn model.withQueryCachingTTL","text":"<pre><code>model.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/librarypanel/index.html#fn-modelwithrepeat","title":"fn model.withRepeat","text":"<pre><code>model.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithrepeatdirection","title":"fn model.withRepeatDirection","text":"<pre><code>model.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithtargets","title":"fn model.withTargets","text":"<pre><code>model.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithtargetsmixin","title":"fn model.withTargetsMixin","text":"<pre><code>model.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithtimefrom","title":"fn model.withTimeFrom","text":"<pre><code>model.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/librarypanel/index.html#fn-modelwithtimeshift","title":"fn model.withTimeShift","text":"<pre><code>model.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/librarypanel/index.html#fn-modelwithtitle","title":"fn model.withTitle","text":"<pre><code>model.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithtransformations","title":"fn model.withTransformations","text":"<pre><code>model.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithtransformationsmixin","title":"fn model.withTransformationsMixin","text":"<pre><code>model.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithtransparent","title":"fn model.withTransparent","text":"<pre><code>model.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/librarypanel/index.html#fn-modelwithtype","title":"fn model.withType","text":"<pre><code>model.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The panel plugin type id. This is used to find the plugin to display the panel.</p>"},{"location":"API/librarypanel/index.html#obj-modeldatasource","title":"obj model.datasource","text":""},{"location":"API/librarypanel/index.html#fn-modeldatasourcewithtype","title":"fn model.datasource.withType","text":"<pre><code>model.datasource.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The plugin type-id</p>"},{"location":"API/librarypanel/index.html#fn-modeldatasourcewithuid","title":"fn model.datasource.withUid","text":"<pre><code>model.datasource.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specific datasource instance</p>"},{"location":"API/librarypanel/index.html#obj-modelfieldconfig","title":"obj model.fieldConfig","text":""},{"location":"API/librarypanel/index.html#fn-modelfieldconfigwithdefaults","title":"fn model.fieldConfig.withDefaults","text":"<pre><code>model.fieldConfig.withDefaults(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The data model used in Grafana, namely the data frame, is a columnar-oriented table structure that unifies both time series and table query results. Each column within this structure is called a field. A field can represent a single time series or table column. Field options allow you to change how the data is displayed in your visualizations.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigwithdefaultsmixin","title":"fn model.fieldConfig.withDefaultsMixin","text":"<pre><code>model.fieldConfig.withDefaultsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The data model used in Grafana, namely the data frame, is a columnar-oriented table structure that unifies both time series and table query results. Each column within this structure is called a field. A field can represent a single time series or table column. Field options allow you to change how the data is displayed in your visualizations.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigwithoverrides","title":"fn model.fieldConfig.withOverrides","text":"<pre><code>model.fieldConfig.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigwithoverridesmixin","title":"fn model.fieldConfig.withOverridesMixin","text":"<pre><code>model.fieldConfig.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/librarypanel/index.html#obj-modelfieldconfigdefaults","title":"obj model.fieldConfig.defaults","text":""},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithcolor","title":"fn model.fieldConfig.defaults.withColor","text":"<pre><code>model.fieldConfig.defaults.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map a field to a color.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithcolormixin","title":"fn model.fieldConfig.defaults.withColorMixin","text":"<pre><code>model.fieldConfig.defaults.withColorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map a field to a color.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithcustom","title":"fn model.fieldConfig.defaults.withCustom","text":"<pre><code>model.fieldConfig.defaults.withCustom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>custom is specified by the FieldConfig field in panel plugin schemas.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithcustommixin","title":"fn model.fieldConfig.defaults.withCustomMixin","text":"<pre><code>model.fieldConfig.defaults.withCustomMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>custom is specified by the FieldConfig field in panel plugin schemas.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithdecimals","title":"fn model.fieldConfig.defaults.withDecimals","text":"<pre><code>model.fieldConfig.defaults.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithdescription","title":"fn model.fieldConfig.defaults.withDescription","text":"<pre><code>model.fieldConfig.defaults.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Human readable field metadata</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithdisplayname","title":"fn model.fieldConfig.defaults.withDisplayName","text":"<pre><code>model.fieldConfig.defaults.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithdisplaynamefromds","title":"fn model.fieldConfig.defaults.withDisplayNameFromDS","text":"<pre><code>model.fieldConfig.defaults.withDisplayNameFromDS(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>This can be used by data sources that return and explicit naming structure for values and labels When this property is configured, this value is used rather than the default naming strategy.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithfilterable","title":"fn model.fieldConfig.defaults.withFilterable","text":"<pre><code>model.fieldConfig.defaults.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithlinks","title":"fn model.fieldConfig.defaults.withLinks","text":"<pre><code>model.fieldConfig.defaults.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithlinksmixin","title":"fn model.fieldConfig.defaults.withLinksMixin","text":"<pre><code>model.fieldConfig.defaults.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithmappings","title":"fn model.fieldConfig.defaults.withMappings","text":"<pre><code>model.fieldConfig.defaults.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithmappingsmixin","title":"fn model.fieldConfig.defaults.withMappingsMixin","text":"<pre><code>model.fieldConfig.defaults.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithmax","title":"fn model.fieldConfig.defaults.withMax","text":"<pre><code>model.fieldConfig.defaults.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithmin","title":"fn model.fieldConfig.defaults.withMin","text":"<pre><code>model.fieldConfig.defaults.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithnovalue","title":"fn model.fieldConfig.defaults.withNoValue","text":"<pre><code>model.fieldConfig.defaults.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithpath","title":"fn model.fieldConfig.defaults.withPath","text":"<pre><code>model.fieldConfig.defaults.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswiththresholds","title":"fn model.fieldConfig.defaults.withThresholds","text":"<pre><code>model.fieldConfig.defaults.withThresholds(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Thresholds configuration for the panel</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswiththresholdsmixin","title":"fn model.fieldConfig.defaults.withThresholdsMixin","text":"<pre><code>model.fieldConfig.defaults.withThresholdsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Thresholds configuration for the panel</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithunit","title":"fn model.fieldConfig.defaults.withUnit","text":"<pre><code>model.fieldConfig.defaults.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultswithwriteable","title":"fn model.fieldConfig.defaults.withWriteable","text":"<pre><code>model.fieldConfig.defaults.withWriteable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source can write a value to the path. Auth/authz are supported separately</p>"},{"location":"API/librarypanel/index.html#obj-modelfieldconfigdefaultscolor","title":"obj model.fieldConfig.defaults.color","text":""},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultscolorwithfixedcolor","title":"# fn model.fieldConfig.defaults.color.withFixedColor","text":"<pre><code>model.fieldConfig.defaults.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultscolorwithmode","title":"# fn model.fieldConfig.defaults.color.withMode","text":"<pre><code>model.fieldConfig.defaults.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultscolorwithseriesby","title":"# fn model.fieldConfig.defaults.color.withSeriesBy","text":"<pre><code>model.fieldConfig.defaults.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/librarypanel/index.html#obj-modelfieldconfigdefaultsmappings","title":"obj model.fieldConfig.defaults.mappings","text":""},{"location":"API/librarypanel/index.html#obj-modelfieldconfigdefaultsmappingsrangemap","title":"# obj model.fieldConfig.defaults.mappings.RangeMap","text":""},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsrangemapwithoptions","title":"## fn model.fieldConfig.defaults.mappings.RangeMap.withOptions","text":"<pre><code>model.fieldConfig.defaults.mappings.RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsrangemapwithoptionsmixin","title":"## fn model.fieldConfig.defaults.mappings.RangeMap.withOptionsMixin","text":"<pre><code>model.fieldConfig.defaults.mappings.RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsrangemapwithtype","title":"## fn model.fieldConfig.defaults.mappings.RangeMap.withType","text":"<pre><code>model.fieldConfig.defaults.mappings.RangeMap.withType()\n</code></pre>"},{"location":"API/librarypanel/index.html#obj-modelfieldconfigdefaultsmappingsrangemapoptions","title":"## obj model.fieldConfig.defaults.mappings.RangeMap.options","text":""},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsrangemapoptionswithfrom","title":"### fn model.fieldConfig.defaults.mappings.RangeMap.options.withFrom","text":"<pre><code>model.fieldConfig.defaults.mappings.RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsrangemapoptionswithresult","title":"### fn model.fieldConfig.defaults.mappings.RangeMap.options.withResult","text":"<pre><code>model.fieldConfig.defaults.mappings.RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsrangemapoptionswithresultmixin","title":"### fn model.fieldConfig.defaults.mappings.RangeMap.options.withResultMixin","text":"<pre><code>model.fieldConfig.defaults.mappings.RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsrangemapoptionswithto","title":"### fn model.fieldConfig.defaults.mappings.RangeMap.options.withTo","text":"<pre><code>model.fieldConfig.defaults.mappings.RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/librarypanel/index.html#obj-modelfieldconfigdefaultsmappingsrangemapoptionsresult","title":"### obj model.fieldConfig.defaults.mappings.RangeMap.options.result","text":""},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsrangemapoptionsresultwithcolor","title":"#### fn model.fieldConfig.defaults.mappings.RangeMap.options.result.withColor","text":"<pre><code>model.fieldConfig.defaults.mappings.RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsrangemapoptionsresultwithicon","title":"#### fn model.fieldConfig.defaults.mappings.RangeMap.options.result.withIcon","text":"<pre><code>model.fieldConfig.defaults.mappings.RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsrangemapoptionsresultwithindex","title":"#### fn model.fieldConfig.defaults.mappings.RangeMap.options.result.withIndex","text":"<pre><code>model.fieldConfig.defaults.mappings.RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsrangemapoptionsresultwithtext","title":"#### fn model.fieldConfig.defaults.mappings.RangeMap.options.result.withText","text":"<pre><code>model.fieldConfig.defaults.mappings.RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/librarypanel/index.html#obj-modelfieldconfigdefaultsmappingsregexmap","title":"# obj model.fieldConfig.defaults.mappings.RegexMap","text":""},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsregexmapwithoptions","title":"## fn model.fieldConfig.defaults.mappings.RegexMap.withOptions","text":"<pre><code>model.fieldConfig.defaults.mappings.RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsregexmapwithoptionsmixin","title":"## fn model.fieldConfig.defaults.mappings.RegexMap.withOptionsMixin","text":"<pre><code>model.fieldConfig.defaults.mappings.RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsregexmapwithtype","title":"## fn model.fieldConfig.defaults.mappings.RegexMap.withType","text":"<pre><code>model.fieldConfig.defaults.mappings.RegexMap.withType()\n</code></pre>"},{"location":"API/librarypanel/index.html#obj-modelfieldconfigdefaultsmappingsregexmapoptions","title":"## obj model.fieldConfig.defaults.mappings.RegexMap.options","text":""},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsregexmapoptionswithpattern","title":"### fn model.fieldConfig.defaults.mappings.RegexMap.options.withPattern","text":"<pre><code>model.fieldConfig.defaults.mappings.RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsregexmapoptionswithresult","title":"### fn model.fieldConfig.defaults.mappings.RegexMap.options.withResult","text":"<pre><code>model.fieldConfig.defaults.mappings.RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsregexmapoptionswithresultmixin","title":"### fn model.fieldConfig.defaults.mappings.RegexMap.options.withResultMixin","text":"<pre><code>model.fieldConfig.defaults.mappings.RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/librarypanel/index.html#obj-modelfieldconfigdefaultsmappingsregexmapoptionsresult","title":"### obj model.fieldConfig.defaults.mappings.RegexMap.options.result","text":""},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsregexmapoptionsresultwithcolor","title":"#### fn model.fieldConfig.defaults.mappings.RegexMap.options.result.withColor","text":"<pre><code>model.fieldConfig.defaults.mappings.RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsregexmapoptionsresultwithicon","title":"#### fn model.fieldConfig.defaults.mappings.RegexMap.options.result.withIcon","text":"<pre><code>model.fieldConfig.defaults.mappings.RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsregexmapoptionsresultwithindex","title":"#### fn model.fieldConfig.defaults.mappings.RegexMap.options.result.withIndex","text":"<pre><code>model.fieldConfig.defaults.mappings.RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsregexmapoptionsresultwithtext","title":"#### fn model.fieldConfig.defaults.mappings.RegexMap.options.result.withText","text":"<pre><code>model.fieldConfig.defaults.mappings.RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/librarypanel/index.html#obj-modelfieldconfigdefaultsmappingsspecialvaluemap","title":"# obj model.fieldConfig.defaults.mappings.SpecialValueMap","text":""},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsspecialvaluemapwithoptions","title":"## fn model.fieldConfig.defaults.mappings.SpecialValueMap.withOptions","text":"<pre><code>model.fieldConfig.defaults.mappings.SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsspecialvaluemapwithoptionsmixin","title":"## fn model.fieldConfig.defaults.mappings.SpecialValueMap.withOptionsMixin","text":"<pre><code>model.fieldConfig.defaults.mappings.SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsspecialvaluemapwithtype","title":"## fn model.fieldConfig.defaults.mappings.SpecialValueMap.withType","text":"<pre><code>model.fieldConfig.defaults.mappings.SpecialValueMap.withType()\n</code></pre>"},{"location":"API/librarypanel/index.html#obj-modelfieldconfigdefaultsmappingsspecialvaluemapoptions","title":"## obj model.fieldConfig.defaults.mappings.SpecialValueMap.options","text":""},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsspecialvaluemapoptionswithmatch","title":"### fn model.fieldConfig.defaults.mappings.SpecialValueMap.options.withMatch","text":"<pre><code>model.fieldConfig.defaults.mappings.SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsspecialvaluemapoptionswithresult","title":"### fn model.fieldConfig.defaults.mappings.SpecialValueMap.options.withResult","text":"<pre><code>model.fieldConfig.defaults.mappings.SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsspecialvaluemapoptionswithresultmixin","title":"### fn model.fieldConfig.defaults.mappings.SpecialValueMap.options.withResultMixin","text":"<pre><code>model.fieldConfig.defaults.mappings.SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/librarypanel/index.html#obj-modelfieldconfigdefaultsmappingsspecialvaluemapoptionsresult","title":"### obj model.fieldConfig.defaults.mappings.SpecialValueMap.options.result","text":""},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsspecialvaluemapoptionsresultwithcolor","title":"#### fn model.fieldConfig.defaults.mappings.SpecialValueMap.options.result.withColor","text":"<pre><code>model.fieldConfig.defaults.mappings.SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsspecialvaluemapoptionsresultwithicon","title":"#### fn model.fieldConfig.defaults.mappings.SpecialValueMap.options.result.withIcon","text":"<pre><code>model.fieldConfig.defaults.mappings.SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsspecialvaluemapoptionsresultwithindex","title":"#### fn model.fieldConfig.defaults.mappings.SpecialValueMap.options.result.withIndex","text":"<pre><code>model.fieldConfig.defaults.mappings.SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsspecialvaluemapoptionsresultwithtext","title":"#### fn model.fieldConfig.defaults.mappings.SpecialValueMap.options.result.withText","text":"<pre><code>model.fieldConfig.defaults.mappings.SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/librarypanel/index.html#obj-modelfieldconfigdefaultsmappingsvaluemap","title":"# obj model.fieldConfig.defaults.mappings.ValueMap","text":""},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsvaluemapwithoptions","title":"## fn model.fieldConfig.defaults.mappings.ValueMap.withOptions","text":"<pre><code>model.fieldConfig.defaults.mappings.ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsvaluemapwithoptionsmixin","title":"## fn model.fieldConfig.defaults.mappings.ValueMap.withOptionsMixin","text":"<pre><code>model.fieldConfig.defaults.mappings.ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsmappingsvaluemapwithtype","title":"## fn model.fieldConfig.defaults.mappings.ValueMap.withType","text":"<pre><code>model.fieldConfig.defaults.mappings.ValueMap.withType()\n</code></pre>"},{"location":"API/librarypanel/index.html#obj-modelfieldconfigdefaultsthresholds","title":"obj model.fieldConfig.defaults.thresholds","text":""},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsthresholdswithmode","title":"# fn model.fieldConfig.defaults.thresholds.withMode","text":"<pre><code>model.fieldConfig.defaults.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsthresholdswithsteps","title":"# fn model.fieldConfig.defaults.thresholds.withSteps","text":"<pre><code>model.fieldConfig.defaults.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/librarypanel/index.html#fn-modelfieldconfigdefaultsthresholdswithstepsmixin","title":"# fn model.fieldConfig.defaults.thresholds.withStepsMixin","text":"<pre><code>model.fieldConfig.defaults.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/librarypanel/model/links.html","title":"links","text":""},{"location":"API/librarypanel/model/links.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/librarypanel/model/links.html#fields","title":"Fields","text":""},{"location":"API/librarypanel/model/links.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/librarypanel/model/links.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/librarypanel/model/links.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/librarypanel/model/links.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/librarypanel/model/links.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/librarypanel/model/links.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/librarypanel/model/links.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/librarypanel/model/links.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/librarypanel/model/links.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/librarypanel/model/links.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/librarypanel/model/links.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/librarypanel/model/transformations.html","title":"transformations","text":""},{"location":"API/librarypanel/model/transformations.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/librarypanel/model/transformations.html#fields","title":"Fields","text":""},{"location":"API/librarypanel/model/transformations.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/librarypanel/model/transformations.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/librarypanel/model/transformations.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/librarypanel/model/transformations.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/librarypanel/model/transformations.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/librarypanel/model/transformations.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/librarypanel/model/transformations.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/librarypanel/model/transformations.html#obj-filter","title":"obj filter","text":""},{"location":"API/librarypanel/model/transformations.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/librarypanel/model/transformations.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/librarypanel/model/transformations.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/librarypanel/model/fieldConfig/defaults/thresholds/steps.html","title":"steps","text":""},{"location":"API/librarypanel/model/fieldConfig/defaults/thresholds/steps.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/librarypanel/model/fieldConfig/defaults/thresholds/steps.html#fields","title":"Fields","text":""},{"location":"API/librarypanel/model/fieldConfig/defaults/thresholds/steps.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/librarypanel/model/fieldConfig/defaults/thresholds/steps.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/librarypanel/model/fieldConfig/overrides/index.html","title":"overrides","text":""},{"location":"API/librarypanel/model/fieldConfig/overrides/index.html#subpackages","title":"Subpackages","text":"<ul> <li>properties</li> </ul>"},{"location":"API/librarypanel/model/fieldConfig/overrides/index.html#index","title":"Index","text":"<ul> <li><code>fn withMatcher(value)</code></li> <li><code>fn withMatcherMixin(value)</code></li> <li><code>fn withProperties(value)</code></li> <li><code>fn withPropertiesMixin(value)</code></li> <li><code>obj matcher</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/librarypanel/model/fieldConfig/overrides/index.html#fields","title":"Fields","text":""},{"location":"API/librarypanel/model/fieldConfig/overrides/index.html#fn-withmatcher","title":"fn withMatcher","text":"<pre><code>withMatcher(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/librarypanel/model/fieldConfig/overrides/index.html#fn-withmatchermixin","title":"fn withMatcherMixin","text":"<pre><code>withMatcherMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/librarypanel/model/fieldConfig/overrides/index.html#fn-withproperties","title":"fn withProperties","text":"<pre><code>withProperties(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/librarypanel/model/fieldConfig/overrides/index.html#fn-withpropertiesmixin","title":"fn withPropertiesMixin","text":"<pre><code>withPropertiesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/librarypanel/model/fieldConfig/overrides/index.html#obj-matcher","title":"obj matcher","text":""},{"location":"API/librarypanel/model/fieldConfig/overrides/index.html#fn-matcherwithid","title":"fn matcher.withId","text":"<pre><code>matcher.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/librarypanel/model/fieldConfig/overrides/index.html#fn-matcherwithoptions","title":"fn matcher.withOptions","text":"<pre><code>matcher.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/librarypanel/model/fieldConfig/overrides/index.html#fn-matcherwithoptionsmixin","title":"fn matcher.withOptionsMixin","text":"<pre><code>matcher.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/librarypanel/model/fieldConfig/overrides/properties.html","title":"properties","text":""},{"location":"API/librarypanel/model/fieldConfig/overrides/properties.html#index","title":"Index","text":"<ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withValue(value)</code></li> <li><code>fn withValueMixin(value)</code></li> </ul>"},{"location":"API/librarypanel/model/fieldConfig/overrides/properties.html#fields","title":"Fields","text":""},{"location":"API/librarypanel/model/fieldConfig/overrides/properties.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul>"},{"location":"API/librarypanel/model/fieldConfig/overrides/properties.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/librarypanel/model/fieldConfig/overrides/properties.html#fn-withvaluemixin","title":"fn withValueMixin","text":"<pre><code>withValueMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/index.html","title":"panel","text":"<p>grafonnet.panel</p>"},{"location":"API/panel/index.html#subpackages","title":"Subpackages","text":"<ul> <li>alertList</li> <li>annotationsList</li> <li>barChart</li> <li>barGauge</li> <li>candlestick</li> <li>canvas</li> <li>dashboardList</li> <li>datagrid</li> <li>debug</li> <li>gauge</li> <li>geomap</li> <li>heatmap</li> <li>histogram</li> <li>logs</li> <li>news</li> <li>nodeGraph</li> <li>pieChart</li> <li>row</li> <li>stat</li> <li>stateTimeline</li> <li>statusHistory</li> <li>table</li> <li>text</li> <li>timeSeries</li> <li>trend</li> <li>xyChart</li> </ul>"},{"location":"API/panel/row.html","title":"row","text":"<p>grafonnet.panel.row</p>"},{"location":"API/panel/row.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>fn withCollapsed(value=true)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withGridPos(y)</code></li> <li><code>fn withGridPosMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withPanels(value)</code></li> <li><code>fn withPanelsMixin(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj datasource</code><ul> <li><code>fn withType(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/row.html#fields","title":"Fields","text":""},{"location":"API/panel/row.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new row panel with a title.</p>"},{"location":"API/panel/row.html#fn-withcollapsed","title":"fn withCollapsed","text":"<pre><code>withCollapsed(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether this row should be collapsed or not.</p>"},{"location":"API/panel/row.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/row.html#fn-withdatasourcemixin","title":"fn withDatasourceMixin","text":"<pre><code>withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/row.html#fn-withgridpos","title":"fn withGridPos","text":"<pre><code>withGridPos(y)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>y (<code>number</code>)</li> </ul> <p><code>withGridPos</code> sets the Y-axis on a row panel. x, width and height are fixed values.</p>"},{"location":"API/panel/row.html#fn-withgridposmixin","title":"fn withGridPosMixin","text":"<pre><code>withGridPosMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Position and dimensions of a panel in the grid</p>"},{"location":"API/panel/row.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.</p>"},{"location":"API/panel/row.html#fn-withpanels","title":"fn withPanels","text":"<pre><code>withPanels(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/row.html#fn-withpanelsmixin","title":"fn withPanelsMixin","text":"<pre><code>withPanelsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/row.html#fn-withrepeat","title":"fn withRepeat","text":"<pre><code>withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/row.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Row title</p>"},{"location":"API/panel/row.html#fn-withtype","title":"fn withType","text":"<pre><code>withType()\n</code></pre>"},{"location":"API/panel/row.html#obj-datasource","title":"obj datasource","text":""},{"location":"API/panel/row.html#fn-datasourcewithtype","title":"fn datasource.withType","text":"<pre><code>datasource.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The plugin type-id</p>"},{"location":"API/panel/row.html#fn-datasourcewithuid","title":"fn datasource.withUid","text":"<pre><code>datasource.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specific datasource instance</p>"},{"location":"API/panel/alertList/index.html","title":"alertList","text":"<p>grafonnet.panel.alertList</p>"},{"location":"API/panel/alertList/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/alertList/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withAlertListOptions(value)</code></li> <li><code>fn withAlertListOptionsMixin(value)</code></li> <li><code>fn withUnifiedAlertListOptions(value)</code></li> <li><code>fn withUnifiedAlertListOptionsMixin(value)</code></li> <li><code>obj AlertListOptions</code><ul> <li><code>fn withAlertName(value)</code></li> <li><code>fn withDashboardAlerts(value=true)</code></li> <li><code>fn withDashboardTitle(value)</code></li> <li><code>fn withFolderId(value)</code></li> <li><code>fn withMaxItems(value)</code></li> <li><code>fn withShowOptions(value)</code></li> <li><code>fn withSortOrder(value)</code></li> <li><code>fn withStateFilter(value)</code></li> <li><code>fn withStateFilterMixin(value)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>obj stateFilter</code><ul> <li><code>fn withAlerting(value=true)</code></li> <li><code>fn withExecutionError(value=true)</code></li> <li><code>fn withNoData(value=true)</code></li> <li><code>fn withOk(value=true)</code></li> <li><code>fn withPaused(value=true)</code></li> <li><code>fn withPending(value=true)</code></li> </ul> </li> </ul> </li> <li><code>obj UnifiedAlertListOptions</code><ul> <li><code>fn withAlertInstanceLabelFilter(value)</code></li> <li><code>fn withAlertName(value)</code></li> <li><code>fn withDashboardAlerts(value=true)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withFolder(value)</code></li> <li><code>fn withFolderMixin(value)</code></li> <li><code>fn withGroupBy(value)</code></li> <li><code>fn withGroupByMixin(value)</code></li> <li><code>fn withGroupMode(value)</code></li> <li><code>fn withMaxItems(value)</code></li> <li><code>fn withShowInstances(value=true)</code></li> <li><code>fn withSortOrder(value)</code></li> <li><code>fn withStateFilter(value)</code></li> <li><code>fn withStateFilterMixin(value)</code></li> <li><code>fn withViewMode(value)</code></li> <li><code>obj folder</code><ul> <li><code>fn withId(value)</code></li> <li><code>fn withTitle(value)</code></li> </ul> </li> <li><code>obj stateFilter</code><ul> <li><code>fn withError(value=true)</code></li> <li><code>fn withFiring(value=true)</code></li> <li><code>fn withInactive(value=true)</code></li> <li><code>fn withNoData(value=true)</code></li> <li><code>fn withNormal(value=true)</code></li> <li><code>fn withPending(value=true)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fields","title":"Fields","text":""},{"location":"API/panel/alertList/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new alertlist panel with a title.</p>"},{"location":"API/panel/alertList/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/alertList/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/alertList/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/alertList/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/alertList/index.html#fn-optionswithalertlistoptions","title":"fn options.withAlertListOptions","text":"<pre><code>options.withAlertListOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionswithalertlistoptionsmixin","title":"fn options.withAlertListOptionsMixin","text":"<pre><code>options.withAlertListOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionswithunifiedalertlistoptions","title":"fn options.withUnifiedAlertListOptions","text":"<pre><code>options.withUnifiedAlertListOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionswithunifiedalertlistoptionsmixin","title":"fn options.withUnifiedAlertListOptionsMixin","text":"<pre><code>options.withUnifiedAlertListOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#obj-optionsalertlistoptions","title":"obj options.AlertListOptions","text":""},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionswithalertname","title":"fn options.AlertListOptions.withAlertName","text":"<pre><code>options.AlertListOptions.withAlertName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionswithdashboardalerts","title":"fn options.AlertListOptions.withDashboardAlerts","text":"<pre><code>options.AlertListOptions.withDashboardAlerts(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionswithdashboardtitle","title":"fn options.AlertListOptions.withDashboardTitle","text":"<pre><code>options.AlertListOptions.withDashboardTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionswithfolderid","title":"fn options.AlertListOptions.withFolderId","text":"<pre><code>options.AlertListOptions.withFolderId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionswithmaxitems","title":"fn options.AlertListOptions.withMaxItems","text":"<pre><code>options.AlertListOptions.withMaxItems(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionswithshowoptions","title":"fn options.AlertListOptions.withShowOptions","text":"<pre><code>options.AlertListOptions.withShowOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"current\"</code>, <code>\"changes\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionswithsortorder","title":"fn options.AlertListOptions.withSortOrder","text":"<pre><code>options.AlertListOptions.withSortOrder(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)<ul> <li>valid values: <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionswithstatefilter","title":"fn options.AlertListOptions.withStateFilter","text":"<pre><code>options.AlertListOptions.withStateFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionswithstatefiltermixin","title":"fn options.AlertListOptions.withStateFilterMixin","text":"<pre><code>options.AlertListOptions.withStateFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionswithtags","title":"fn options.AlertListOptions.withTags","text":"<pre><code>options.AlertListOptions.withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionswithtagsmixin","title":"fn options.AlertListOptions.withTagsMixin","text":"<pre><code>options.AlertListOptions.withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#obj-optionsalertlistoptionsstatefilter","title":"obj options.AlertListOptions.stateFilter","text":""},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionsstatefilterwithalerting","title":"fn options.AlertListOptions.stateFilter.withAlerting","text":"<pre><code>options.AlertListOptions.stateFilter.withAlerting(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionsstatefilterwithexecutionerror","title":"fn options.AlertListOptions.stateFilter.withExecutionError","text":"<pre><code>options.AlertListOptions.stateFilter.withExecutionError(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionsstatefilterwithnodata","title":"fn options.AlertListOptions.stateFilter.withNoData","text":"<pre><code>options.AlertListOptions.stateFilter.withNoData(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionsstatefilterwithok","title":"fn options.AlertListOptions.stateFilter.withOk","text":"<pre><code>options.AlertListOptions.stateFilter.withOk(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionsstatefilterwithpaused","title":"fn options.AlertListOptions.stateFilter.withPaused","text":"<pre><code>options.AlertListOptions.stateFilter.withPaused(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsalertlistoptionsstatefilterwithpending","title":"fn options.AlertListOptions.stateFilter.withPending","text":"<pre><code>options.AlertListOptions.stateFilter.withPending(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#obj-optionsunifiedalertlistoptions","title":"obj options.UnifiedAlertListOptions","text":""},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithalertinstancelabelfilter","title":"fn options.UnifiedAlertListOptions.withAlertInstanceLabelFilter","text":"<pre><code>options.UnifiedAlertListOptions.withAlertInstanceLabelFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithalertname","title":"fn options.UnifiedAlertListOptions.withAlertName","text":"<pre><code>options.UnifiedAlertListOptions.withAlertName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithdashboardalerts","title":"fn options.UnifiedAlertListOptions.withDashboardAlerts","text":"<pre><code>options.UnifiedAlertListOptions.withDashboardAlerts(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithdatasource","title":"fn options.UnifiedAlertListOptions.withDatasource","text":"<pre><code>options.UnifiedAlertListOptions.withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithfolder","title":"fn options.UnifiedAlertListOptions.withFolder","text":"<pre><code>options.UnifiedAlertListOptions.withFolder(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithfoldermixin","title":"fn options.UnifiedAlertListOptions.withFolderMixin","text":"<pre><code>options.UnifiedAlertListOptions.withFolderMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithgroupby","title":"fn options.UnifiedAlertListOptions.withGroupBy","text":"<pre><code>options.UnifiedAlertListOptions.withGroupBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithgroupbymixin","title":"fn options.UnifiedAlertListOptions.withGroupByMixin","text":"<pre><code>options.UnifiedAlertListOptions.withGroupByMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithgroupmode","title":"fn options.UnifiedAlertListOptions.withGroupMode","text":"<pre><code>options.UnifiedAlertListOptions.withGroupMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"default\"</code>, <code>\"custom\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithmaxitems","title":"fn options.UnifiedAlertListOptions.withMaxItems","text":"<pre><code>options.UnifiedAlertListOptions.withMaxItems(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithshowinstances","title":"fn options.UnifiedAlertListOptions.withShowInstances","text":"<pre><code>options.UnifiedAlertListOptions.withShowInstances(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithsortorder","title":"fn options.UnifiedAlertListOptions.withSortOrder","text":"<pre><code>options.UnifiedAlertListOptions.withSortOrder(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)<ul> <li>valid values: <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithstatefilter","title":"fn options.UnifiedAlertListOptions.withStateFilter","text":"<pre><code>options.UnifiedAlertListOptions.withStateFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithstatefiltermixin","title":"fn options.UnifiedAlertListOptions.withStateFilterMixin","text":"<pre><code>options.UnifiedAlertListOptions.withStateFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionswithviewmode","title":"fn options.UnifiedAlertListOptions.withViewMode","text":"<pre><code>options.UnifiedAlertListOptions.withViewMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"list\"</code>, <code>\"stat\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#obj-optionsunifiedalertlistoptionsfolder","title":"obj options.UnifiedAlertListOptions.folder","text":""},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionsfolderwithid","title":"fn options.UnifiedAlertListOptions.folder.withId","text":"<pre><code>options.UnifiedAlertListOptions.folder.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionsfolderwithtitle","title":"fn options.UnifiedAlertListOptions.folder.withTitle","text":"<pre><code>options.UnifiedAlertListOptions.folder.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/alertList/index.html#obj-optionsunifiedalertlistoptionsstatefilter","title":"obj options.UnifiedAlertListOptions.stateFilter","text":""},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionsstatefilterwitherror","title":"fn options.UnifiedAlertListOptions.stateFilter.withError","text":"<pre><code>options.UnifiedAlertListOptions.stateFilter.withError(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionsstatefilterwithfiring","title":"fn options.UnifiedAlertListOptions.stateFilter.withFiring","text":"<pre><code>options.UnifiedAlertListOptions.stateFilter.withFiring(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionsstatefilterwithinactive","title":"fn options.UnifiedAlertListOptions.stateFilter.withInactive","text":"<pre><code>options.UnifiedAlertListOptions.stateFilter.withInactive(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionsstatefilterwithnodata","title":"fn options.UnifiedAlertListOptions.stateFilter.withNoData","text":"<pre><code>options.UnifiedAlertListOptions.stateFilter.withNoData(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionsstatefilterwithnormal","title":"fn options.UnifiedAlertListOptions.stateFilter.withNormal","text":"<pre><code>options.UnifiedAlertListOptions.stateFilter.withNormal(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#fn-optionsunifiedalertlistoptionsstatefilterwithpending","title":"fn options.UnifiedAlertListOptions.stateFilter.withPending","text":"<pre><code>options.UnifiedAlertListOptions.stateFilter.withPending(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/alertList/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/alertList/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/alertList/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/alertList/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/alertList/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/alertList/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/alertList/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/alertList/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/alertList/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/alertList/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/alertList/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/alertList/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/alertList/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/alertList/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/alertList/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/alertList/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/alertList/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/alertList/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/alertList/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/alertList/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/alertList/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/alertList/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/alertList/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/alertList/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/alertList/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/alertList/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/alertList/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/alertList/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/alertList/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/alertList/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/alertList/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/alertList/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/alertList/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/alertList/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/alertList/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/alertList/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/alertList/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/alertList/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/alertList/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/alertList/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/alertList/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/alertList/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/alertList/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/alertList/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/alertList/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/alertList/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/alertList/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/alertList/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/alertList/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/alertList/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/alertList/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/alertList/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/alertList/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/alertList/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/alertList/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/alertList/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/alertList/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/alertList/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/alertList/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/alertList/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/alertList/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/alertList/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/alertList/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/alertList/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/alertList/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/alertList/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/alertList/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/alertList/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/alertList/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/alertList/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/alertList/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/alertList/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/alertList/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/alertList/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/alertList/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/alertList/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/alertList/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/alertList/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/alertList/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/alertList/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/alertList/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/alertList/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/alertList/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/alertList/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/alertList/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/alertList/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/alertList/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/alertList/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/alertList/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/alertList/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/alertList/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/annotationsList/index.html","title":"annotationsList","text":"<p>grafonnet.panel.annotationsList</p>"},{"location":"API/panel/annotationsList/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/annotationsList/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withLimit(value=10)</code></li> <li><code>fn withNavigateAfter(value=\"10m\")</code></li> <li><code>fn withNavigateBefore(value=\"10m\")</code></li> <li><code>fn withNavigateToPanel(value=true)</code></li> <li><code>fn withOnlyFromThisDashboard(value=true)</code></li> <li><code>fn withOnlyInTimeRange(value=true)</code></li> <li><code>fn withShowTags(value=true)</code></li> <li><code>fn withShowTime(value=true)</code></li> <li><code>fn withShowUser(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/annotationsList/index.html#fields","title":"Fields","text":""},{"location":"API/panel/annotationsList/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new annotationsList panel with a title.</p>"},{"location":"API/panel/annotationsList/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/annotationsList/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/annotationsList/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/annotationsList/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/annotationsList/index.html#fn-optionswithlimit","title":"fn options.withLimit","text":"<pre><code>options.withLimit(value=10)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>10</code></li> </ul> </li> </ul>"},{"location":"API/panel/annotationsList/index.html#fn-optionswithnavigateafter","title":"fn options.withNavigateAfter","text":"<pre><code>options.withNavigateAfter(value=\"10m\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"10m\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/annotationsList/index.html#fn-optionswithnavigatebefore","title":"fn options.withNavigateBefore","text":"<pre><code>options.withNavigateBefore(value=\"10m\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"10m\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/annotationsList/index.html#fn-optionswithnavigatetopanel","title":"fn options.withNavigateToPanel","text":"<pre><code>options.withNavigateToPanel(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/annotationsList/index.html#fn-optionswithonlyfromthisdashboard","title":"fn options.withOnlyFromThisDashboard","text":"<pre><code>options.withOnlyFromThisDashboard(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/annotationsList/index.html#fn-optionswithonlyintimerange","title":"fn options.withOnlyInTimeRange","text":"<pre><code>options.withOnlyInTimeRange(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/annotationsList/index.html#fn-optionswithshowtags","title":"fn options.withShowTags","text":"<pre><code>options.withShowTags(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/annotationsList/index.html#fn-optionswithshowtime","title":"fn options.withShowTime","text":"<pre><code>options.withShowTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/annotationsList/index.html#fn-optionswithshowuser","title":"fn options.withShowUser","text":"<pre><code>options.withShowUser(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/annotationsList/index.html#fn-optionswithtags","title":"fn options.withTags","text":"<pre><code>options.withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/annotationsList/index.html#fn-optionswithtagsmixin","title":"fn options.withTagsMixin","text":"<pre><code>options.withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/annotationsList/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/annotationsList/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/annotationsList/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/annotationsList/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/annotationsList/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/annotationsList/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/annotationsList/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/annotationsList/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/annotationsList/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/annotationsList/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/annotationsList/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/annotationsList/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/annotationsList/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/annotationsList/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/annotationsList/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/annotationsList/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/annotationsList/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/annotationsList/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/annotationsList/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/annotationsList/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/annotationsList/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/annotationsList/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/annotationsList/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/annotationsList/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/annotationsList/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/annotationsList/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/annotationsList/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/annotationsList/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/annotationsList/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/annotationsList/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/annotationsList/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/annotationsList/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/annotationsList/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/annotationsList/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/annotationsList/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/annotationsList/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/annotationsList/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/annotationsList/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/annotationsList/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/annotationsList/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/annotationsList/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/annotationsList/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/annotationsList/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/annotationsList/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/annotationsList/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/annotationsList/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/annotationsList/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/annotationsList/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/annotationsList/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/annotationsList/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/annotationsList/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/annotationsList/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/annotationsList/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/annotationsList/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/annotationsList/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/annotationsList/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/annotationsList/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/annotationsList/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/annotationsList/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/annotationsList/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/annotationsList/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/annotationsList/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/annotationsList/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/annotationsList/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/annotationsList/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/annotationsList/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/annotationsList/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/annotationsList/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/annotationsList/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/annotationsList/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/annotationsList/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/annotationsList/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/annotationsList/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/annotationsList/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/annotationsList/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/barChart/index.html","title":"barChart","text":"<p>grafonnet.panel.barChart</p>"},{"location":"API/panel/barChart/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/barChart/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj fieldConfig</code><ul> <li><code>obj defaults</code><ul> <li><code>obj custom</code><ul> <li><code>fn withAxisBorderShow(value=true)</code></li> <li><code>fn withAxisCenteredZero(value=true)</code></li> <li><code>fn withAxisColorMode(value)</code></li> <li><code>fn withAxisGridShow(value=true)</code></li> <li><code>fn withAxisLabel(value)</code></li> <li><code>fn withAxisPlacement(value)</code></li> <li><code>fn withAxisSoftMax(value)</code></li> <li><code>fn withAxisSoftMin(value)</code></li> <li><code>fn withAxisWidth(value)</code></li> <li><code>fn withFillOpacity(value=80)</code></li> <li><code>fn withGradientMode(value)</code></li> <li><code>fn withHideFrom(value)</code></li> <li><code>fn withHideFromMixin(value)</code></li> <li><code>fn withLineWidth(value=1)</code></li> <li><code>fn withScaleDistribution(value)</code></li> <li><code>fn withScaleDistributionMixin(value)</code></li> <li><code>fn withThresholdsStyle(value)</code></li> <li><code>fn withThresholdsStyleMixin(value)</code></li> <li><code>obj hideFrom</code><ul> <li><code>fn withLegend(value=true)</code></li> <li><code>fn withTooltip(value=true)</code></li> <li><code>fn withViz(value=true)</code></li> </ul> </li> <li><code>obj scaleDistribution</code><ul> <li><code>fn withLinearThreshold(value)</code></li> <li><code>fn withLog(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> <li><code>obj thresholdsStyle</code><ul> <li><code>fn withMode(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withBarRadius(value=0)</code></li> <li><code>fn withBarWidth(value=0.97)</code></li> <li><code>fn withColorByField(value)</code></li> <li><code>fn withFullHighlight(value=true)</code></li> <li><code>fn withGroupWidth(value=0.7)</code></li> <li><code>fn withLegend(value)</code></li> <li><code>fn withLegendMixin(value)</code></li> <li><code>fn withOrientation(value)</code></li> <li><code>fn withShowValue(value)</code></li> <li><code>fn withStacking(value)</code></li> <li><code>fn withText(value)</code></li> <li><code>fn withTextMixin(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withTooltipMixin(value)</code></li> <li><code>fn withXField(value)</code></li> <li><code>fn withXTickLabelMaxLength(value)</code></li> <li><code>fn withXTickLabelRotation(value=0)</code></li> <li><code>fn withXTickLabelSpacing(value=0)</code></li> <li><code>obj legend</code><ul> <li><code>fn withAsTable(value=true)</code></li> <li><code>fn withCalcs(value=[])</code></li> <li><code>fn withCalcsMixin(value=[])</code></li> <li><code>fn withDisplayMode(value)</code></li> <li><code>fn withIsVisible(value=true)</code></li> <li><code>fn withPlacement(value)</code></li> <li><code>fn withShowLegend(value=true)</code></li> <li><code>fn withSortBy(value)</code></li> <li><code>fn withSortDesc(value=true)</code></li> <li><code>fn withWidth(value)</code></li> </ul> </li> <li><code>obj text</code><ul> <li><code>fn withTitleSize(value)</code></li> <li><code>fn withValueSize(value)</code></li> </ul> </li> <li><code>obj tooltip</code><ul> <li><code>fn withMaxHeight(value)</code></li> <li><code>fn withMaxWidth(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSort(value)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/barChart/index.html#fields","title":"Fields","text":""},{"location":"API/panel/barChart/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new barChart panel with a title.</p>"},{"location":"API/panel/barChart/index.html#obj-fieldconfig","title":"obj fieldConfig","text":""},{"location":"API/panel/barChart/index.html#obj-fieldconfigdefaults","title":"obj fieldConfig.defaults","text":""},{"location":"API/panel/barChart/index.html#obj-fieldconfigdefaultscustom","title":"obj fieldConfig.defaults.custom","text":""},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithaxisbordershow","title":"fn fieldConfig.defaults.custom.withAxisBorderShow","text":"<pre><code>fieldConfig.defaults.custom.withAxisBorderShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithaxiscenteredzero","title":"fn fieldConfig.defaults.custom.withAxisCenteredZero","text":"<pre><code>fieldConfig.defaults.custom.withAxisCenteredZero(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithaxiscolormode","title":"fn fieldConfig.defaults.custom.withAxisColorMode","text":"<pre><code>fieldConfig.defaults.custom.withAxisColorMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"text\"</code>, <code>\"series\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithaxisgridshow","title":"fn fieldConfig.defaults.custom.withAxisGridShow","text":"<pre><code>fieldConfig.defaults.custom.withAxisGridShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithaxislabel","title":"fn fieldConfig.defaults.custom.withAxisLabel","text":"<pre><code>fieldConfig.defaults.custom.withAxisLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithaxisplacement","title":"fn fieldConfig.defaults.custom.withAxisPlacement","text":"<pre><code>fieldConfig.defaults.custom.withAxisPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"top\"</code>, <code>\"right\"</code>, <code>\"bottom\"</code>, <code>\"left\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithaxissoftmax","title":"fn fieldConfig.defaults.custom.withAxisSoftMax","text":"<pre><code>fieldConfig.defaults.custom.withAxisSoftMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithaxissoftmin","title":"fn fieldConfig.defaults.custom.withAxisSoftMin","text":"<pre><code>fieldConfig.defaults.custom.withAxisSoftMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithaxiswidth","title":"fn fieldConfig.defaults.custom.withAxisWidth","text":"<pre><code>fieldConfig.defaults.custom.withAxisWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithfillopacity","title":"fn fieldConfig.defaults.custom.withFillOpacity","text":"<pre><code>fieldConfig.defaults.custom.withFillOpacity(value=80)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>80</code></li> </ul> </li> </ul> <p>Controls the fill opacity of the bars.</p>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithgradientmode","title":"fn fieldConfig.defaults.custom.withGradientMode","text":"<pre><code>fieldConfig.defaults.custom.withGradientMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"opacity\"</code>, <code>\"hue\"</code>, <code>\"scheme\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithhidefrom","title":"fn fieldConfig.defaults.custom.withHideFrom","text":"<pre><code>fieldConfig.defaults.custom.withHideFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithhidefrommixin","title":"fn fieldConfig.defaults.custom.withHideFromMixin","text":"<pre><code>fieldConfig.defaults.custom.withHideFromMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithlinewidth","title":"fn fieldConfig.defaults.custom.withLineWidth","text":"<pre><code>fieldConfig.defaults.custom.withLineWidth(value=1)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>1</code></li> </ul> </li> </ul> <p>Controls line width of the bars.</p>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithscaledistribution","title":"fn fieldConfig.defaults.custom.withScaleDistribution","text":"<pre><code>fieldConfig.defaults.custom.withScaleDistribution(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwithscaledistributionmixin","title":"fn fieldConfig.defaults.custom.withScaleDistributionMixin","text":"<pre><code>fieldConfig.defaults.custom.withScaleDistributionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwiththresholdsstyle","title":"fn fieldConfig.defaults.custom.withThresholdsStyle","text":"<pre><code>fieldConfig.defaults.custom.withThresholdsStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomwiththresholdsstylemixin","title":"fn fieldConfig.defaults.custom.withThresholdsStyleMixin","text":"<pre><code>fieldConfig.defaults.custom.withThresholdsStyleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#obj-fieldconfigdefaultscustomhidefrom","title":"obj fieldConfig.defaults.custom.hideFrom","text":""},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomhidefromwithlegend","title":"# fn fieldConfig.defaults.custom.hideFrom.withLegend","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomhidefromwithtooltip","title":"# fn fieldConfig.defaults.custom.hideFrom.withTooltip","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withTooltip(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomhidefromwithviz","title":"# fn fieldConfig.defaults.custom.hideFrom.withViz","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withViz(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/index.html#obj-fieldconfigdefaultscustomscaledistribution","title":"obj fieldConfig.defaults.custom.scaleDistribution","text":""},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomscaledistributionwithlinearthreshold","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withLinearThreshold","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withLinearThreshold(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomscaledistributionwithlog","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withLog","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withLog(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomscaledistributionwithtype","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withType","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"log\"</code>, <code>\"ordinal\"</code>, <code>\"symlog\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#obj-fieldconfigdefaultscustomthresholdsstyle","title":"obj fieldConfig.defaults.custom.thresholdsStyle","text":""},{"location":"API/panel/barChart/index.html#fn-fieldconfigdefaultscustomthresholdsstylewithmode","title":"# fn fieldConfig.defaults.custom.thresholdsStyle.withMode","text":"<pre><code>fieldConfig.defaults.custom.thresholdsStyle.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"off\"</code>, <code>\"line\"</code>, <code>\"dashed\"</code>, <code>\"area\"</code>, <code>\"line+area\"</code>, <code>\"dashed+area\"</code>, <code>\"series\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/barChart/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/barChart/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/barChart/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/barChart/index.html#fn-optionswithbarradius","title":"fn options.withBarRadius","text":"<pre><code>options.withBarRadius(value=0)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)<ul> <li>default value: <code>0</code></li> </ul> </li> </ul> <p>Controls the radius of each bar.</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithbarwidth","title":"fn options.withBarWidth","text":"<pre><code>options.withBarWidth(value=0.97)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)<ul> <li>default value: <code>0.97</code></li> </ul> </li> </ul> <p>Controls the width of bars. 1 = Max width, 0 = Min width.</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithcolorbyfield","title":"fn options.withColorByField","text":"<pre><code>options.withColorByField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Use the color value for a sibling field to color each bar value.</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithfullhighlight","title":"fn options.withFullHighlight","text":"<pre><code>options.withFullHighlight(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Enables mode which highlights the entire bar area and shows tooltip when cursor hovers over highlighted area</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithgroupwidth","title":"fn options.withGroupWidth","text":"<pre><code>options.withGroupWidth(value=0.7)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)<ul> <li>default value: <code>0.7</code></li> </ul> </li> </ul> <p>Controls the width of groups. 1 = max with, 0 = min width.</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithlegend","title":"fn options.withLegend","text":"<pre><code>options.withLegend(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithlegendmixin","title":"fn options.withLegendMixin","text":"<pre><code>options.withLegendMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithorientation","title":"fn options.withOrientation","text":"<pre><code>options.withOrientation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"vertical\"</code>, <code>\"horizontal\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithshowvalue","title":"fn options.withShowValue","text":"<pre><code>options.withShowValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"never\"</code>, <code>\"always\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithstacking","title":"fn options.withStacking","text":"<pre><code>options.withStacking(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"normal\"</code>, <code>\"percent\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithtext","title":"fn options.withText","text":"<pre><code>options.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithtextmixin","title":"fn options.withTextMixin","text":"<pre><code>options.withTextMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithtooltip","title":"fn options.withTooltip","text":"<pre><code>options.withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithtooltipmixin","title":"fn options.withTooltipMixin","text":"<pre><code>options.withTooltipMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithxfield","title":"fn options.withXField","text":"<pre><code>options.withXField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Manually select which field from the dataset to represent the x field.</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithxticklabelmaxlength","title":"fn options.withXTickLabelMaxLength","text":"<pre><code>options.withXTickLabelMaxLength(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Sets the max length that a label can have before it is truncated.</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithxticklabelrotation","title":"fn options.withXTickLabelRotation","text":"<pre><code>options.withXTickLabelRotation(value=0)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>0</code></li> </ul> </li> </ul> <p>Controls the rotation of the x axis labels.</p>"},{"location":"API/panel/barChart/index.html#fn-optionswithxticklabelspacing","title":"fn options.withXTickLabelSpacing","text":"<pre><code>options.withXTickLabelSpacing(value=0)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>0</code></li> </ul> </li> </ul> <p>Controls the spacing between x axis labels. negative values indicate backwards skipping behavior</p>"},{"location":"API/panel/barChart/index.html#obj-optionslegend","title":"obj options.legend","text":""},{"location":"API/panel/barChart/index.html#fn-optionslegendwithastable","title":"fn options.legend.withAsTable","text":"<pre><code>options.legend.withAsTable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/index.html#fn-optionslegendwithcalcs","title":"fn options.legend.withCalcs","text":"<pre><code>options.legend.withCalcs(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/index.html#fn-optionslegendwithcalcsmixin","title":"fn options.legend.withCalcsMixin","text":"<pre><code>options.legend.withCalcsMixin(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/index.html#fn-optionslegendwithdisplaymode","title":"fn options.legend.withDisplayMode","text":"<pre><code>options.legend.withDisplayMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"list\"</code>, <code>\"table\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs Note: \"hidden\" needs to remain as an option for plugins compatibility</p>"},{"location":"API/panel/barChart/index.html#fn-optionslegendwithisvisible","title":"fn options.legend.withIsVisible","text":"<pre><code>options.legend.withIsVisible(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/index.html#fn-optionslegendwithplacement","title":"fn options.legend.withPlacement","text":"<pre><code>options.legend.withPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"bottom\"</code>, <code>\"right\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-optionslegendwithshowlegend","title":"fn options.legend.withShowLegend","text":"<pre><code>options.legend.withShowLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/index.html#fn-optionslegendwithsortby","title":"fn options.legend.withSortBy","text":"<pre><code>options.legend.withSortBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/barChart/index.html#fn-optionslegendwithsortdesc","title":"fn options.legend.withSortDesc","text":"<pre><code>options.legend.withSortDesc(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/index.html#fn-optionslegendwithwidth","title":"fn options.legend.withWidth","text":"<pre><code>options.legend.withWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/barChart/index.html#obj-optionstext","title":"obj options.text","text":""},{"location":"API/panel/barChart/index.html#fn-optionstextwithtitlesize","title":"fn options.text.withTitleSize","text":"<pre><code>options.text.withTitleSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Explicit title text size</p>"},{"location":"API/panel/barChart/index.html#fn-optionstextwithvaluesize","title":"fn options.text.withValueSize","text":"<pre><code>options.text.withValueSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Explicit value text size</p>"},{"location":"API/panel/barChart/index.html#obj-optionstooltip","title":"obj options.tooltip","text":""},{"location":"API/panel/barChart/index.html#fn-optionstooltipwithmaxheight","title":"fn options.tooltip.withMaxHeight","text":"<pre><code>options.tooltip.withMaxHeight(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/barChart/index.html#fn-optionstooltipwithmaxwidth","title":"fn options.tooltip.withMaxWidth","text":"<pre><code>options.tooltip.withMaxWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/barChart/index.html#fn-optionstooltipwithmode","title":"fn options.tooltip.withMode","text":"<pre><code>options.tooltip.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"single\"</code>, <code>\"multi\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#fn-optionstooltipwithsort","title":"fn options.tooltip.withSort","text":"<pre><code>options.tooltip.withSort(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"asc\"</code>, <code>\"desc\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barChart/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/barChart/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/barChart/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/barChart/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/barChart/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/barChart/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/barChart/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/barChart/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/barChart/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/barChart/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/barChart/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/barChart/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/barChart/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/barChart/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/barChart/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/barChart/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/barChart/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/barChart/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/barChart/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/barChart/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/barChart/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/barChart/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/barChart/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/barChart/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/barChart/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/barChart/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/barChart/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/barChart/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/barChart/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/barChart/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/barChart/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/barChart/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/barChart/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/barChart/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/barChart/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/barChart/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/barChart/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/barChart/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/barChart/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/barChart/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/barChart/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/barChart/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/barChart/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/barChart/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/barChart/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/barChart/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/barChart/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/barChart/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/barChart/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/barChart/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/barChart/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/barChart/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/barChart/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/barChart/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/barChart/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/barChart/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/barChart/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/barChart/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/barChart/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/barChart/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/barChart/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/barChart/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/barChart/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/barChart/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/barChart/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/barChart/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/barChart/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/barChart/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/barChart/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/barChart/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/barChart/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/barChart/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/barChart/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/barChart/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/barChart/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/barChart/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/barChart/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/barChart/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/barChart/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/barChart/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/barChart/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/barChart/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/barChart/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/barChart/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/barChart/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/barChart/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/barChart/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/barChart/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/barChart/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/barChart/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/barChart/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/barChart/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/barGauge/index.html","title":"barGauge","text":"<p>grafonnet.panel.barGauge</p>"},{"location":"API/panel/barGauge/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/barGauge/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withDisplayMode(value)</code></li> <li><code>fn withMaxVizHeight(value=300)</code></li> <li><code>fn withMinVizHeight(value=16)</code></li> <li><code>fn withMinVizWidth(value=8)</code></li> <li><code>fn withNamePlacement(value)</code></li> <li><code>fn withOrientation(value)</code></li> <li><code>fn withReduceOptions(value)</code></li> <li><code>fn withReduceOptionsMixin(value)</code></li> <li><code>fn withShowUnfilled(value=true)</code></li> <li><code>fn withSizing(value)</code></li> <li><code>fn withText(value)</code></li> <li><code>fn withTextMixin(value)</code></li> <li><code>fn withValueMode(value)</code></li> <li><code>obj reduceOptions</code><ul> <li><code>fn withCalcs(value)</code></li> <li><code>fn withCalcsMixin(value)</code></li> <li><code>fn withFields(value)</code></li> <li><code>fn withLimit(value)</code></li> <li><code>fn withValues(value=true)</code></li> </ul> </li> <li><code>obj text</code><ul> <li><code>fn withTitleSize(value)</code></li> <li><code>fn withValueSize(value)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/barGauge/index.html#fields","title":"Fields","text":""},{"location":"API/panel/barGauge/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new barGauge panel with a title.</p>"},{"location":"API/panel/barGauge/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/barGauge/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/barGauge/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/barGauge/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/barGauge/index.html#fn-optionswithdisplaymode","title":"fn options.withDisplayMode","text":"<pre><code>options.withDisplayMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"basic\"</code>, <code>\"lcd\"</code>, <code>\"gradient\"</code></li> </ul> </li> </ul> <p>Enum expressing the possible display modes for the bar gauge component of Grafana UI</p>"},{"location":"API/panel/barGauge/index.html#fn-optionswithmaxvizheight","title":"fn options.withMaxVizHeight","text":"<pre><code>options.withMaxVizHeight(value=300)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>300</code></li> </ul> </li> </ul>"},{"location":"API/panel/barGauge/index.html#fn-optionswithminvizheight","title":"fn options.withMinVizHeight","text":"<pre><code>options.withMinVizHeight(value=16)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>16</code></li> </ul> </li> </ul>"},{"location":"API/panel/barGauge/index.html#fn-optionswithminvizwidth","title":"fn options.withMinVizWidth","text":"<pre><code>options.withMinVizWidth(value=8)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>8</code></li> </ul> </li> </ul>"},{"location":"API/panel/barGauge/index.html#fn-optionswithnameplacement","title":"fn options.withNamePlacement","text":"<pre><code>options.withNamePlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"top\"</code>, <code>\"left\"</code></li> </ul> </li> </ul> <p>Allows for the bar gauge name to be placed explicitly</p>"},{"location":"API/panel/barGauge/index.html#fn-optionswithorientation","title":"fn options.withOrientation","text":"<pre><code>options.withOrientation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"vertical\"</code>, <code>\"horizontal\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barGauge/index.html#fn-optionswithreduceoptions","title":"fn options.withReduceOptions","text":"<pre><code>options.withReduceOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barGauge/index.html#fn-optionswithreduceoptionsmixin","title":"fn options.withReduceOptionsMixin","text":"<pre><code>options.withReduceOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barGauge/index.html#fn-optionswithshowunfilled","title":"fn options.withShowUnfilled","text":"<pre><code>options.withShowUnfilled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/barGauge/index.html#fn-optionswithsizing","title":"fn options.withSizing","text":"<pre><code>options.withSizing(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"manual\"</code></li> </ul> </li> </ul> <p>Allows for the bar gauge size to be set explicitly</p>"},{"location":"API/panel/barGauge/index.html#fn-optionswithtext","title":"fn options.withText","text":"<pre><code>options.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barGauge/index.html#fn-optionswithtextmixin","title":"fn options.withTextMixin","text":"<pre><code>options.withTextMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/barGauge/index.html#fn-optionswithvaluemode","title":"fn options.withValueMode","text":"<pre><code>options.withValueMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"color\"</code>, <code>\"text\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>Allows for the table cell gauge display type to set the gauge mode.</p>"},{"location":"API/panel/barGauge/index.html#obj-optionsreduceoptions","title":"obj options.reduceOptions","text":""},{"location":"API/panel/barGauge/index.html#fn-optionsreduceoptionswithcalcs","title":"fn options.reduceOptions.withCalcs","text":"<pre><code>options.reduceOptions.withCalcs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>When !values, pick one value for the whole field</p>"},{"location":"API/panel/barGauge/index.html#fn-optionsreduceoptionswithcalcsmixin","title":"fn options.reduceOptions.withCalcsMixin","text":"<pre><code>options.reduceOptions.withCalcsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>When !values, pick one value for the whole field</p>"},{"location":"API/panel/barGauge/index.html#fn-optionsreduceoptionswithfields","title":"fn options.reduceOptions.withFields","text":"<pre><code>options.reduceOptions.withFields(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Which fields to show.  By default this is only numeric fields</p>"},{"location":"API/panel/barGauge/index.html#fn-optionsreduceoptionswithlimit","title":"fn options.reduceOptions.withLimit","text":"<pre><code>options.reduceOptions.withLimit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>if showing all values limit</p>"},{"location":"API/panel/barGauge/index.html#fn-optionsreduceoptionswithvalues","title":"fn options.reduceOptions.withValues","text":"<pre><code>options.reduceOptions.withValues(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true show each row value</p>"},{"location":"API/panel/barGauge/index.html#obj-optionstext","title":"obj options.text","text":""},{"location":"API/panel/barGauge/index.html#fn-optionstextwithtitlesize","title":"fn options.text.withTitleSize","text":"<pre><code>options.text.withTitleSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Explicit title text size</p>"},{"location":"API/panel/barGauge/index.html#fn-optionstextwithvaluesize","title":"fn options.text.withValueSize","text":"<pre><code>options.text.withValueSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Explicit value text size</p>"},{"location":"API/panel/barGauge/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/barGauge/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/barGauge/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/barGauge/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/barGauge/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/barGauge/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/barGauge/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/barGauge/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/barGauge/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/barGauge/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/barGauge/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/barGauge/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/barGauge/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/barGauge/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/barGauge/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/barGauge/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/barGauge/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/barGauge/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/barGauge/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/barGauge/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/barGauge/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/barGauge/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/barGauge/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/barGauge/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/barGauge/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/barGauge/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/barGauge/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/barGauge/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/barGauge/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/barGauge/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/barGauge/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/barGauge/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/barGauge/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/barGauge/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/barGauge/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/barGauge/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/barGauge/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/barGauge/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/barGauge/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/barGauge/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/barGauge/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/barGauge/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/barGauge/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/barGauge/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/barGauge/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/barGauge/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/barGauge/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/barGauge/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/barGauge/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/barGauge/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/barGauge/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/barGauge/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/barGauge/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/barGauge/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/barGauge/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/barGauge/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/barGauge/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/barGauge/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/barGauge/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/barGauge/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/barGauge/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/barGauge/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/barGauge/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/barGauge/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/barGauge/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/barGauge/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/barGauge/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/barGauge/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/barGauge/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/barGauge/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/barGauge/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/barGauge/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/barGauge/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/barGauge/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/barGauge/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/barGauge/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/barGauge/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/barGauge/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/barGauge/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/barGauge/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/barGauge/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/barGauge/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/barGauge/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/barGauge/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/barGauge/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/barGauge/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/barGauge/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/barGauge/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/barGauge/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/barGauge/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/candlestick/index.html","title":"candlestick","text":"<p>grafonnet.panel.candlestick</p>"},{"location":"API/panel/candlestick/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/candlestick/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj fieldConfig</code><ul> <li><code>obj defaults</code><ul> <li><code>obj custom</code><ul> <li><code>fn withAxisBorderShow(value=true)</code></li> <li><code>fn withAxisCenteredZero(value=true)</code></li> <li><code>fn withAxisColorMode(value)</code></li> <li><code>fn withAxisGridShow(value=true)</code></li> <li><code>fn withAxisLabel(value)</code></li> <li><code>fn withAxisPlacement(value)</code></li> <li><code>fn withAxisSoftMax(value)</code></li> <li><code>fn withAxisSoftMin(value)</code></li> <li><code>fn withAxisWidth(value)</code></li> <li><code>fn withBarAlignment(value)</code></li> <li><code>fn withBarMaxWidth(value)</code></li> <li><code>fn withBarWidthFactor(value)</code></li> <li><code>fn withDrawStyle(value)</code></li> <li><code>fn withFillBelowTo(value)</code></li> <li><code>fn withFillColor(value)</code></li> <li><code>fn withFillOpacity(value)</code></li> <li><code>fn withGradientMode(value)</code></li> <li><code>fn withHideFrom(value)</code></li> <li><code>fn withHideFromMixin(value)</code></li> <li><code>fn withInsertNulls(value)</code></li> <li><code>fn withInsertNullsMixin(value)</code></li> <li><code>fn withLineColor(value)</code></li> <li><code>fn withLineInterpolation(value)</code></li> <li><code>fn withLineStyle(value)</code></li> <li><code>fn withLineStyleMixin(value)</code></li> <li><code>fn withLineWidth(value)</code></li> <li><code>fn withPointColor(value)</code></li> <li><code>fn withPointSize(value)</code></li> <li><code>fn withPointSymbol(value)</code></li> <li><code>fn withScaleDistribution(value)</code></li> <li><code>fn withScaleDistributionMixin(value)</code></li> <li><code>fn withShowPoints(value)</code></li> <li><code>fn withSpanNulls(value)</code></li> <li><code>fn withSpanNullsMixin(value)</code></li> <li><code>fn withStacking(value)</code></li> <li><code>fn withStackingMixin(value)</code></li> <li><code>fn withThresholdsStyle(value)</code></li> <li><code>fn withThresholdsStyleMixin(value)</code></li> <li><code>fn withTransform(value)</code></li> <li><code>obj hideFrom</code><ul> <li><code>fn withLegend(value=true)</code></li> <li><code>fn withTooltip(value=true)</code></li> <li><code>fn withViz(value=true)</code></li> </ul> </li> <li><code>obj lineStyle</code><ul> <li><code>fn withDash(value)</code></li> <li><code>fn withDashMixin(value)</code></li> <li><code>fn withFill(value)</code></li> </ul> </li> <li><code>obj scaleDistribution</code><ul> <li><code>fn withLinearThreshold(value)</code></li> <li><code>fn withLog(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> <li><code>obj stacking</code><ul> <li><code>fn withGroup(value)</code></li> <li><code>fn withMode(value)</code></li> </ul> </li> <li><code>obj thresholdsStyle</code><ul> <li><code>fn withMode(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withCandleStyle(value)</code></li> <li><code>fn withColorStrategy(value)</code></li> <li><code>fn withColors(value)</code></li> <li><code>fn withColorsMixin(value)</code></li> <li><code>fn withFields(value)</code></li> <li><code>fn withFieldsMixin(value)</code></li> <li><code>fn withIncludeAllFields(value=true)</code></li> <li><code>fn withLegend(value)</code></li> <li><code>fn withLegendMixin(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withTooltipMixin(value)</code></li> <li><code>obj colors</code><ul> <li><code>fn withDown(value=\"red\")</code></li> <li><code>fn withFlat(value=\"gray\")</code></li> <li><code>fn withUp(value=\"green\")</code></li> </ul> </li> <li><code>obj fields</code><ul> <li><code>fn withClose(value)</code></li> <li><code>fn withHigh(value)</code></li> <li><code>fn withLow(value)</code></li> <li><code>fn withOpen(value)</code></li> <li><code>fn withVolume(value)</code></li> </ul> </li> <li><code>obj legend</code><ul> <li><code>fn withAsTable(value=true)</code></li> <li><code>fn withCalcs(value=[])</code></li> <li><code>fn withCalcsMixin(value=[])</code></li> <li><code>fn withDisplayMode(value)</code></li> <li><code>fn withIsVisible(value=true)</code></li> <li><code>fn withPlacement(value)</code></li> <li><code>fn withShowLegend(value=true)</code></li> <li><code>fn withSortBy(value)</code></li> <li><code>fn withSortDesc(value=true)</code></li> <li><code>fn withWidth(value)</code></li> </ul> </li> <li><code>obj tooltip</code><ul> <li><code>fn withMaxHeight(value)</code></li> <li><code>fn withMaxWidth(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSort(value)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fields","title":"Fields","text":""},{"location":"API/panel/candlestick/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new candlestick panel with a title.</p>"},{"location":"API/panel/candlestick/index.html#obj-fieldconfig","title":"obj fieldConfig","text":""},{"location":"API/panel/candlestick/index.html#obj-fieldconfigdefaults","title":"obj fieldConfig.defaults","text":""},{"location":"API/panel/candlestick/index.html#obj-fieldconfigdefaultscustom","title":"obj fieldConfig.defaults.custom","text":""},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithaxisbordershow","title":"fn fieldConfig.defaults.custom.withAxisBorderShow","text":"<pre><code>fieldConfig.defaults.custom.withAxisBorderShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithaxiscenteredzero","title":"fn fieldConfig.defaults.custom.withAxisCenteredZero","text":"<pre><code>fieldConfig.defaults.custom.withAxisCenteredZero(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithaxiscolormode","title":"fn fieldConfig.defaults.custom.withAxisColorMode","text":"<pre><code>fieldConfig.defaults.custom.withAxisColorMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"text\"</code>, <code>\"series\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithaxisgridshow","title":"fn fieldConfig.defaults.custom.withAxisGridShow","text":"<pre><code>fieldConfig.defaults.custom.withAxisGridShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithaxislabel","title":"fn fieldConfig.defaults.custom.withAxisLabel","text":"<pre><code>fieldConfig.defaults.custom.withAxisLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithaxisplacement","title":"fn fieldConfig.defaults.custom.withAxisPlacement","text":"<pre><code>fieldConfig.defaults.custom.withAxisPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"top\"</code>, <code>\"right\"</code>, <code>\"bottom\"</code>, <code>\"left\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithaxissoftmax","title":"fn fieldConfig.defaults.custom.withAxisSoftMax","text":"<pre><code>fieldConfig.defaults.custom.withAxisSoftMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithaxissoftmin","title":"fn fieldConfig.defaults.custom.withAxisSoftMin","text":"<pre><code>fieldConfig.defaults.custom.withAxisSoftMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithaxiswidth","title":"fn fieldConfig.defaults.custom.withAxisWidth","text":"<pre><code>fieldConfig.defaults.custom.withAxisWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithbaralignment","title":"fn fieldConfig.defaults.custom.withBarAlignment","text":"<pre><code>fieldConfig.defaults.custom.withBarAlignment(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>-1</code>, <code>0</code>, <code>1</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithbarmaxwidth","title":"fn fieldConfig.defaults.custom.withBarMaxWidth","text":"<pre><code>fieldConfig.defaults.custom.withBarMaxWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithbarwidthfactor","title":"fn fieldConfig.defaults.custom.withBarWidthFactor","text":"<pre><code>fieldConfig.defaults.custom.withBarWidthFactor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithdrawstyle","title":"fn fieldConfig.defaults.custom.withDrawStyle","text":"<pre><code>fieldConfig.defaults.custom.withDrawStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"line\"</code>, <code>\"bars\"</code>, <code>\"points\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithfillbelowto","title":"fn fieldConfig.defaults.custom.withFillBelowTo","text":"<pre><code>fieldConfig.defaults.custom.withFillBelowTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithfillcolor","title":"fn fieldConfig.defaults.custom.withFillColor","text":"<pre><code>fieldConfig.defaults.custom.withFillColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithfillopacity","title":"fn fieldConfig.defaults.custom.withFillOpacity","text":"<pre><code>fieldConfig.defaults.custom.withFillOpacity(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithgradientmode","title":"fn fieldConfig.defaults.custom.withGradientMode","text":"<pre><code>fieldConfig.defaults.custom.withGradientMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"opacity\"</code>, <code>\"hue\"</code>, <code>\"scheme\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithhidefrom","title":"fn fieldConfig.defaults.custom.withHideFrom","text":"<pre><code>fieldConfig.defaults.custom.withHideFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithhidefrommixin","title":"fn fieldConfig.defaults.custom.withHideFromMixin","text":"<pre><code>fieldConfig.defaults.custom.withHideFromMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithinsertnulls","title":"fn fieldConfig.defaults.custom.withInsertNulls","text":"<pre><code>fieldConfig.defaults.custom.withInsertNulls(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>,<code>integer</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithinsertnullsmixin","title":"fn fieldConfig.defaults.custom.withInsertNullsMixin","text":"<pre><code>fieldConfig.defaults.custom.withInsertNullsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>,<code>integer</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithlinecolor","title":"fn fieldConfig.defaults.custom.withLineColor","text":"<pre><code>fieldConfig.defaults.custom.withLineColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithlineinterpolation","title":"fn fieldConfig.defaults.custom.withLineInterpolation","text":"<pre><code>fieldConfig.defaults.custom.withLineInterpolation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"smooth\"</code>, <code>\"stepBefore\"</code>, <code>\"stepAfter\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithlinestyle","title":"fn fieldConfig.defaults.custom.withLineStyle","text":"<pre><code>fieldConfig.defaults.custom.withLineStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithlinestylemixin","title":"fn fieldConfig.defaults.custom.withLineStyleMixin","text":"<pre><code>fieldConfig.defaults.custom.withLineStyleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithlinewidth","title":"fn fieldConfig.defaults.custom.withLineWidth","text":"<pre><code>fieldConfig.defaults.custom.withLineWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithpointcolor","title":"fn fieldConfig.defaults.custom.withPointColor","text":"<pre><code>fieldConfig.defaults.custom.withPointColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithpointsize","title":"fn fieldConfig.defaults.custom.withPointSize","text":"<pre><code>fieldConfig.defaults.custom.withPointSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithpointsymbol","title":"fn fieldConfig.defaults.custom.withPointSymbol","text":"<pre><code>fieldConfig.defaults.custom.withPointSymbol(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithscaledistribution","title":"fn fieldConfig.defaults.custom.withScaleDistribution","text":"<pre><code>fieldConfig.defaults.custom.withScaleDistribution(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithscaledistributionmixin","title":"fn fieldConfig.defaults.custom.withScaleDistributionMixin","text":"<pre><code>fieldConfig.defaults.custom.withScaleDistributionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithshowpoints","title":"fn fieldConfig.defaults.custom.withShowPoints","text":"<pre><code>fieldConfig.defaults.custom.withShowPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"never\"</code>, <code>\"always\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithspannulls","title":"fn fieldConfig.defaults.custom.withSpanNulls","text":"<pre><code>fieldConfig.defaults.custom.withSpanNulls(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>,<code>number</code>)</li> </ul> <p>Indicate if null values should be treated as gaps or connected. When the value is a number, it represents the maximum delta in the X axis that should be considered connected.  For timeseries, this is milliseconds</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithspannullsmixin","title":"fn fieldConfig.defaults.custom.withSpanNullsMixin","text":"<pre><code>fieldConfig.defaults.custom.withSpanNullsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>,<code>number</code>)</li> </ul> <p>Indicate if null values should be treated as gaps or connected. When the value is a number, it represents the maximum delta in the X axis that should be considered connected.  For timeseries, this is milliseconds</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithstacking","title":"fn fieldConfig.defaults.custom.withStacking","text":"<pre><code>fieldConfig.defaults.custom.withStacking(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithstackingmixin","title":"fn fieldConfig.defaults.custom.withStackingMixin","text":"<pre><code>fieldConfig.defaults.custom.withStackingMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwiththresholdsstyle","title":"fn fieldConfig.defaults.custom.withThresholdsStyle","text":"<pre><code>fieldConfig.defaults.custom.withThresholdsStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwiththresholdsstylemixin","title":"fn fieldConfig.defaults.custom.withThresholdsStyleMixin","text":"<pre><code>fieldConfig.defaults.custom.withThresholdsStyleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomwithtransform","title":"fn fieldConfig.defaults.custom.withTransform","text":"<pre><code>fieldConfig.defaults.custom.withTransform(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"constant\"</code>, <code>\"negative-Y\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#obj-fieldconfigdefaultscustomhidefrom","title":"obj fieldConfig.defaults.custom.hideFrom","text":""},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomhidefromwithlegend","title":"# fn fieldConfig.defaults.custom.hideFrom.withLegend","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomhidefromwithtooltip","title":"# fn fieldConfig.defaults.custom.hideFrom.withTooltip","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withTooltip(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomhidefromwithviz","title":"# fn fieldConfig.defaults.custom.hideFrom.withViz","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withViz(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#obj-fieldconfigdefaultscustomlinestyle","title":"obj fieldConfig.defaults.custom.lineStyle","text":""},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomlinestylewithdash","title":"# fn fieldConfig.defaults.custom.lineStyle.withDash","text":"<pre><code>fieldConfig.defaults.custom.lineStyle.withDash(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomlinestylewithdashmixin","title":"# fn fieldConfig.defaults.custom.lineStyle.withDashMixin","text":"<pre><code>fieldConfig.defaults.custom.lineStyle.withDashMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomlinestylewithfill","title":"# fn fieldConfig.defaults.custom.lineStyle.withFill","text":"<pre><code>fieldConfig.defaults.custom.lineStyle.withFill(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"solid\"</code>, <code>\"dash\"</code>, <code>\"dot\"</code>, <code>\"square\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#obj-fieldconfigdefaultscustomscaledistribution","title":"obj fieldConfig.defaults.custom.scaleDistribution","text":""},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomscaledistributionwithlinearthreshold","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withLinearThreshold","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withLinearThreshold(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomscaledistributionwithlog","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withLog","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withLog(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomscaledistributionwithtype","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withType","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"log\"</code>, <code>\"ordinal\"</code>, <code>\"symlog\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#obj-fieldconfigdefaultscustomstacking","title":"obj fieldConfig.defaults.custom.stacking","text":""},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomstackingwithgroup","title":"# fn fieldConfig.defaults.custom.stacking.withGroup","text":"<pre><code>fieldConfig.defaults.custom.stacking.withGroup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomstackingwithmode","title":"# fn fieldConfig.defaults.custom.stacking.withMode","text":"<pre><code>fieldConfig.defaults.custom.stacking.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"normal\"</code>, <code>\"percent\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#obj-fieldconfigdefaultscustomthresholdsstyle","title":"obj fieldConfig.defaults.custom.thresholdsStyle","text":""},{"location":"API/panel/candlestick/index.html#fn-fieldconfigdefaultscustomthresholdsstylewithmode","title":"# fn fieldConfig.defaults.custom.thresholdsStyle.withMode","text":"<pre><code>fieldConfig.defaults.custom.thresholdsStyle.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"off\"</code>, <code>\"line\"</code>, <code>\"dashed\"</code>, <code>\"area\"</code>, <code>\"line+area\"</code>, <code>\"dashed+area\"</code>, <code>\"series\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/candlestick/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/candlestick/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/candlestick/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/candlestick/index.html#fn-optionswithcandlestyle","title":"fn options.withCandleStyle","text":"<pre><code>options.withCandleStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"candles\"</code>, <code>\"ohlcbars\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionswithcolorstrategy","title":"fn options.withColorStrategy","text":"<pre><code>options.withColorStrategy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"open-close\"</code>, <code>\"close-close\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionswithcolors","title":"fn options.withColors","text":"<pre><code>options.withColors(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionswithcolorsmixin","title":"fn options.withColorsMixin","text":"<pre><code>options.withColorsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionswithfields","title":"fn options.withFields","text":"<pre><code>options.withFields(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionswithfieldsmixin","title":"fn options.withFieldsMixin","text":"<pre><code>options.withFieldsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionswithincludeallfields","title":"fn options.withIncludeAllFields","text":"<pre><code>options.withIncludeAllFields(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>When enabled, all fields will be sent to the graph</p>"},{"location":"API/panel/candlestick/index.html#fn-optionswithlegend","title":"fn options.withLegend","text":"<pre><code>options.withLegend(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-optionswithlegendmixin","title":"fn options.withLegendMixin","text":"<pre><code>options.withLegendMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-optionswithmode","title":"fn options.withMode","text":"<pre><code>options.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"candles+volume\"</code>, <code>\"candles\"</code>, <code>\"volume\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionswithtooltip","title":"fn options.withTooltip","text":"<pre><code>options.withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-optionswithtooltipmixin","title":"fn options.withTooltipMixin","text":"<pre><code>options.withTooltipMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#obj-optionscolors","title":"obj options.colors","text":""},{"location":"API/panel/candlestick/index.html#fn-optionscolorswithdown","title":"fn options.colors.withDown","text":"<pre><code>options.colors.withDown(value=\"red\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"red\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionscolorswithflat","title":"fn options.colors.withFlat","text":"<pre><code>options.colors.withFlat(value=\"gray\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"gray\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionscolorswithup","title":"fn options.colors.withUp","text":"<pre><code>options.colors.withUp(value=\"green\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"green\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#obj-optionsfields","title":"obj options.fields","text":""},{"location":"API/panel/candlestick/index.html#fn-optionsfieldswithclose","title":"fn options.fields.withClose","text":"<pre><code>options.fields.withClose(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Corresponds to the final (end) value of the given period</p>"},{"location":"API/panel/candlestick/index.html#fn-optionsfieldswithhigh","title":"fn options.fields.withHigh","text":"<pre><code>options.fields.withHigh(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Corresponds to the highest value of the given period</p>"},{"location":"API/panel/candlestick/index.html#fn-optionsfieldswithlow","title":"fn options.fields.withLow","text":"<pre><code>options.fields.withLow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Corresponds to the lowest value of the given period</p>"},{"location":"API/panel/candlestick/index.html#fn-optionsfieldswithopen","title":"fn options.fields.withOpen","text":"<pre><code>options.fields.withOpen(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Corresponds to the starting value of the given period</p>"},{"location":"API/panel/candlestick/index.html#fn-optionsfieldswithvolume","title":"fn options.fields.withVolume","text":"<pre><code>options.fields.withVolume(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Corresponds to the sample count in the given period. (e.g. number of trades)</p>"},{"location":"API/panel/candlestick/index.html#obj-optionslegend","title":"obj options.legend","text":""},{"location":"API/panel/candlestick/index.html#fn-optionslegendwithastable","title":"fn options.legend.withAsTable","text":"<pre><code>options.legend.withAsTable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionslegendwithcalcs","title":"fn options.legend.withCalcs","text":"<pre><code>options.legend.withCalcs(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionslegendwithcalcsmixin","title":"fn options.legend.withCalcsMixin","text":"<pre><code>options.legend.withCalcsMixin(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionslegendwithdisplaymode","title":"fn options.legend.withDisplayMode","text":"<pre><code>options.legend.withDisplayMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"list\"</code>, <code>\"table\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs Note: \"hidden\" needs to remain as an option for plugins compatibility</p>"},{"location":"API/panel/candlestick/index.html#fn-optionslegendwithisvisible","title":"fn options.legend.withIsVisible","text":"<pre><code>options.legend.withIsVisible(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionslegendwithplacement","title":"fn options.legend.withPlacement","text":"<pre><code>options.legend.withPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"bottom\"</code>, <code>\"right\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-optionslegendwithshowlegend","title":"fn options.legend.withShowLegend","text":"<pre><code>options.legend.withShowLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionslegendwithsortby","title":"fn options.legend.withSortBy","text":"<pre><code>options.legend.withSortBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionslegendwithsortdesc","title":"fn options.legend.withSortDesc","text":"<pre><code>options.legend.withSortDesc(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionslegendwithwidth","title":"fn options.legend.withWidth","text":"<pre><code>options.legend.withWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#obj-optionstooltip","title":"obj options.tooltip","text":""},{"location":"API/panel/candlestick/index.html#fn-optionstooltipwithmaxheight","title":"fn options.tooltip.withMaxHeight","text":"<pre><code>options.tooltip.withMaxHeight(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionstooltipwithmaxwidth","title":"fn options.tooltip.withMaxWidth","text":"<pre><code>options.tooltip.withMaxWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/candlestick/index.html#fn-optionstooltipwithmode","title":"fn options.tooltip.withMode","text":"<pre><code>options.tooltip.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"single\"</code>, <code>\"multi\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#fn-optionstooltipwithsort","title":"fn options.tooltip.withSort","text":"<pre><code>options.tooltip.withSort(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"asc\"</code>, <code>\"desc\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/candlestick/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/candlestick/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/candlestick/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/candlestick/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/candlestick/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/candlestick/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/candlestick/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/candlestick/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/candlestick/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/candlestick/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/candlestick/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/candlestick/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/candlestick/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/candlestick/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/candlestick/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/candlestick/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/candlestick/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/candlestick/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/candlestick/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/candlestick/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/candlestick/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/candlestick/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/candlestick/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/candlestick/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/candlestick/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/candlestick/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/candlestick/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/candlestick/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/candlestick/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/candlestick/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/candlestick/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/candlestick/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/candlestick/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/candlestick/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/candlestick/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/candlestick/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/candlestick/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/candlestick/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/candlestick/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/candlestick/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/candlestick/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/candlestick/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/candlestick/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/candlestick/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/candlestick/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/candlestick/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/candlestick/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/candlestick/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/candlestick/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/candlestick/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/candlestick/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/candlestick/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/candlestick/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/candlestick/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/candlestick/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/candlestick/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/candlestick/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/candlestick/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/candlestick/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/candlestick/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/candlestick/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/candlestick/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/candlestick/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/candlestick/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/candlestick/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/candlestick/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/candlestick/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/candlestick/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/candlestick/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/candlestick/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/candlestick/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/candlestick/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/candlestick/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/candlestick/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/candlestick/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/candlestick/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/candlestick/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/candlestick/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/candlestick/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/candlestick/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/candlestick/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/candlestick/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/candlestick/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/candlestick/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/candlestick/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/candlestick/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/candlestick/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/candlestick/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/candlestick/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/canvas/index.html","title":"canvas","text":"<p>grafonnet.panel.canvas</p>"},{"location":"API/panel/canvas/index.html#subpackages","title":"Subpackages","text":"<ul> <li>options.root.elements</li> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/canvas/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withInfinitePan(value=true)</code></li> <li><code>fn withInlineEditing(value=true)</code></li> <li><code>fn withPanZoom(value=true)</code></li> <li><code>fn withRoot(value)</code></li> <li><code>fn withRootMixin(value)</code></li> <li><code>fn withShowAdvancedTypes(value=true)</code></li> <li><code>obj root</code><ul> <li><code>fn withElements(value)</code></li> <li><code>fn withElementsMixin(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/canvas/index.html#fields","title":"Fields","text":""},{"location":"API/panel/canvas/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new canvas panel with a title.</p>"},{"location":"API/panel/canvas/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/canvas/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/canvas/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/canvas/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/canvas/index.html#fn-optionswithinfinitepan","title":"fn options.withInfinitePan","text":"<pre><code>options.withInfinitePan(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Enable infinite pan</p>"},{"location":"API/panel/canvas/index.html#fn-optionswithinlineediting","title":"fn options.withInlineEditing","text":"<pre><code>options.withInlineEditing(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Enable inline editing</p>"},{"location":"API/panel/canvas/index.html#fn-optionswithpanzoom","title":"fn options.withPanZoom","text":"<pre><code>options.withPanZoom(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Enable pan and zoom</p>"},{"location":"API/panel/canvas/index.html#fn-optionswithroot","title":"fn options.withRoot","text":"<pre><code>options.withRoot(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The root element of canvas (frame), where all canvas elements are nested TODO: Figure out how to define a default value for this</p>"},{"location":"API/panel/canvas/index.html#fn-optionswithrootmixin","title":"fn options.withRootMixin","text":"<pre><code>options.withRootMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The root element of canvas (frame), where all canvas elements are nested TODO: Figure out how to define a default value for this</p>"},{"location":"API/panel/canvas/index.html#fn-optionswithshowadvancedtypes","title":"fn options.withShowAdvancedTypes","text":"<pre><code>options.withShowAdvancedTypes(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Show all available element types</p>"},{"location":"API/panel/canvas/index.html#obj-optionsroot","title":"obj options.root","text":""},{"location":"API/panel/canvas/index.html#fn-optionsrootwithelements","title":"fn options.root.withElements","text":"<pre><code>options.root.withElements(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The list of canvas elements attached to the root element</p>"},{"location":"API/panel/canvas/index.html#fn-optionsrootwithelementsmixin","title":"fn options.root.withElementsMixin","text":"<pre><code>options.root.withElementsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The list of canvas elements attached to the root element</p>"},{"location":"API/panel/canvas/index.html#fn-optionsrootwithname","title":"fn options.root.withName","text":"<pre><code>options.root.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of the root element</p>"},{"location":"API/panel/canvas/index.html#fn-optionsrootwithtype","title":"fn options.root.withType","text":"<pre><code>options.root.withType()\n</code></pre> <p>Type of root element (frame)</p>"},{"location":"API/panel/canvas/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/canvas/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/canvas/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/canvas/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/canvas/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/canvas/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/canvas/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/canvas/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/canvas/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/canvas/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/canvas/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/canvas/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/canvas/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/canvas/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/canvas/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/canvas/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/canvas/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/canvas/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/canvas/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/canvas/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/canvas/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/canvas/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/canvas/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/canvas/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/canvas/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/canvas/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/canvas/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/canvas/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/canvas/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/canvas/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/canvas/options/root/elements/index.html","title":"elements","text":""},{"location":"API/panel/canvas/options/root/elements/index.html#subpackages","title":"Subpackages","text":"<ul> <li>connections</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#index","title":"Index","text":"<ul> <li><code>fn withBackground(value)</code></li> <li><code>fn withBackgroundMixin(value)</code></li> <li><code>fn withBorder(value)</code></li> <li><code>fn withBorderMixin(value)</code></li> <li><code>fn withConfig(value)</code></li> <li><code>fn withConfigMixin(value)</code></li> <li><code>fn withConnections(value)</code></li> <li><code>fn withConnectionsMixin(value)</code></li> <li><code>fn withConstraint(value)</code></li> <li><code>fn withConstraintMixin(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>fn withPlacement(value)</code></li> <li><code>fn withPlacementMixin(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>obj background</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withColorMixin(value)</code></li> <li><code>fn withImage(value)</code></li> <li><code>fn withImageMixin(value)</code></li> <li><code>fn withSize(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withFixed(value)</code></li> </ul> </li> <li><code>obj image</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withFixed(value)</code></li> <li><code>fn withMode(value)</code></li> </ul> </li> </ul> </li> <li><code>obj border</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withColorMixin(value)</code></li> <li><code>fn withRadius(value)</code></li> <li><code>fn withWidth(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withFixed(value)</code></li> </ul> </li> </ul> </li> <li><code>obj constraint</code><ul> <li><code>fn withHorizontal(value)</code></li> <li><code>fn withVertical(value)</code></li> </ul> </li> <li><code>obj placement</code><ul> <li><code>fn withBottom(value)</code></li> <li><code>fn withHeight(value)</code></li> <li><code>fn withLeft(value)</code></li> <li><code>fn withRight(value)</code></li> <li><code>fn withRotation(value)</code></li> <li><code>fn withTop(value)</code></li> <li><code>fn withWidth(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fields","title":"Fields","text":""},{"location":"API/panel/canvas/options/root/elements/index.html#fn-withbackground","title":"fn withBackground","text":"<pre><code>withBackground(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-withbackgroundmixin","title":"fn withBackgroundMixin","text":"<pre><code>withBackgroundMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-withborder","title":"fn withBorder","text":"<pre><code>withBorder(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-withbordermixin","title":"fn withBorderMixin","text":"<pre><code>withBorderMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-withconfig","title":"fn withConfig","text":"<pre><code>withConfig(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO: figure out how to define this (element config(s))</p>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-withconfigmixin","title":"fn withConfigMixin","text":"<pre><code>withConfigMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO: figure out how to define this (element config(s))</p>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-withconnections","title":"fn withConnections","text":"<pre><code>withConnections(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-withconnectionsmixin","title":"fn withConnectionsMixin","text":"<pre><code>withConnectionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-withconstraint","title":"fn withConstraint","text":"<pre><code>withConstraint(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-withconstraintmixin","title":"fn withConstraintMixin","text":"<pre><code>withConstraintMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-withplacement","title":"fn withPlacement","text":"<pre><code>withPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-withplacementmixin","title":"fn withPlacementMixin","text":"<pre><code>withPlacementMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#obj-background","title":"obj background","text":""},{"location":"API/panel/canvas/options/root/elements/index.html#fn-backgroundwithcolor","title":"fn background.withColor","text":"<pre><code>background.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-backgroundwithcolormixin","title":"fn background.withColorMixin","text":"<pre><code>background.withColorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-backgroundwithimage","title":"fn background.withImage","text":"<pre><code>background.withImage(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Links to a resource (image/svg path)</p>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-backgroundwithimagemixin","title":"fn background.withImageMixin","text":"<pre><code>background.withImageMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Links to a resource (image/svg path)</p>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-backgroundwithsize","title":"fn background.withSize","text":"<pre><code>background.withSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"original\"</code>, <code>\"contain\"</code>, <code>\"cover\"</code>, <code>\"fill\"</code>, <code>\"tile\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#obj-backgroundcolor","title":"obj background.color","text":""},{"location":"API/panel/canvas/options/root/elements/index.html#fn-backgroundcolorwithfield","title":"fn background.color.withField","text":"<pre><code>background.color.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>fixed: T -- will be added by each element</p>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-backgroundcolorwithfixed","title":"fn background.color.withFixed","text":"<pre><code>background.color.withFixed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>color value</p>"},{"location":"API/panel/canvas/options/root/elements/index.html#obj-backgroundimage","title":"obj background.image","text":""},{"location":"API/panel/canvas/options/root/elements/index.html#fn-backgroundimagewithfield","title":"fn background.image.withField","text":"<pre><code>background.image.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>fixed: T -- will be added by each element</p>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-backgroundimagewithfixed","title":"fn background.image.withFixed","text":"<pre><code>background.image.withFixed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-backgroundimagewithmode","title":"fn background.image.withMode","text":"<pre><code>background.image.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"fixed\"</code>, <code>\"field\"</code>, <code>\"mapping\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#obj-border","title":"obj border","text":""},{"location":"API/panel/canvas/options/root/elements/index.html#fn-borderwithcolor","title":"fn border.withColor","text":"<pre><code>border.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-borderwithcolormixin","title":"fn border.withColorMixin","text":"<pre><code>border.withColorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-borderwithradius","title":"fn border.withRadius","text":"<pre><code>border.withRadius(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-borderwithwidth","title":"fn border.withWidth","text":"<pre><code>border.withWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#obj-bordercolor","title":"obj border.color","text":""},{"location":"API/panel/canvas/options/root/elements/index.html#fn-bordercolorwithfield","title":"fn border.color.withField","text":"<pre><code>border.color.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>fixed: T -- will be added by each element</p>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-bordercolorwithfixed","title":"fn border.color.withFixed","text":"<pre><code>border.color.withFixed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>color value</p>"},{"location":"API/panel/canvas/options/root/elements/index.html#obj-constraint","title":"obj constraint","text":""},{"location":"API/panel/canvas/options/root/elements/index.html#fn-constraintwithhorizontal","title":"fn constraint.withHorizontal","text":"<pre><code>constraint.withHorizontal(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"left\"</code>, <code>\"right\"</code>, <code>\"leftright\"</code>, <code>\"center\"</code>, <code>\"scale\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-constraintwithvertical","title":"fn constraint.withVertical","text":"<pre><code>constraint.withVertical(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"top\"</code>, <code>\"bottom\"</code>, <code>\"topbottom\"</code>, <code>\"center\"</code>, <code>\"scale\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#obj-placement","title":"obj placement","text":""},{"location":"API/panel/canvas/options/root/elements/index.html#fn-placementwithbottom","title":"fn placement.withBottom","text":"<pre><code>placement.withBottom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-placementwithheight","title":"fn placement.withHeight","text":"<pre><code>placement.withHeight(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-placementwithleft","title":"fn placement.withLeft","text":"<pre><code>placement.withLeft(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-placementwithright","title":"fn placement.withRight","text":"<pre><code>placement.withRight(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-placementwithrotation","title":"fn placement.withRotation","text":"<pre><code>placement.withRotation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-placementwithtop","title":"fn placement.withTop","text":"<pre><code>placement.withTop(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/index.html#fn-placementwithwidth","title":"fn placement.withWidth","text":"<pre><code>placement.withWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html","title":"connections","text":""},{"location":"API/panel/canvas/options/root/elements/connections/index.html#subpackages","title":"Subpackages","text":"<ul> <li>vertices</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withColorMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withSize(value)</code></li> <li><code>fn withSizeMixin(value)</code></li> <li><code>fn withSource(value)</code></li> <li><code>fn withSourceMixin(value)</code></li> <li><code>fn withSourceOriginal(value)</code></li> <li><code>fn withSourceOriginalMixin(value)</code></li> <li><code>fn withTarget(value)</code></li> <li><code>fn withTargetMixin(value)</code></li> <li><code>fn withTargetName(value)</code></li> <li><code>fn withTargetOriginal(value)</code></li> <li><code>fn withTargetOriginalMixin(value)</code></li> <li><code>fn withVertices(value)</code></li> <li><code>fn withVerticesMixin(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withFixed(value)</code></li> </ul> </li> <li><code>obj size</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withFixed(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withMode(value)</code></li> </ul> </li> <li><code>obj source</code><ul> <li><code>fn withX(value)</code></li> <li><code>fn withY(value)</code></li> </ul> </li> <li><code>obj sourceOriginal</code><ul> <li><code>fn withX(value)</code></li> <li><code>fn withY(value)</code></li> </ul> </li> <li><code>obj target</code><ul> <li><code>fn withX(value)</code></li> <li><code>fn withY(value)</code></li> </ul> </li> <li><code>obj targetOriginal</code><ul> <li><code>fn withX(value)</code></li> <li><code>fn withY(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fields","title":"Fields","text":""},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withcolormixin","title":"fn withColorMixin","text":"<pre><code>withColorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withpath","title":"fn withPath","text":"<pre><code>withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"straight\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withsize","title":"fn withSize","text":"<pre><code>withSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withsizemixin","title":"fn withSizeMixin","text":"<pre><code>withSizeMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withsource","title":"fn withSource","text":"<pre><code>withSource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withsourcemixin","title":"fn withSourceMixin","text":"<pre><code>withSourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withsourceoriginal","title":"fn withSourceOriginal","text":"<pre><code>withSourceOriginal(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withsourceoriginalmixin","title":"fn withSourceOriginalMixin","text":"<pre><code>withSourceOriginalMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withtarget","title":"fn withTarget","text":"<pre><code>withTarget(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withtargetmixin","title":"fn withTargetMixin","text":"<pre><code>withTargetMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withtargetname","title":"fn withTargetName","text":"<pre><code>withTargetName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withtargetoriginal","title":"fn withTargetOriginal","text":"<pre><code>withTargetOriginal(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withtargetoriginalmixin","title":"fn withTargetOriginalMixin","text":"<pre><code>withTargetOriginalMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withvertices","title":"fn withVertices","text":"<pre><code>withVertices(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-withverticesmixin","title":"fn withVerticesMixin","text":"<pre><code>withVerticesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#obj-color","title":"obj color","text":""},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-colorwithfield","title":"fn color.withField","text":"<pre><code>color.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>fixed: T -- will be added by each element</p>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-colorwithfixed","title":"fn color.withFixed","text":"<pre><code>color.withFixed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>color value</p>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#obj-size","title":"obj size","text":""},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-sizewithfield","title":"fn size.withField","text":"<pre><code>size.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>fixed: T -- will be added by each element</p>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-sizewithfixed","title":"fn size.withFixed","text":"<pre><code>size.withFixed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-sizewithmax","title":"fn size.withMax","text":"<pre><code>size.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-sizewithmin","title":"fn size.withMin","text":"<pre><code>size.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-sizewithmode","title":"fn size.withMode","text":"<pre><code>size.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"quad\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#obj-source","title":"obj source","text":""},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-sourcewithx","title":"fn source.withX","text":"<pre><code>source.withX(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-sourcewithy","title":"fn source.withY","text":"<pre><code>source.withY(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#obj-sourceoriginal","title":"obj sourceOriginal","text":""},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-sourceoriginalwithx","title":"fn sourceOriginal.withX","text":"<pre><code>sourceOriginal.withX(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-sourceoriginalwithy","title":"fn sourceOriginal.withY","text":"<pre><code>sourceOriginal.withY(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#obj-target","title":"obj target","text":""},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-targetwithx","title":"fn target.withX","text":"<pre><code>target.withX(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-targetwithy","title":"fn target.withY","text":"<pre><code>target.withY(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#obj-targetoriginal","title":"obj targetOriginal","text":""},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-targetoriginalwithx","title":"fn targetOriginal.withX","text":"<pre><code>targetOriginal.withX(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/index.html#fn-targetoriginalwithy","title":"fn targetOriginal.withY","text":"<pre><code>targetOriginal.withY(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/vertices.html","title":"vertices","text":""},{"location":"API/panel/canvas/options/root/elements/connections/vertices.html#index","title":"Index","text":"<ul> <li><code>fn withX(value)</code></li> <li><code>fn withY(value)</code></li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/vertices.html#fields","title":"Fields","text":""},{"location":"API/panel/canvas/options/root/elements/connections/vertices.html#fn-withx","title":"fn withX","text":"<pre><code>withX(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/options/root/elements/connections/vertices.html#fn-withy","title":"fn withY","text":"<pre><code>withY(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/canvas/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/canvas/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/canvas/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/canvas/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/canvas/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/canvas/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/canvas/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/canvas/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/canvas/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/canvas/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/canvas/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/canvas/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/canvas/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/canvas/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/canvas/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/canvas/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/canvas/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/canvas/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/canvas/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/canvas/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/canvas/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/canvas/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/canvas/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/canvas/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/canvas/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/canvas/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/canvas/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/canvas/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/canvas/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/canvas/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/canvas/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/canvas/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/canvas/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/canvas/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/canvas/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/canvas/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/canvas/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/canvas/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/canvas/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/canvas/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/canvas/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/canvas/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/canvas/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/canvas/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/canvas/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/canvas/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/canvas/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/canvas/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/canvas/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/canvas/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/canvas/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/canvas/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/canvas/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/canvas/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/canvas/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/canvas/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/canvas/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/canvas/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/canvas/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/canvas/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/canvas/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/canvas/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/canvas/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/dashboardList/index.html","title":"dashboardList","text":"<p>grafonnet.panel.dashboardList</p>"},{"location":"API/panel/dashboardList/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/dashboardList/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withFolderId(value)</code></li> <li><code>fn withFolderUID(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withMaxItems(value=10)</code></li> <li><code>fn withQuery(value=\"\")</code></li> <li><code>fn withShowHeadings(value=true)</code></li> <li><code>fn withShowRecentlyViewed(value=true)</code></li> <li><code>fn withShowSearch(value=true)</code></li> <li><code>fn withShowStarred(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/dashboardList/index.html#fields","title":"Fields","text":""},{"location":"API/panel/dashboardList/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new dashboardList panel with a title.</p>"},{"location":"API/panel/dashboardList/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/dashboardList/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/dashboardList/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/dashboardList/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/dashboardList/index.html#fn-optionswithfolderid","title":"fn options.withFolderId","text":"<pre><code>options.withFolderId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>folderId is deprecated, and migrated to folderUid on panel init</p>"},{"location":"API/panel/dashboardList/index.html#fn-optionswithfolderuid","title":"fn options.withFolderUID","text":"<pre><code>options.withFolderUID(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/dashboardList/index.html#fn-optionswithincludevars","title":"fn options.withIncludeVars","text":"<pre><code>options.withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/dashboardList/index.html#fn-optionswithkeeptime","title":"fn options.withKeepTime","text":"<pre><code>options.withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/dashboardList/index.html#fn-optionswithmaxitems","title":"fn options.withMaxItems","text":"<pre><code>options.withMaxItems(value=10)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>10</code></li> </ul> </li> </ul>"},{"location":"API/panel/dashboardList/index.html#fn-optionswithquery","title":"fn options.withQuery","text":"<pre><code>options.withQuery(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/dashboardList/index.html#fn-optionswithshowheadings","title":"fn options.withShowHeadings","text":"<pre><code>options.withShowHeadings(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/dashboardList/index.html#fn-optionswithshowrecentlyviewed","title":"fn options.withShowRecentlyViewed","text":"<pre><code>options.withShowRecentlyViewed(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/dashboardList/index.html#fn-optionswithshowsearch","title":"fn options.withShowSearch","text":"<pre><code>options.withShowSearch(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/dashboardList/index.html#fn-optionswithshowstarred","title":"fn options.withShowStarred","text":"<pre><code>options.withShowStarred(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/dashboardList/index.html#fn-optionswithtags","title":"fn options.withTags","text":"<pre><code>options.withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/dashboardList/index.html#fn-optionswithtagsmixin","title":"fn options.withTagsMixin","text":"<pre><code>options.withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/dashboardList/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/dashboardList/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/dashboardList/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/dashboardList/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/dashboardList/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/dashboardList/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/dashboardList/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/dashboardList/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/dashboardList/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/dashboardList/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/dashboardList/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/dashboardList/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/dashboardList/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/dashboardList/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/dashboardList/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/dashboardList/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/dashboardList/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/dashboardList/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/dashboardList/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/dashboardList/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/dashboardList/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/dashboardList/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/dashboardList/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/dashboardList/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/dashboardList/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/dashboardList/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/dashboardList/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/dashboardList/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/dashboardList/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/dashboardList/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/dashboardList/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/dashboardList/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/dashboardList/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/dashboardList/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/dashboardList/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/dashboardList/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/dashboardList/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/dashboardList/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/dashboardList/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/dashboardList/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/dashboardList/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/dashboardList/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/dashboardList/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/dashboardList/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/dashboardList/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/dashboardList/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/dashboardList/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/dashboardList/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/dashboardList/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/dashboardList/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/dashboardList/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/dashboardList/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/dashboardList/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/dashboardList/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/dashboardList/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/dashboardList/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/dashboardList/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/dashboardList/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/dashboardList/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/dashboardList/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/dashboardList/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/dashboardList/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/dashboardList/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/dashboardList/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/dashboardList/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/dashboardList/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/dashboardList/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/dashboardList/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/dashboardList/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/dashboardList/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/dashboardList/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/dashboardList/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/dashboardList/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/dashboardList/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/dashboardList/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/datagrid/index.html","title":"datagrid","text":"<p>grafonnet.panel.datagrid</p>"},{"location":"API/panel/datagrid/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/datagrid/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withSelectedSeries(value=0)</code></li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/datagrid/index.html#fields","title":"Fields","text":""},{"location":"API/panel/datagrid/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new datagrid panel with a title.</p>"},{"location":"API/panel/datagrid/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/datagrid/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/datagrid/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/datagrid/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/datagrid/index.html#fn-optionswithselectedseries","title":"fn options.withSelectedSeries","text":"<pre><code>options.withSelectedSeries(value=0)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>0</code></li> </ul> </li> </ul>"},{"location":"API/panel/datagrid/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/datagrid/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/datagrid/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/datagrid/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/datagrid/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/datagrid/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/datagrid/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/datagrid/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/datagrid/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/datagrid/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/datagrid/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/datagrid/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/datagrid/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/datagrid/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/datagrid/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/datagrid/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/datagrid/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/datagrid/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/datagrid/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/datagrid/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/datagrid/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/datagrid/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/datagrid/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/datagrid/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/datagrid/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/datagrid/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/datagrid/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/datagrid/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/datagrid/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/datagrid/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/datagrid/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/datagrid/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/datagrid/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/datagrid/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/datagrid/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/datagrid/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/datagrid/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/datagrid/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/datagrid/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/datagrid/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/datagrid/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/datagrid/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/datagrid/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/datagrid/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/datagrid/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/datagrid/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/datagrid/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/datagrid/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/datagrid/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/datagrid/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/datagrid/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/datagrid/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/datagrid/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/datagrid/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/datagrid/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/datagrid/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/datagrid/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/datagrid/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/datagrid/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/datagrid/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/datagrid/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/datagrid/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/datagrid/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/datagrid/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/datagrid/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/datagrid/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/datagrid/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/datagrid/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/datagrid/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/datagrid/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/datagrid/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/datagrid/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/datagrid/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/datagrid/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/datagrid/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/datagrid/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/datagrid/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/datagrid/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/datagrid/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/datagrid/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/datagrid/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/datagrid/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/datagrid/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/datagrid/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/datagrid/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/datagrid/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/datagrid/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/datagrid/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/datagrid/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/datagrid/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/debug/index.html","title":"debug","text":"<p>grafonnet.panel.debug</p>"},{"location":"API/panel/debug/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/debug/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withCounters(value)</code></li> <li><code>fn withCountersMixin(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>obj counters</code><ul> <li><code>fn withDataChanged(value=true)</code></li> <li><code>fn withRender(value=true)</code></li> <li><code>fn withSchemaChanged(value=true)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/debug/index.html#fields","title":"Fields","text":""},{"location":"API/panel/debug/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new debug panel with a title.</p>"},{"location":"API/panel/debug/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/debug/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/debug/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/debug/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/debug/index.html#fn-optionswithcounters","title":"fn options.withCounters","text":"<pre><code>options.withCounters(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/debug/index.html#fn-optionswithcountersmixin","title":"fn options.withCountersMixin","text":"<pre><code>options.withCountersMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/debug/index.html#fn-optionswithmode","title":"fn options.withMode","text":"<pre><code>options.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"render\"</code>, <code>\"events\"</code>, <code>\"cursor\"</code>, <code>\"State\"</code>, <code>\"ThrowError\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/debug/index.html#obj-optionscounters","title":"obj options.counters","text":""},{"location":"API/panel/debug/index.html#fn-optionscounterswithdatachanged","title":"fn options.counters.withDataChanged","text":"<pre><code>options.counters.withDataChanged(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/debug/index.html#fn-optionscounterswithrender","title":"fn options.counters.withRender","text":"<pre><code>options.counters.withRender(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/debug/index.html#fn-optionscounterswithschemachanged","title":"fn options.counters.withSchemaChanged","text":"<pre><code>options.counters.withSchemaChanged(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/debug/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/debug/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/debug/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/debug/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/debug/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/debug/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/debug/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/debug/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/debug/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/debug/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/debug/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/debug/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/debug/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/debug/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/debug/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/debug/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/debug/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/debug/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/debug/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/debug/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/debug/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/debug/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/debug/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/debug/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/debug/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/debug/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/debug/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/debug/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/debug/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/debug/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/debug/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/debug/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/debug/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/debug/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/debug/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/debug/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/debug/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/debug/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/debug/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/debug/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/debug/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/debug/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/debug/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/debug/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/debug/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/debug/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/debug/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/debug/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/debug/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/debug/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/debug/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/debug/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/debug/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/debug/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/debug/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/debug/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/debug/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/debug/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/debug/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/debug/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/debug/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/debug/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/debug/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/debug/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/debug/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/debug/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/debug/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/debug/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/debug/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/debug/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/debug/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/debug/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/debug/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/debug/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/debug/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/debug/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/debug/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/debug/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/debug/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/debug/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/debug/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/debug/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/debug/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/debug/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/debug/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/debug/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/debug/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/debug/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/debug/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/debug/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/debug/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/debug/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/debug/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/debug/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/debug/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/debug/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/debug/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/debug/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/debug/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/debug/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/debug/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/debug/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/debug/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/debug/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/debug/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/gauge/index.html","title":"gauge","text":"<p>grafonnet.panel.gauge</p>"},{"location":"API/panel/gauge/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/gauge/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withMinVizHeight(value=75)</code></li> <li><code>fn withMinVizWidth(value=75)</code></li> <li><code>fn withOrientation(value)</code></li> <li><code>fn withReduceOptions(value)</code></li> <li><code>fn withReduceOptionsMixin(value)</code></li> <li><code>fn withShowThresholdLabels(value=true)</code></li> <li><code>fn withShowThresholdMarkers(value=true)</code></li> <li><code>fn withSizing(value)</code></li> <li><code>fn withText(value)</code></li> <li><code>fn withTextMixin(value)</code></li> <li><code>obj reduceOptions</code><ul> <li><code>fn withCalcs(value)</code></li> <li><code>fn withCalcsMixin(value)</code></li> <li><code>fn withFields(value)</code></li> <li><code>fn withLimit(value)</code></li> <li><code>fn withValues(value=true)</code></li> </ul> </li> <li><code>obj text</code><ul> <li><code>fn withTitleSize(value)</code></li> <li><code>fn withValueSize(value)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/gauge/index.html#fields","title":"Fields","text":""},{"location":"API/panel/gauge/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new gauge panel with a title.</p>"},{"location":"API/panel/gauge/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/gauge/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/gauge/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/gauge/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/gauge/index.html#fn-optionswithminvizheight","title":"fn options.withMinVizHeight","text":"<pre><code>options.withMinVizHeight(value=75)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>75</code></li> </ul> </li> </ul>"},{"location":"API/panel/gauge/index.html#fn-optionswithminvizwidth","title":"fn options.withMinVizWidth","text":"<pre><code>options.withMinVizWidth(value=75)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>75</code></li> </ul> </li> </ul>"},{"location":"API/panel/gauge/index.html#fn-optionswithorientation","title":"fn options.withOrientation","text":"<pre><code>options.withOrientation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"vertical\"</code>, <code>\"horizontal\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/gauge/index.html#fn-optionswithreduceoptions","title":"fn options.withReduceOptions","text":"<pre><code>options.withReduceOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/gauge/index.html#fn-optionswithreduceoptionsmixin","title":"fn options.withReduceOptionsMixin","text":"<pre><code>options.withReduceOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/gauge/index.html#fn-optionswithshowthresholdlabels","title":"fn options.withShowThresholdLabels","text":"<pre><code>options.withShowThresholdLabels(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/gauge/index.html#fn-optionswithshowthresholdmarkers","title":"fn options.withShowThresholdMarkers","text":"<pre><code>options.withShowThresholdMarkers(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/gauge/index.html#fn-optionswithsizing","title":"fn options.withSizing","text":"<pre><code>options.withSizing(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"manual\"</code></li> </ul> </li> </ul> <p>Allows for the bar gauge size to be set explicitly</p>"},{"location":"API/panel/gauge/index.html#fn-optionswithtext","title":"fn options.withText","text":"<pre><code>options.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/gauge/index.html#fn-optionswithtextmixin","title":"fn options.withTextMixin","text":"<pre><code>options.withTextMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/gauge/index.html#obj-optionsreduceoptions","title":"obj options.reduceOptions","text":""},{"location":"API/panel/gauge/index.html#fn-optionsreduceoptionswithcalcs","title":"fn options.reduceOptions.withCalcs","text":"<pre><code>options.reduceOptions.withCalcs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>When !values, pick one value for the whole field</p>"},{"location":"API/panel/gauge/index.html#fn-optionsreduceoptionswithcalcsmixin","title":"fn options.reduceOptions.withCalcsMixin","text":"<pre><code>options.reduceOptions.withCalcsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>When !values, pick one value for the whole field</p>"},{"location":"API/panel/gauge/index.html#fn-optionsreduceoptionswithfields","title":"fn options.reduceOptions.withFields","text":"<pre><code>options.reduceOptions.withFields(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Which fields to show.  By default this is only numeric fields</p>"},{"location":"API/panel/gauge/index.html#fn-optionsreduceoptionswithlimit","title":"fn options.reduceOptions.withLimit","text":"<pre><code>options.reduceOptions.withLimit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>if showing all values limit</p>"},{"location":"API/panel/gauge/index.html#fn-optionsreduceoptionswithvalues","title":"fn options.reduceOptions.withValues","text":"<pre><code>options.reduceOptions.withValues(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true show each row value</p>"},{"location":"API/panel/gauge/index.html#obj-optionstext","title":"obj options.text","text":""},{"location":"API/panel/gauge/index.html#fn-optionstextwithtitlesize","title":"fn options.text.withTitleSize","text":"<pre><code>options.text.withTitleSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Explicit title text size</p>"},{"location":"API/panel/gauge/index.html#fn-optionstextwithvaluesize","title":"fn options.text.withValueSize","text":"<pre><code>options.text.withValueSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Explicit value text size</p>"},{"location":"API/panel/gauge/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/gauge/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/gauge/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/gauge/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/gauge/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/gauge/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/gauge/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/gauge/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/gauge/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/gauge/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/gauge/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/gauge/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/gauge/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/gauge/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/gauge/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/gauge/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/gauge/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/gauge/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/gauge/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/gauge/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/gauge/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/gauge/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/gauge/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/gauge/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/gauge/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/gauge/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/gauge/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/gauge/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/gauge/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/gauge/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/gauge/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/gauge/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/gauge/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/gauge/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/gauge/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/gauge/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/gauge/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/gauge/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/gauge/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/gauge/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/gauge/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/gauge/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/gauge/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/gauge/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/gauge/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/gauge/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/gauge/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/gauge/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/gauge/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/gauge/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/gauge/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/gauge/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/gauge/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/gauge/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/gauge/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/gauge/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/gauge/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/gauge/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/gauge/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/gauge/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/gauge/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/gauge/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/gauge/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/gauge/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/gauge/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/gauge/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/gauge/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/gauge/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/gauge/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/gauge/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/gauge/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/gauge/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/gauge/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/gauge/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/gauge/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/gauge/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/gauge/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/gauge/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/gauge/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/gauge/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/gauge/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/gauge/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/gauge/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/gauge/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/gauge/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/gauge/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/gauge/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/gauge/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/gauge/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/gauge/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/gauge/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/gauge/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/gauge/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/geomap/index.html","title":"geomap","text":"<p>grafonnet.panel.geomap</p>"},{"location":"API/panel/geomap/index.html#subpackages","title":"Subpackages","text":"<ul> <li>options.layers</li> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/geomap/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withBasemap(value)</code></li> <li><code>fn withBasemapMixin(value)</code></li> <li><code>fn withControls(value)</code></li> <li><code>fn withControlsMixin(value)</code></li> <li><code>fn withLayers(value)</code></li> <li><code>fn withLayersMixin(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withTooltipMixin(value)</code></li> <li><code>fn withView(value)</code></li> <li><code>fn withViewMixin(value)</code></li> <li><code>obj basemap</code><ul> <li><code>fn withConfig(value)</code></li> <li><code>fn withConfigMixin(value)</code></li> <li><code>fn withFilterData(value)</code></li> <li><code>fn withFilterDataMixin(value)</code></li> <li><code>fn withLocation(value)</code></li> <li><code>fn withLocationMixin(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>fn withOpacity(value)</code></li> <li><code>fn withTooltip(value=true)</code></li> <li><code>fn withType(value)</code></li> <li><code>obj location</code><ul> <li><code>fn withGazetteer(value)</code></li> <li><code>fn withGeohash(value)</code></li> <li><code>fn withLatitude(value)</code></li> <li><code>fn withLongitude(value)</code></li> <li><code>fn withLookup(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withWkt(value)</code></li> </ul> </li> </ul> </li> <li><code>obj controls</code><ul> <li><code>fn withMouseWheelZoom(value=true)</code></li> <li><code>fn withShowAttribution(value=true)</code></li> <li><code>fn withShowDebug(value=true)</code></li> <li><code>fn withShowMeasure(value=true)</code></li> <li><code>fn withShowScale(value=true)</code></li> <li><code>fn withShowZoom(value=true)</code></li> </ul> </li> <li><code>obj tooltip</code><ul> <li><code>fn withMode(value)</code></li> </ul> </li> <li><code>obj view</code><ul> <li><code>fn withAllLayers(value=true)</code></li> <li><code>fn withId(value=\"zero\")</code></li> <li><code>fn withLastOnly(value=true)</code></li> <li><code>fn withLat(value=0)</code></li> <li><code>fn withLayer(value)</code></li> <li><code>fn withLon(value=0)</code></li> <li><code>fn withMaxZoom(value)</code></li> <li><code>fn withMinZoom(value)</code></li> <li><code>fn withPadding(value)</code></li> <li><code>fn withShared(value=true)</code></li> <li><code>fn withZoom(value=1)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/geomap/index.html#fields","title":"Fields","text":""},{"location":"API/panel/geomap/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new geomap panel with a title.</p>"},{"location":"API/panel/geomap/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/geomap/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/geomap/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/geomap/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/geomap/index.html#fn-optionswithbasemap","title":"fn options.withBasemap","text":"<pre><code>options.withBasemap(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionswithbasemapmixin","title":"fn options.withBasemapMixin","text":"<pre><code>options.withBasemapMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionswithcontrols","title":"fn options.withControls","text":"<pre><code>options.withControls(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionswithcontrolsmixin","title":"fn options.withControlsMixin","text":"<pre><code>options.withControlsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionswithlayers","title":"fn options.withLayers","text":"<pre><code>options.withLayers(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionswithlayersmixin","title":"fn options.withLayersMixin","text":"<pre><code>options.withLayersMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionswithtooltip","title":"fn options.withTooltip","text":"<pre><code>options.withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionswithtooltipmixin","title":"fn options.withTooltipMixin","text":"<pre><code>options.withTooltipMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionswithview","title":"fn options.withView","text":"<pre><code>options.withView(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionswithviewmixin","title":"fn options.withViewMixin","text":"<pre><code>options.withViewMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#obj-optionsbasemap","title":"obj options.basemap","text":""},{"location":"API/panel/geomap/index.html#fn-optionsbasemapwithconfig","title":"fn options.basemap.withConfig","text":"<pre><code>options.basemap.withConfig(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Custom options depending on the type</p>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemapwithconfigmixin","title":"fn options.basemap.withConfigMixin","text":"<pre><code>options.basemap.withConfigMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Custom options depending on the type</p>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemapwithfilterdata","title":"fn options.basemap.withFilterData","text":"<pre><code>options.basemap.withFilterData(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Defines a frame MatcherConfig that may filter data for the given layer</p>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemapwithfilterdatamixin","title":"fn options.basemap.withFilterDataMixin","text":"<pre><code>options.basemap.withFilterDataMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Defines a frame MatcherConfig that may filter data for the given layer</p>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemapwithlocation","title":"fn options.basemap.withLocation","text":"<pre><code>options.basemap.withLocation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemapwithlocationmixin","title":"fn options.basemap.withLocationMixin","text":"<pre><code>options.basemap.withLocationMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemapwithname","title":"fn options.basemap.withName","text":"<pre><code>options.basemap.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>configured unique display name</p>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemapwithopacity","title":"fn options.basemap.withOpacity","text":"<pre><code>options.basemap.withOpacity(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Common properties: https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html Layer opacity (0-1)</p>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemapwithtooltip","title":"fn options.basemap.withTooltip","text":"<pre><code>options.basemap.withTooltip(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Check tooltip (defaults to true)</p>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemapwithtype","title":"fn options.basemap.withType","text":"<pre><code>options.basemap.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#obj-optionsbasemaplocation","title":"obj options.basemap.location","text":""},{"location":"API/panel/geomap/index.html#fn-optionsbasemaplocationwithgazetteer","title":"fn options.basemap.location.withGazetteer","text":"<pre><code>options.basemap.location.withGazetteer(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Path to Gazetteer</p>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemaplocationwithgeohash","title":"fn options.basemap.location.withGeohash","text":"<pre><code>options.basemap.location.withGeohash(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Field mappings</p>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemaplocationwithlatitude","title":"fn options.basemap.location.withLatitude","text":"<pre><code>options.basemap.location.withLatitude(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemaplocationwithlongitude","title":"fn options.basemap.location.withLongitude","text":"<pre><code>options.basemap.location.withLongitude(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemaplocationwithlookup","title":"fn options.basemap.location.withLookup","text":"<pre><code>options.basemap.location.withLookup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemaplocationwithmode","title":"fn options.basemap.location.withMode","text":"<pre><code>options.basemap.location.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"geohash\"</code>, <code>\"coords\"</code>, <code>\"lookup\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsbasemaplocationwithwkt","title":"fn options.basemap.location.withWkt","text":"<pre><code>options.basemap.location.withWkt(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#obj-optionscontrols","title":"obj options.controls","text":""},{"location":"API/panel/geomap/index.html#fn-optionscontrolswithmousewheelzoom","title":"fn options.controls.withMouseWheelZoom","text":"<pre><code>options.controls.withMouseWheelZoom(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>let the mouse wheel zoom</p>"},{"location":"API/panel/geomap/index.html#fn-optionscontrolswithshowattribution","title":"fn options.controls.withShowAttribution","text":"<pre><code>options.controls.withShowAttribution(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Lower right</p>"},{"location":"API/panel/geomap/index.html#fn-optionscontrolswithshowdebug","title":"fn options.controls.withShowDebug","text":"<pre><code>options.controls.withShowDebug(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Show debug</p>"},{"location":"API/panel/geomap/index.html#fn-optionscontrolswithshowmeasure","title":"fn options.controls.withShowMeasure","text":"<pre><code>options.controls.withShowMeasure(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Show measure</p>"},{"location":"API/panel/geomap/index.html#fn-optionscontrolswithshowscale","title":"fn options.controls.withShowScale","text":"<pre><code>options.controls.withShowScale(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Scale options</p>"},{"location":"API/panel/geomap/index.html#fn-optionscontrolswithshowzoom","title":"fn options.controls.withShowZoom","text":"<pre><code>options.controls.withShowZoom(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Zoom (upper left)</p>"},{"location":"API/panel/geomap/index.html#obj-optionstooltip","title":"obj options.tooltip","text":""},{"location":"API/panel/geomap/index.html#fn-optionstooltipwithmode","title":"fn options.tooltip.withMode","text":"<pre><code>options.tooltip.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"details\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/geomap/index.html#obj-optionsview","title":"obj options.view","text":""},{"location":"API/panel/geomap/index.html#fn-optionsviewwithalllayers","title":"fn options.view.withAllLayers","text":"<pre><code>options.view.withAllLayers(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsviewwithid","title":"fn options.view.withId","text":"<pre><code>options.view.withId(value=\"zero\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"zero\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsviewwithlastonly","title":"fn options.view.withLastOnly","text":"<pre><code>options.view.withLastOnly(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsviewwithlat","title":"fn options.view.withLat","text":"<pre><code>options.view.withLat(value=0)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>0</code></li> </ul> </li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsviewwithlayer","title":"fn options.view.withLayer","text":"<pre><code>options.view.withLayer(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsviewwithlon","title":"fn options.view.withLon","text":"<pre><code>options.view.withLon(value=0)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>0</code></li> </ul> </li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsviewwithmaxzoom","title":"fn options.view.withMaxZoom","text":"<pre><code>options.view.withMaxZoom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsviewwithminzoom","title":"fn options.view.withMinZoom","text":"<pre><code>options.view.withMinZoom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsviewwithpadding","title":"fn options.view.withPadding","text":"<pre><code>options.view.withPadding(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsviewwithshared","title":"fn options.view.withShared","text":"<pre><code>options.view.withShared(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/geomap/index.html#fn-optionsviewwithzoom","title":"fn options.view.withZoom","text":"<pre><code>options.view.withZoom(value=1)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>1</code></li> </ul> </li> </ul>"},{"location":"API/panel/geomap/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/geomap/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/geomap/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/geomap/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/geomap/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/geomap/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/geomap/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/geomap/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/geomap/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/geomap/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/geomap/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/geomap/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/geomap/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/geomap/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/geomap/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/geomap/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/geomap/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/geomap/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/geomap/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/geomap/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/geomap/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/geomap/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/geomap/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/geomap/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/geomap/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/geomap/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/geomap/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/geomap/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/geomap/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/geomap/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/geomap/options/layers.html","title":"layers","text":""},{"location":"API/panel/geomap/options/layers.html#index","title":"Index","text":"<ul> <li><code>fn withConfig(value)</code></li> <li><code>fn withConfigMixin(value)</code></li> <li><code>fn withFilterData(value)</code></li> <li><code>fn withFilterDataMixin(value)</code></li> <li><code>fn withLocation(value)</code></li> <li><code>fn withLocationMixin(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>fn withOpacity(value)</code></li> <li><code>fn withTooltip(value=true)</code></li> <li><code>fn withType(value)</code></li> <li><code>obj location</code><ul> <li><code>fn withGazetteer(value)</code></li> <li><code>fn withGeohash(value)</code></li> <li><code>fn withLatitude(value)</code></li> <li><code>fn withLongitude(value)</code></li> <li><code>fn withLookup(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withWkt(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/geomap/options/layers.html#fields","title":"Fields","text":""},{"location":"API/panel/geomap/options/layers.html#fn-withconfig","title":"fn withConfig","text":"<pre><code>withConfig(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Custom options depending on the type</p>"},{"location":"API/panel/geomap/options/layers.html#fn-withconfigmixin","title":"fn withConfigMixin","text":"<pre><code>withConfigMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Custom options depending on the type</p>"},{"location":"API/panel/geomap/options/layers.html#fn-withfilterdata","title":"fn withFilterData","text":"<pre><code>withFilterData(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Defines a frame MatcherConfig that may filter data for the given layer</p>"},{"location":"API/panel/geomap/options/layers.html#fn-withfilterdatamixin","title":"fn withFilterDataMixin","text":"<pre><code>withFilterDataMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Defines a frame MatcherConfig that may filter data for the given layer</p>"},{"location":"API/panel/geomap/options/layers.html#fn-withlocation","title":"fn withLocation","text":"<pre><code>withLocation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/geomap/options/layers.html#fn-withlocationmixin","title":"fn withLocationMixin","text":"<pre><code>withLocationMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/geomap/options/layers.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>configured unique display name</p>"},{"location":"API/panel/geomap/options/layers.html#fn-withopacity","title":"fn withOpacity","text":"<pre><code>withOpacity(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Common properties: https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html Layer opacity (0-1)</p>"},{"location":"API/panel/geomap/options/layers.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Check tooltip (defaults to true)</p>"},{"location":"API/panel/geomap/options/layers.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/geomap/options/layers.html#obj-location","title":"obj location","text":""},{"location":"API/panel/geomap/options/layers.html#fn-locationwithgazetteer","title":"fn location.withGazetteer","text":"<pre><code>location.withGazetteer(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Path to Gazetteer</p>"},{"location":"API/panel/geomap/options/layers.html#fn-locationwithgeohash","title":"fn location.withGeohash","text":"<pre><code>location.withGeohash(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Field mappings</p>"},{"location":"API/panel/geomap/options/layers.html#fn-locationwithlatitude","title":"fn location.withLatitude","text":"<pre><code>location.withLatitude(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/geomap/options/layers.html#fn-locationwithlongitude","title":"fn location.withLongitude","text":"<pre><code>location.withLongitude(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/geomap/options/layers.html#fn-locationwithlookup","title":"fn location.withLookup","text":"<pre><code>location.withLookup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/geomap/options/layers.html#fn-locationwithmode","title":"fn location.withMode","text":"<pre><code>location.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"geohash\"</code>, <code>\"coords\"</code>, <code>\"lookup\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/geomap/options/layers.html#fn-locationwithwkt","title":"fn location.withWkt","text":"<pre><code>location.withWkt(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/geomap/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/geomap/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/geomap/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/geomap/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/geomap/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/geomap/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/geomap/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/geomap/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/geomap/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/geomap/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/geomap/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/geomap/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/geomap/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/geomap/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/geomap/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/geomap/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/geomap/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/geomap/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/geomap/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/geomap/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/geomap/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/geomap/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/geomap/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/geomap/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/geomap/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/geomap/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/geomap/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/geomap/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/geomap/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/geomap/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/geomap/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/geomap/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/geomap/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/geomap/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/geomap/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/geomap/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/geomap/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/geomap/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/geomap/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/geomap/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/geomap/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/geomap/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/geomap/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/geomap/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/geomap/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/geomap/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/geomap/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/geomap/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/geomap/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/geomap/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/geomap/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/geomap/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/geomap/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/geomap/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/geomap/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/geomap/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/geomap/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/geomap/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/geomap/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/geomap/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/geomap/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/geomap/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/geomap/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/heatmap/index.html","title":"heatmap","text":"<p>grafonnet.panel.heatmap</p>"},{"location":"API/panel/heatmap/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/heatmap/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj fieldConfig</code><ul> <li><code>obj defaults</code><ul> <li><code>obj custom</code><ul> <li><code>fn withHideFrom(value)</code></li> <li><code>fn withHideFromMixin(value)</code></li> <li><code>fn withScaleDistribution(value)</code></li> <li><code>fn withScaleDistributionMixin(value)</code></li> <li><code>obj hideFrom</code><ul> <li><code>fn withLegend(value=true)</code></li> <li><code>fn withTooltip(value=true)</code></li> <li><code>fn withViz(value=true)</code></li> </ul> </li> <li><code>obj scaleDistribution</code><ul> <li><code>fn withLinearThreshold(value)</code></li> <li><code>fn withLog(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withCalculate(value=true)</code></li> <li><code>fn withCalculation(value)</code></li> <li><code>fn withCalculationMixin(value)</code></li> <li><code>fn withCellGap(value=1)</code></li> <li><code>fn withCellRadius(value)</code></li> <li><code>fn withCellValues(value)</code></li> <li><code>fn withCellValuesMixin(value)</code></li> <li><code>fn withColor(value)</code></li> <li><code>fn withColorMixin(value)</code></li> <li><code>fn withExemplars(value)</code></li> <li><code>fn withExemplarsMixin(value)</code></li> <li><code>fn withFilterValues(value)</code></li> <li><code>fn withFilterValuesMixin(value)</code></li> <li><code>fn withLegend(value)</code></li> <li><code>fn withLegendMixin(value)</code></li> <li><code>fn withRowsFrame(value)</code></li> <li><code>fn withRowsFrameMixin(value)</code></li> <li><code>fn withShowValue(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withTooltipMixin(value)</code></li> <li><code>fn withYAxis(value)</code></li> <li><code>fn withYAxisMixin(value)</code></li> <li><code>obj calculation</code><ul> <li><code>fn withXBuckets(value)</code></li> <li><code>fn withXBucketsMixin(value)</code></li> <li><code>fn withYBuckets(value)</code></li> <li><code>fn withYBucketsMixin(value)</code></li> <li><code>obj xBuckets</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withScale(value)</code></li> <li><code>fn withScaleMixin(value)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj scale</code><ul> <li><code>fn withLinearThreshold(value)</code></li> <li><code>fn withLog(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> </ul> </li> <li><code>obj yBuckets</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withScale(value)</code></li> <li><code>fn withScaleMixin(value)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj scale</code><ul> <li><code>fn withLinearThreshold(value)</code></li> <li><code>fn withLog(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj cellValues</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withUnit(value)</code></li> </ul> </li> <li><code>obj color</code><ul> <li><code>fn withExponent(value)</code></li> <li><code>fn withFill(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withReverse(value=true)</code></li> <li><code>fn withScale(value)</code></li> <li><code>fn withScheme(value)</code></li> <li><code>fn withSteps(value)</code></li> </ul> </li> <li><code>obj exemplars</code><ul> <li><code>fn withColor(value)</code></li> </ul> </li> <li><code>obj filterValues</code><ul> <li><code>fn withGe(value)</code></li> <li><code>fn withLe(value)</code></li> </ul> </li> <li><code>obj legend</code><ul> <li><code>fn withShow(value=true)</code></li> </ul> </li> <li><code>obj rowsFrame</code><ul> <li><code>fn withLayout(value)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj tooltip</code><ul> <li><code>fn withMaxHeight(value)</code></li> <li><code>fn withMaxWidth(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withShowColorScale(value=true)</code></li> <li><code>fn withYHistogram(value=true)</code></li> </ul> </li> <li><code>obj yAxis</code><ul> <li><code>fn withAxisBorderShow(value=true)</code></li> <li><code>fn withAxisCenteredZero(value=true)</code></li> <li><code>fn withAxisColorMode(value)</code></li> <li><code>fn withAxisGridShow(value=true)</code></li> <li><code>fn withAxisLabel(value)</code></li> <li><code>fn withAxisPlacement(value)</code></li> <li><code>fn withAxisSoftMax(value)</code></li> <li><code>fn withAxisSoftMin(value)</code></li> <li><code>fn withAxisWidth(value)</code></li> <li><code>fn withDecimals(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withReverse(value=true)</code></li> <li><code>fn withScaleDistribution(value)</code></li> <li><code>fn withScaleDistributionMixin(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj scaleDistribution</code><ul> <li><code>fn withLinearThreshold(value)</code></li> <li><code>fn withLog(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/heatmap/index.html#fields","title":"Fields","text":""},{"location":"API/panel/heatmap/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new heatmap panel with a title.</p>"},{"location":"API/panel/heatmap/index.html#obj-fieldconfig","title":"obj fieldConfig","text":""},{"location":"API/panel/heatmap/index.html#obj-fieldconfigdefaults","title":"obj fieldConfig.defaults","text":""},{"location":"API/panel/heatmap/index.html#obj-fieldconfigdefaultscustom","title":"obj fieldConfig.defaults.custom","text":""},{"location":"API/panel/heatmap/index.html#fn-fieldconfigdefaultscustomwithhidefrom","title":"fn fieldConfig.defaults.custom.withHideFrom","text":"<pre><code>fieldConfig.defaults.custom.withHideFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#fn-fieldconfigdefaultscustomwithhidefrommixin","title":"fn fieldConfig.defaults.custom.withHideFromMixin","text":"<pre><code>fieldConfig.defaults.custom.withHideFromMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#fn-fieldconfigdefaultscustomwithscaledistribution","title":"fn fieldConfig.defaults.custom.withScaleDistribution","text":"<pre><code>fieldConfig.defaults.custom.withScaleDistribution(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#fn-fieldconfigdefaultscustomwithscaledistributionmixin","title":"fn fieldConfig.defaults.custom.withScaleDistributionMixin","text":"<pre><code>fieldConfig.defaults.custom.withScaleDistributionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#obj-fieldconfigdefaultscustomhidefrom","title":"obj fieldConfig.defaults.custom.hideFrom","text":""},{"location":"API/panel/heatmap/index.html#fn-fieldconfigdefaultscustomhidefromwithlegend","title":"# fn fieldConfig.defaults.custom.hideFrom.withLegend","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-fieldconfigdefaultscustomhidefromwithtooltip","title":"# fn fieldConfig.defaults.custom.hideFrom.withTooltip","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withTooltip(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-fieldconfigdefaultscustomhidefromwithviz","title":"# fn fieldConfig.defaults.custom.hideFrom.withViz","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withViz(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/heatmap/index.html#obj-fieldconfigdefaultscustomscaledistribution","title":"obj fieldConfig.defaults.custom.scaleDistribution","text":""},{"location":"API/panel/heatmap/index.html#fn-fieldconfigdefaultscustomscaledistributionwithlinearthreshold","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withLinearThreshold","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withLinearThreshold(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-fieldconfigdefaultscustomscaledistributionwithlog","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withLog","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withLog(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-fieldconfigdefaultscustomscaledistributionwithtype","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withType","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"log\"</code>, <code>\"ordinal\"</code>, <code>\"symlog\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/heatmap/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/heatmap/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/heatmap/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/heatmap/index.html#fn-optionswithcalculate","title":"fn options.withCalculate","text":"<pre><code>options.withCalculate(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the heatmap should be calculated from data</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithcalculation","title":"fn options.withCalculation","text":"<pre><code>options.withCalculation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionswithcalculationmixin","title":"fn options.withCalculationMixin","text":"<pre><code>options.withCalculationMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionswithcellgap","title":"fn options.withCellGap","text":"<pre><code>options.withCellGap(value=1)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>1</code></li> </ul> </li> </ul> <p>Controls gap between cells</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithcellradius","title":"fn options.withCellRadius","text":"<pre><code>options.withCellRadius(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Controls cell radius</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithcellvalues","title":"fn options.withCellValues","text":"<pre><code>options.withCellValues(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Controls cell value options</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithcellvaluesmixin","title":"fn options.withCellValuesMixin","text":"<pre><code>options.withCellValuesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Controls cell value options</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithcolor","title":"fn options.withColor","text":"<pre><code>options.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Controls various color options</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithcolormixin","title":"fn options.withColorMixin","text":"<pre><code>options.withColorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Controls various color options</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithexemplars","title":"fn options.withExemplars","text":"<pre><code>options.withExemplars(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Controls exemplar options</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithexemplarsmixin","title":"fn options.withExemplarsMixin","text":"<pre><code>options.withExemplarsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Controls exemplar options</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithfiltervalues","title":"fn options.withFilterValues","text":"<pre><code>options.withFilterValues(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Controls the value filter range</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithfiltervaluesmixin","title":"fn options.withFilterValuesMixin","text":"<pre><code>options.withFilterValuesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Controls the value filter range</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithlegend","title":"fn options.withLegend","text":"<pre><code>options.withLegend(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Controls legend options</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithlegendmixin","title":"fn options.withLegendMixin","text":"<pre><code>options.withLegendMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Controls legend options</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithrowsframe","title":"fn options.withRowsFrame","text":"<pre><code>options.withRowsFrame(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Controls frame rows options</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithrowsframemixin","title":"fn options.withRowsFrameMixin","text":"<pre><code>options.withRowsFrameMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Controls frame rows options</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithshowvalue","title":"fn options.withShowValue","text":"<pre><code>options.withShowValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"never\"</code>, <code>\"always\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithtooltip","title":"fn options.withTooltip","text":"<pre><code>options.withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Controls tooltip options</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithtooltipmixin","title":"fn options.withTooltipMixin","text":"<pre><code>options.withTooltipMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Controls tooltip options</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithyaxis","title":"fn options.withYAxis","text":"<pre><code>options.withYAxis(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Configuration options for the yAxis</p>"},{"location":"API/panel/heatmap/index.html#fn-optionswithyaxismixin","title":"fn options.withYAxisMixin","text":"<pre><code>options.withYAxisMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Configuration options for the yAxis</p>"},{"location":"API/panel/heatmap/index.html#obj-optionscalculation","title":"obj options.calculation","text":""},{"location":"API/panel/heatmap/index.html#fn-optionscalculationwithxbuckets","title":"fn options.calculation.withXBuckets","text":"<pre><code>options.calculation.withXBuckets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionscalculationwithxbucketsmixin","title":"fn options.calculation.withXBucketsMixin","text":"<pre><code>options.calculation.withXBucketsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionscalculationwithybuckets","title":"fn options.calculation.withYBuckets","text":"<pre><code>options.calculation.withYBuckets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionscalculationwithybucketsmixin","title":"fn options.calculation.withYBucketsMixin","text":"<pre><code>options.calculation.withYBucketsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#obj-optionscalculationxbuckets","title":"obj options.calculation.xBuckets","text":""},{"location":"API/panel/heatmap/index.html#fn-optionscalculationxbucketswithmode","title":"fn options.calculation.xBuckets.withMode","text":"<pre><code>options.calculation.xBuckets.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"size\"</code>, <code>\"count\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionscalculationxbucketswithscale","title":"fn options.calculation.xBuckets.withScale","text":"<pre><code>options.calculation.xBuckets.withScale(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#fn-optionscalculationxbucketswithscalemixin","title":"fn options.calculation.xBuckets.withScaleMixin","text":"<pre><code>options.calculation.xBuckets.withScaleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#fn-optionscalculationxbucketswithvalue","title":"fn options.calculation.xBuckets.withValue","text":"<pre><code>options.calculation.xBuckets.withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The number of buckets to use for the axis in the heatmap</p>"},{"location":"API/panel/heatmap/index.html#obj-optionscalculationxbucketsscale","title":"obj options.calculation.xBuckets.scale","text":""},{"location":"API/panel/heatmap/index.html#fn-optionscalculationxbucketsscalewithlinearthreshold","title":"# fn options.calculation.xBuckets.scale.withLinearThreshold","text":"<pre><code>options.calculation.xBuckets.scale.withLinearThreshold(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionscalculationxbucketsscalewithlog","title":"# fn options.calculation.xBuckets.scale.withLog","text":"<pre><code>options.calculation.xBuckets.scale.withLog(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionscalculationxbucketsscalewithtype","title":"# fn options.calculation.xBuckets.scale.withType","text":"<pre><code>options.calculation.xBuckets.scale.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"log\"</code>, <code>\"ordinal\"</code>, <code>\"symlog\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#obj-optionscalculationybuckets","title":"obj options.calculation.yBuckets","text":""},{"location":"API/panel/heatmap/index.html#fn-optionscalculationybucketswithmode","title":"fn options.calculation.yBuckets.withMode","text":"<pre><code>options.calculation.yBuckets.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"size\"</code>, <code>\"count\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionscalculationybucketswithscale","title":"fn options.calculation.yBuckets.withScale","text":"<pre><code>options.calculation.yBuckets.withScale(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#fn-optionscalculationybucketswithscalemixin","title":"fn options.calculation.yBuckets.withScaleMixin","text":"<pre><code>options.calculation.yBuckets.withScaleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#fn-optionscalculationybucketswithvalue","title":"fn options.calculation.yBuckets.withValue","text":"<pre><code>options.calculation.yBuckets.withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The number of buckets to use for the axis in the heatmap</p>"},{"location":"API/panel/heatmap/index.html#obj-optionscalculationybucketsscale","title":"obj options.calculation.yBuckets.scale","text":""},{"location":"API/panel/heatmap/index.html#fn-optionscalculationybucketsscalewithlinearthreshold","title":"# fn options.calculation.yBuckets.scale.withLinearThreshold","text":"<pre><code>options.calculation.yBuckets.scale.withLinearThreshold(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionscalculationybucketsscalewithlog","title":"# fn options.calculation.yBuckets.scale.withLog","text":"<pre><code>options.calculation.yBuckets.scale.withLog(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionscalculationybucketsscalewithtype","title":"# fn options.calculation.yBuckets.scale.withType","text":"<pre><code>options.calculation.yBuckets.scale.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"log\"</code>, <code>\"ordinal\"</code>, <code>\"symlog\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#obj-optionscellvalues","title":"obj options.cellValues","text":""},{"location":"API/panel/heatmap/index.html#fn-optionscellvalueswithdecimals","title":"fn options.cellValues.withDecimals","text":"<pre><code>options.cellValues.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Controls the number of decimals for cell values</p>"},{"location":"API/panel/heatmap/index.html#fn-optionscellvalueswithunit","title":"fn options.cellValues.withUnit","text":"<pre><code>options.cellValues.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Controls the cell value unit</p>"},{"location":"API/panel/heatmap/index.html#obj-optionscolor","title":"obj options.color","text":""},{"location":"API/panel/heatmap/index.html#fn-optionscolorwithexponent","title":"fn options.color.withExponent","text":"<pre><code>options.color.withExponent(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Controls the exponent when scale is set to exponential</p>"},{"location":"API/panel/heatmap/index.html#fn-optionscolorwithfill","title":"fn options.color.withFill","text":"<pre><code>options.color.withFill(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Controls the color fill when in opacity mode</p>"},{"location":"API/panel/heatmap/index.html#fn-optionscolorwithmax","title":"fn options.color.withMax","text":"<pre><code>options.color.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Sets the maximum value for the color scale</p>"},{"location":"API/panel/heatmap/index.html#fn-optionscolorwithmin","title":"fn options.color.withMin","text":"<pre><code>options.color.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Sets the minimum value for the color scale</p>"},{"location":"API/panel/heatmap/index.html#fn-optionscolorwithmode","title":"fn options.color.withMode","text":"<pre><code>options.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"opacity\"</code>, <code>\"scheme\"</code></li> </ul> </li> </ul> <p>Controls the color mode of the heatmap</p>"},{"location":"API/panel/heatmap/index.html#fn-optionscolorwithreverse","title":"fn options.color.withReverse","text":"<pre><code>options.color.withReverse(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Reverses the color scheme</p>"},{"location":"API/panel/heatmap/index.html#fn-optionscolorwithscale","title":"fn options.color.withScale","text":"<pre><code>options.color.withScale(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"exponential\"</code></li> </ul> </li> </ul> <p>Controls the color scale of the heatmap</p>"},{"location":"API/panel/heatmap/index.html#fn-optionscolorwithscheme","title":"fn options.color.withScheme","text":"<pre><code>options.color.withScheme(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Controls the color scheme used</p>"},{"location":"API/panel/heatmap/index.html#fn-optionscolorwithsteps","title":"fn options.color.withSteps","text":"<pre><code>options.color.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Controls the number of color steps</p>"},{"location":"API/panel/heatmap/index.html#obj-optionsexemplars","title":"obj options.exemplars","text":""},{"location":"API/panel/heatmap/index.html#fn-optionsexemplarswithcolor","title":"fn options.exemplars.withColor","text":"<pre><code>options.exemplars.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Sets the color of the exemplar markers</p>"},{"location":"API/panel/heatmap/index.html#obj-optionsfiltervalues","title":"obj options.filterValues","text":""},{"location":"API/panel/heatmap/index.html#fn-optionsfiltervalueswithge","title":"fn options.filterValues.withGe","text":"<pre><code>options.filterValues.withGe(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Sets the filter range to values greater than or equal to the given value</p>"},{"location":"API/panel/heatmap/index.html#fn-optionsfiltervalueswithle","title":"fn options.filterValues.withLe","text":"<pre><code>options.filterValues.withLe(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Sets the filter range to values less than or equal to the given value</p>"},{"location":"API/panel/heatmap/index.html#obj-optionslegend","title":"obj options.legend","text":""},{"location":"API/panel/heatmap/index.html#fn-optionslegendwithshow","title":"fn options.legend.withShow","text":"<pre><code>options.legend.withShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the legend is shown</p>"},{"location":"API/panel/heatmap/index.html#obj-optionsrowsframe","title":"obj options.rowsFrame","text":""},{"location":"API/panel/heatmap/index.html#fn-optionsrowsframewithlayout","title":"fn options.rowsFrame.withLayout","text":"<pre><code>options.rowsFrame.withLayout(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"le\"</code>, <code>\"ge\"</code>, <code>\"unknown\"</code>, <code>\"auto\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionsrowsframewithvalue","title":"fn options.rowsFrame.withValue","text":"<pre><code>options.rowsFrame.withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Sets the name of the cell when not calculating from data</p>"},{"location":"API/panel/heatmap/index.html#obj-optionstooltip","title":"obj options.tooltip","text":""},{"location":"API/panel/heatmap/index.html#fn-optionstooltipwithmaxheight","title":"fn options.tooltip.withMaxHeight","text":"<pre><code>options.tooltip.withMaxHeight(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionstooltipwithmaxwidth","title":"fn options.tooltip.withMaxWidth","text":"<pre><code>options.tooltip.withMaxWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionstooltipwithmode","title":"fn options.tooltip.withMode","text":"<pre><code>options.tooltip.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"single\"</code>, <code>\"multi\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#fn-optionstooltipwithshowcolorscale","title":"fn options.tooltip.withShowColorScale","text":"<pre><code>options.tooltip.withShowColorScale(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the tooltip shows a color scale in header</p>"},{"location":"API/panel/heatmap/index.html#fn-optionstooltipwithyhistogram","title":"fn options.tooltip.withYHistogram","text":"<pre><code>options.tooltip.withYHistogram(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the tooltip shows a histogram of the y-axis values</p>"},{"location":"API/panel/heatmap/index.html#obj-optionsyaxis","title":"obj options.yAxis","text":""},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithaxisbordershow","title":"fn options.yAxis.withAxisBorderShow","text":"<pre><code>options.yAxis.withAxisBorderShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithaxiscenteredzero","title":"fn options.yAxis.withAxisCenteredZero","text":"<pre><code>options.yAxis.withAxisCenteredZero(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithaxiscolormode","title":"fn options.yAxis.withAxisColorMode","text":"<pre><code>options.yAxis.withAxisColorMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"text\"</code>, <code>\"series\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithaxisgridshow","title":"fn options.yAxis.withAxisGridShow","text":"<pre><code>options.yAxis.withAxisGridShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithaxislabel","title":"fn options.yAxis.withAxisLabel","text":"<pre><code>options.yAxis.withAxisLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithaxisplacement","title":"fn options.yAxis.withAxisPlacement","text":"<pre><code>options.yAxis.withAxisPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"top\"</code>, <code>\"right\"</code>, <code>\"bottom\"</code>, <code>\"left\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithaxissoftmax","title":"fn options.yAxis.withAxisSoftMax","text":"<pre><code>options.yAxis.withAxisSoftMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithaxissoftmin","title":"fn options.yAxis.withAxisSoftMin","text":"<pre><code>options.yAxis.withAxisSoftMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithaxiswidth","title":"fn options.yAxis.withAxisWidth","text":"<pre><code>options.yAxis.withAxisWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithdecimals","title":"fn options.yAxis.withDecimals","text":"<pre><code>options.yAxis.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Controls the number of decimals for yAxis values</p>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithmax","title":"fn options.yAxis.withMax","text":"<pre><code>options.yAxis.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Sets the maximum value for the yAxis</p>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithmin","title":"fn options.yAxis.withMin","text":"<pre><code>options.yAxis.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Sets the minimum value for the yAxis</p>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithreverse","title":"fn options.yAxis.withReverse","text":"<pre><code>options.yAxis.withReverse(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Reverses the yAxis</p>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithscaledistribution","title":"fn options.yAxis.withScaleDistribution","text":"<pre><code>options.yAxis.withScaleDistribution(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithscaledistributionmixin","title":"fn options.yAxis.withScaleDistributionMixin","text":"<pre><code>options.yAxis.withScaleDistributionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxiswithunit","title":"fn options.yAxis.withUnit","text":"<pre><code>options.yAxis.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Sets the yAxis unit</p>"},{"location":"API/panel/heatmap/index.html#obj-optionsyaxisscaledistribution","title":"obj options.yAxis.scaleDistribution","text":""},{"location":"API/panel/heatmap/index.html#fn-optionsyaxisscaledistributionwithlinearthreshold","title":"fn options.yAxis.scaleDistribution.withLinearThreshold","text":"<pre><code>options.yAxis.scaleDistribution.withLinearThreshold(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxisscaledistributionwithlog","title":"fn options.yAxis.scaleDistribution.withLog","text":"<pre><code>options.yAxis.scaleDistribution.withLog(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/heatmap/index.html#fn-optionsyaxisscaledistributionwithtype","title":"fn options.yAxis.scaleDistribution.withType","text":"<pre><code>options.yAxis.scaleDistribution.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"log\"</code>, <code>\"ordinal\"</code>, <code>\"symlog\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/heatmap/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/heatmap/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/heatmap/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/heatmap/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/heatmap/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/heatmap/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/heatmap/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/heatmap/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/heatmap/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/heatmap/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/heatmap/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/heatmap/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/heatmap/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/heatmap/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/heatmap/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/heatmap/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/heatmap/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/heatmap/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/heatmap/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/heatmap/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/heatmap/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/heatmap/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/heatmap/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/heatmap/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/heatmap/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/heatmap/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/heatmap/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/heatmap/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/heatmap/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/heatmap/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/heatmap/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/heatmap/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/heatmap/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/heatmap/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/heatmap/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/heatmap/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/heatmap/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/heatmap/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/heatmap/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/heatmap/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/heatmap/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/heatmap/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/heatmap/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/heatmap/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/heatmap/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/heatmap/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/heatmap/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/heatmap/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/heatmap/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/heatmap/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/heatmap/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/heatmap/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/heatmap/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/heatmap/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/heatmap/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/heatmap/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/heatmap/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/heatmap/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/heatmap/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/heatmap/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/heatmap/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/heatmap/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/heatmap/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/heatmap/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/heatmap/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/heatmap/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/heatmap/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/heatmap/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/heatmap/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/heatmap/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/heatmap/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/heatmap/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/heatmap/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/heatmap/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/heatmap/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/heatmap/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/heatmap/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/heatmap/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/heatmap/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/heatmap/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/heatmap/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/heatmap/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/heatmap/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/heatmap/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/heatmap/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/heatmap/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/heatmap/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/heatmap/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/heatmap/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/heatmap/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/histogram/index.html","title":"histogram","text":"<p>grafonnet.panel.histogram</p>"},{"location":"API/panel/histogram/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/histogram/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj fieldConfig</code><ul> <li><code>obj defaults</code><ul> <li><code>obj custom</code><ul> <li><code>fn withAxisBorderShow(value=true)</code></li> <li><code>fn withAxisCenteredZero(value=true)</code></li> <li><code>fn withAxisColorMode(value)</code></li> <li><code>fn withAxisGridShow(value=true)</code></li> <li><code>fn withAxisLabel(value)</code></li> <li><code>fn withAxisPlacement(value)</code></li> <li><code>fn withAxisSoftMax(value)</code></li> <li><code>fn withAxisSoftMin(value)</code></li> <li><code>fn withAxisWidth(value)</code></li> <li><code>fn withFillOpacity(value=80)</code></li> <li><code>fn withGradientMode(value)</code></li> <li><code>fn withHideFrom(value)</code></li> <li><code>fn withHideFromMixin(value)</code></li> <li><code>fn withLineWidth(value=1)</code></li> <li><code>fn withScaleDistribution(value)</code></li> <li><code>fn withScaleDistributionMixin(value)</code></li> <li><code>fn withStacking(value)</code></li> <li><code>fn withStackingMixin(value)</code></li> <li><code>obj hideFrom</code><ul> <li><code>fn withLegend(value=true)</code></li> <li><code>fn withTooltip(value=true)</code></li> <li><code>fn withViz(value=true)</code></li> </ul> </li> <li><code>obj scaleDistribution</code><ul> <li><code>fn withLinearThreshold(value)</code></li> <li><code>fn withLog(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> <li><code>obj stacking</code><ul> <li><code>fn withGroup(value)</code></li> <li><code>fn withMode(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withBucketCount(value=30)</code></li> <li><code>fn withBucketOffset(value=0)</code></li> <li><code>fn withBucketSize(value)</code></li> <li><code>fn withCombine(value=true)</code></li> <li><code>fn withLegend(value)</code></li> <li><code>fn withLegendMixin(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withTooltipMixin(value)</code></li> <li><code>obj legend</code><ul> <li><code>fn withAsTable(value=true)</code></li> <li><code>fn withCalcs(value=[])</code></li> <li><code>fn withCalcsMixin(value=[])</code></li> <li><code>fn withDisplayMode(value)</code></li> <li><code>fn withIsVisible(value=true)</code></li> <li><code>fn withPlacement(value)</code></li> <li><code>fn withShowLegend(value=true)</code></li> <li><code>fn withSortBy(value)</code></li> <li><code>fn withSortDesc(value=true)</code></li> <li><code>fn withWidth(value)</code></li> </ul> </li> <li><code>obj tooltip</code><ul> <li><code>fn withMaxHeight(value)</code></li> <li><code>fn withMaxWidth(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSort(value)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/histogram/index.html#fields","title":"Fields","text":""},{"location":"API/panel/histogram/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new histogram panel with a title.</p>"},{"location":"API/panel/histogram/index.html#obj-fieldconfig","title":"obj fieldConfig","text":""},{"location":"API/panel/histogram/index.html#obj-fieldconfigdefaults","title":"obj fieldConfig.defaults","text":""},{"location":"API/panel/histogram/index.html#obj-fieldconfigdefaultscustom","title":"obj fieldConfig.defaults.custom","text":""},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithaxisbordershow","title":"fn fieldConfig.defaults.custom.withAxisBorderShow","text":"<pre><code>fieldConfig.defaults.custom.withAxisBorderShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithaxiscenteredzero","title":"fn fieldConfig.defaults.custom.withAxisCenteredZero","text":"<pre><code>fieldConfig.defaults.custom.withAxisCenteredZero(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithaxiscolormode","title":"fn fieldConfig.defaults.custom.withAxisColorMode","text":"<pre><code>fieldConfig.defaults.custom.withAxisColorMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"text\"</code>, <code>\"series\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithaxisgridshow","title":"fn fieldConfig.defaults.custom.withAxisGridShow","text":"<pre><code>fieldConfig.defaults.custom.withAxisGridShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithaxislabel","title":"fn fieldConfig.defaults.custom.withAxisLabel","text":"<pre><code>fieldConfig.defaults.custom.withAxisLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithaxisplacement","title":"fn fieldConfig.defaults.custom.withAxisPlacement","text":"<pre><code>fieldConfig.defaults.custom.withAxisPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"top\"</code>, <code>\"right\"</code>, <code>\"bottom\"</code>, <code>\"left\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithaxissoftmax","title":"fn fieldConfig.defaults.custom.withAxisSoftMax","text":"<pre><code>fieldConfig.defaults.custom.withAxisSoftMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithaxissoftmin","title":"fn fieldConfig.defaults.custom.withAxisSoftMin","text":"<pre><code>fieldConfig.defaults.custom.withAxisSoftMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithaxiswidth","title":"fn fieldConfig.defaults.custom.withAxisWidth","text":"<pre><code>fieldConfig.defaults.custom.withAxisWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithfillopacity","title":"fn fieldConfig.defaults.custom.withFillOpacity","text":"<pre><code>fieldConfig.defaults.custom.withFillOpacity(value=80)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>80</code></li> </ul> </li> </ul> <p>Controls the fill opacity of the bars.</p>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithgradientmode","title":"fn fieldConfig.defaults.custom.withGradientMode","text":"<pre><code>fieldConfig.defaults.custom.withGradientMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"opacity\"</code>, <code>\"hue\"</code>, <code>\"scheme\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithhidefrom","title":"fn fieldConfig.defaults.custom.withHideFrom","text":"<pre><code>fieldConfig.defaults.custom.withHideFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithhidefrommixin","title":"fn fieldConfig.defaults.custom.withHideFromMixin","text":"<pre><code>fieldConfig.defaults.custom.withHideFromMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithlinewidth","title":"fn fieldConfig.defaults.custom.withLineWidth","text":"<pre><code>fieldConfig.defaults.custom.withLineWidth(value=1)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>1</code></li> </ul> </li> </ul> <p>Controls line width of the bars.</p>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithscaledistribution","title":"fn fieldConfig.defaults.custom.withScaleDistribution","text":"<pre><code>fieldConfig.defaults.custom.withScaleDistribution(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithscaledistributionmixin","title":"fn fieldConfig.defaults.custom.withScaleDistributionMixin","text":"<pre><code>fieldConfig.defaults.custom.withScaleDistributionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithstacking","title":"fn fieldConfig.defaults.custom.withStacking","text":"<pre><code>fieldConfig.defaults.custom.withStacking(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomwithstackingmixin","title":"fn fieldConfig.defaults.custom.withStackingMixin","text":"<pre><code>fieldConfig.defaults.custom.withStackingMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#obj-fieldconfigdefaultscustomhidefrom","title":"obj fieldConfig.defaults.custom.hideFrom","text":""},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomhidefromwithlegend","title":"# fn fieldConfig.defaults.custom.hideFrom.withLegend","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomhidefromwithtooltip","title":"# fn fieldConfig.defaults.custom.hideFrom.withTooltip","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withTooltip(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomhidefromwithviz","title":"# fn fieldConfig.defaults.custom.hideFrom.withViz","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withViz(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/index.html#obj-fieldconfigdefaultscustomscaledistribution","title":"obj fieldConfig.defaults.custom.scaleDistribution","text":""},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomscaledistributionwithlinearthreshold","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withLinearThreshold","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withLinearThreshold(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomscaledistributionwithlog","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withLog","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withLog(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomscaledistributionwithtype","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withType","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"log\"</code>, <code>\"ordinal\"</code>, <code>\"symlog\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#obj-fieldconfigdefaultscustomstacking","title":"obj fieldConfig.defaults.custom.stacking","text":""},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomstackingwithgroup","title":"# fn fieldConfig.defaults.custom.stacking.withGroup","text":"<pre><code>fieldConfig.defaults.custom.stacking.withGroup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/histogram/index.html#fn-fieldconfigdefaultscustomstackingwithmode","title":"# fn fieldConfig.defaults.custom.stacking.withMode","text":"<pre><code>fieldConfig.defaults.custom.stacking.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"normal\"</code>, <code>\"percent\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/histogram/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/histogram/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/histogram/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/histogram/index.html#fn-optionswithbucketcount","title":"fn options.withBucketCount","text":"<pre><code>options.withBucketCount(value=30)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>30</code></li> </ul> </li> </ul> <p>Bucket count (approx)</p>"},{"location":"API/panel/histogram/index.html#fn-optionswithbucketoffset","title":"fn options.withBucketOffset","text":"<pre><code>options.withBucketOffset(value=0)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)<ul> <li>default value: <code>0</code></li> </ul> </li> </ul> <p>Offset buckets by this amount</p>"},{"location":"API/panel/histogram/index.html#fn-optionswithbucketsize","title":"fn options.withBucketSize","text":"<pre><code>options.withBucketSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Size of each bucket</p>"},{"location":"API/panel/histogram/index.html#fn-optionswithcombine","title":"fn options.withCombine","text":"<pre><code>options.withCombine(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Combines multiple series into a single histogram</p>"},{"location":"API/panel/histogram/index.html#fn-optionswithlegend","title":"fn options.withLegend","text":"<pre><code>options.withLegend(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#fn-optionswithlegendmixin","title":"fn options.withLegendMixin","text":"<pre><code>options.withLegendMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#fn-optionswithtooltip","title":"fn options.withTooltip","text":"<pre><code>options.withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#fn-optionswithtooltipmixin","title":"fn options.withTooltipMixin","text":"<pre><code>options.withTooltipMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#obj-optionslegend","title":"obj options.legend","text":""},{"location":"API/panel/histogram/index.html#fn-optionslegendwithastable","title":"fn options.legend.withAsTable","text":"<pre><code>options.legend.withAsTable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/index.html#fn-optionslegendwithcalcs","title":"fn options.legend.withCalcs","text":"<pre><code>options.legend.withCalcs(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/index.html#fn-optionslegendwithcalcsmixin","title":"fn options.legend.withCalcsMixin","text":"<pre><code>options.legend.withCalcsMixin(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/index.html#fn-optionslegendwithdisplaymode","title":"fn options.legend.withDisplayMode","text":"<pre><code>options.legend.withDisplayMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"list\"</code>, <code>\"table\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs Note: \"hidden\" needs to remain as an option for plugins compatibility</p>"},{"location":"API/panel/histogram/index.html#fn-optionslegendwithisvisible","title":"fn options.legend.withIsVisible","text":"<pre><code>options.legend.withIsVisible(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/index.html#fn-optionslegendwithplacement","title":"fn options.legend.withPlacement","text":"<pre><code>options.legend.withPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"bottom\"</code>, <code>\"right\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#fn-optionslegendwithshowlegend","title":"fn options.legend.withShowLegend","text":"<pre><code>options.legend.withShowLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/index.html#fn-optionslegendwithsortby","title":"fn options.legend.withSortBy","text":"<pre><code>options.legend.withSortBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/histogram/index.html#fn-optionslegendwithsortdesc","title":"fn options.legend.withSortDesc","text":"<pre><code>options.legend.withSortDesc(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/index.html#fn-optionslegendwithwidth","title":"fn options.legend.withWidth","text":"<pre><code>options.legend.withWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/histogram/index.html#obj-optionstooltip","title":"obj options.tooltip","text":""},{"location":"API/panel/histogram/index.html#fn-optionstooltipwithmaxheight","title":"fn options.tooltip.withMaxHeight","text":"<pre><code>options.tooltip.withMaxHeight(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/histogram/index.html#fn-optionstooltipwithmaxwidth","title":"fn options.tooltip.withMaxWidth","text":"<pre><code>options.tooltip.withMaxWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/histogram/index.html#fn-optionstooltipwithmode","title":"fn options.tooltip.withMode","text":"<pre><code>options.tooltip.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"single\"</code>, <code>\"multi\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#fn-optionstooltipwithsort","title":"fn options.tooltip.withSort","text":"<pre><code>options.tooltip.withSort(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"asc\"</code>, <code>\"desc\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/histogram/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/histogram/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/histogram/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/histogram/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/histogram/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/histogram/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/histogram/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/histogram/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/histogram/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/histogram/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/histogram/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/histogram/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/histogram/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/histogram/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/histogram/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/histogram/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/histogram/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/histogram/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/histogram/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/histogram/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/histogram/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/histogram/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/histogram/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/histogram/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/histogram/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/histogram/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/histogram/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/histogram/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/histogram/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/histogram/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/histogram/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/histogram/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/histogram/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/histogram/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/histogram/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/histogram/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/histogram/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/histogram/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/histogram/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/histogram/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/histogram/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/histogram/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/histogram/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/histogram/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/histogram/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/histogram/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/histogram/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/histogram/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/histogram/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/histogram/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/histogram/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/histogram/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/histogram/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/histogram/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/histogram/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/histogram/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/histogram/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/histogram/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/histogram/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/histogram/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/histogram/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/histogram/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/histogram/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/histogram/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/histogram/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/histogram/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/histogram/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/histogram/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/histogram/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/histogram/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/histogram/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/histogram/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/histogram/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/histogram/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/histogram/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/histogram/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/histogram/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/histogram/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/histogram/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/histogram/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/histogram/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/histogram/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/histogram/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/histogram/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/histogram/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/histogram/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/histogram/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/histogram/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/histogram/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/histogram/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/histogram/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/histogram/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/logs/index.html","title":"logs","text":"<p>grafonnet.panel.logs</p>"},{"location":"API/panel/logs/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/logs/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withDedupStrategy(value)</code></li> <li><code>fn withEnableLogDetails(value=true)</code></li> <li><code>fn withPrettifyLogMessage(value=true)</code></li> <li><code>fn withShowCommonLabels(value=true)</code></li> <li><code>fn withShowLabels(value=true)</code></li> <li><code>fn withShowLogContextToggle(value=true)</code></li> <li><code>fn withShowTime(value=true)</code></li> <li><code>fn withSortOrder(value)</code></li> <li><code>fn withWrapLogMessage(value=true)</code></li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/logs/index.html#fields","title":"Fields","text":""},{"location":"API/panel/logs/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new logs panel with a title.</p>"},{"location":"API/panel/logs/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/logs/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/logs/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/logs/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/logs/index.html#fn-optionswithdedupstrategy","title":"fn options.withDedupStrategy","text":"<pre><code>options.withDedupStrategy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"exact\"</code>, <code>\"numbers\"</code>, <code>\"signature\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/logs/index.html#fn-optionswithenablelogdetails","title":"fn options.withEnableLogDetails","text":"<pre><code>options.withEnableLogDetails(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/logs/index.html#fn-optionswithprettifylogmessage","title":"fn options.withPrettifyLogMessage","text":"<pre><code>options.withPrettifyLogMessage(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/logs/index.html#fn-optionswithshowcommonlabels","title":"fn options.withShowCommonLabels","text":"<pre><code>options.withShowCommonLabels(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/logs/index.html#fn-optionswithshowlabels","title":"fn options.withShowLabels","text":"<pre><code>options.withShowLabels(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/logs/index.html#fn-optionswithshowlogcontexttoggle","title":"fn options.withShowLogContextToggle","text":"<pre><code>options.withShowLogContextToggle(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/logs/index.html#fn-optionswithshowtime","title":"fn options.withShowTime","text":"<pre><code>options.withShowTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/logs/index.html#fn-optionswithsortorder","title":"fn options.withSortOrder","text":"<pre><code>options.withSortOrder(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"Descending\"</code>, <code>\"Ascending\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/logs/index.html#fn-optionswithwraplogmessage","title":"fn options.withWrapLogMessage","text":"<pre><code>options.withWrapLogMessage(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/logs/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/logs/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/logs/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/logs/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/logs/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/logs/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/logs/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/logs/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/logs/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/logs/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/logs/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/logs/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/logs/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/logs/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/logs/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/logs/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/logs/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/logs/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/logs/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/logs/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/logs/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/logs/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/logs/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/logs/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/logs/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/logs/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/logs/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/logs/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/logs/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/logs/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/logs/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/logs/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/logs/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/logs/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/logs/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/logs/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/logs/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/logs/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/logs/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/logs/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/logs/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/logs/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/logs/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/logs/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/logs/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/logs/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/logs/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/logs/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/logs/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/logs/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/logs/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/logs/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/logs/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/logs/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/logs/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/logs/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/logs/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/logs/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/logs/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/logs/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/logs/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/logs/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/logs/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/logs/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/logs/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/logs/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/logs/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/logs/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/logs/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/logs/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/logs/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/logs/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/logs/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/logs/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/logs/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/logs/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/logs/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/logs/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/logs/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/logs/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/logs/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/logs/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/logs/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/logs/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/logs/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/logs/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/logs/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/logs/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/logs/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/logs/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/logs/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/logs/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/logs/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/logs/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/logs/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/logs/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/logs/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/logs/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/logs/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/logs/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/logs/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/logs/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/logs/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/logs/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/logs/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/news/index.html","title":"news","text":"<p>grafonnet.panel.news</p>"},{"location":"API/panel/news/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/news/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withFeedUrl(value)</code></li> <li><code>fn withShowImage(value=true)</code></li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/news/index.html#fields","title":"Fields","text":""},{"location":"API/panel/news/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new news panel with a title.</p>"},{"location":"API/panel/news/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/news/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/news/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/news/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/news/index.html#fn-optionswithfeedurl","title":"fn options.withFeedUrl","text":"<pre><code>options.withFeedUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>empty/missing will default to grafana blog</p>"},{"location":"API/panel/news/index.html#fn-optionswithshowimage","title":"fn options.withShowImage","text":"<pre><code>options.withShowImage(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/news/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/news/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/news/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/news/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/news/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/news/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/news/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/news/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/news/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/news/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/news/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/news/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/news/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/news/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/news/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/news/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/news/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/news/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/news/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/news/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/news/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/news/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/news/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/news/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/news/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/news/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/news/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/news/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/news/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/news/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/news/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/news/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/news/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/news/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/news/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/news/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/news/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/news/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/news/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/news/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/news/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/news/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/news/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/news/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/news/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/news/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/news/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/news/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/news/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/news/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/news/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/news/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/news/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/news/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/news/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/news/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/news/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/news/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/news/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/news/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/news/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/news/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/news/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/news/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/news/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/news/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/news/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/news/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/news/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/news/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/news/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/news/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/news/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/news/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/news/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/news/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/news/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/news/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/news/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/news/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/news/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/news/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/news/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/news/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/news/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/news/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/news/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/news/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/news/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/news/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/news/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/news/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/news/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/news/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/news/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/news/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/news/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/news/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/news/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/news/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/news/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/news/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/news/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/news/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/news/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/news/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/news/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/news/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/news/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/news/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/news/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/news/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/news/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/news/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/news/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/news/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/news/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/news/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/news/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/news/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/news/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/news/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/news/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/news/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/news/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/news/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/news/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/news/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/nodeGraph/index.html","title":"nodeGraph","text":"<p>grafonnet.panel.nodeGraph</p>"},{"location":"API/panel/nodeGraph/index.html#subpackages","title":"Subpackages","text":"<ul> <li>options.nodes.arcs</li> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/nodeGraph/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withEdges(value)</code></li> <li><code>fn withEdgesMixin(value)</code></li> <li><code>fn withNodes(value)</code></li> <li><code>fn withNodesMixin(value)</code></li> <li><code>obj edges</code><ul> <li><code>fn withMainStatUnit(value)</code></li> <li><code>fn withSecondaryStatUnit(value)</code></li> </ul> </li> <li><code>obj nodes</code><ul> <li><code>fn withArcs(value)</code></li> <li><code>fn withArcsMixin(value)</code></li> <li><code>fn withMainStatUnit(value)</code></li> <li><code>fn withSecondaryStatUnit(value)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/nodeGraph/index.html#fields","title":"Fields","text":""},{"location":"API/panel/nodeGraph/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new nodeGraph panel with a title.</p>"},{"location":"API/panel/nodeGraph/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/nodeGraph/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/nodeGraph/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/nodeGraph/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/nodeGraph/index.html#fn-optionswithedges","title":"fn options.withEdges","text":"<pre><code>options.withEdges(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/nodeGraph/index.html#fn-optionswithedgesmixin","title":"fn options.withEdgesMixin","text":"<pre><code>options.withEdgesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/nodeGraph/index.html#fn-optionswithnodes","title":"fn options.withNodes","text":"<pre><code>options.withNodes(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/nodeGraph/index.html#fn-optionswithnodesmixin","title":"fn options.withNodesMixin","text":"<pre><code>options.withNodesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/nodeGraph/index.html#obj-optionsedges","title":"obj options.edges","text":""},{"location":"API/panel/nodeGraph/index.html#fn-optionsedgeswithmainstatunit","title":"fn options.edges.withMainStatUnit","text":"<pre><code>options.edges.withMainStatUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit for the main stat to override what ever is set in the data frame.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-optionsedgeswithsecondarystatunit","title":"fn options.edges.withSecondaryStatUnit","text":"<pre><code>options.edges.withSecondaryStatUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit for the secondary stat to override what ever is set in the data frame.</p>"},{"location":"API/panel/nodeGraph/index.html#obj-optionsnodes","title":"obj options.nodes","text":""},{"location":"API/panel/nodeGraph/index.html#fn-optionsnodeswitharcs","title":"fn options.nodes.withArcs","text":"<pre><code>options.nodes.withArcs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Define which fields are shown as part of the node arc (colored circle around the node).</p>"},{"location":"API/panel/nodeGraph/index.html#fn-optionsnodeswitharcsmixin","title":"fn options.nodes.withArcsMixin","text":"<pre><code>options.nodes.withArcsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Define which fields are shown as part of the node arc (colored circle around the node).</p>"},{"location":"API/panel/nodeGraph/index.html#fn-optionsnodeswithmainstatunit","title":"fn options.nodes.withMainStatUnit","text":"<pre><code>options.nodes.withMainStatUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit for the main stat to override what ever is set in the data frame.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-optionsnodeswithsecondarystatunit","title":"fn options.nodes.withSecondaryStatUnit","text":"<pre><code>options.nodes.withSecondaryStatUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit for the secondary stat to override what ever is set in the data frame.</p>"},{"location":"API/panel/nodeGraph/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/nodeGraph/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/nodeGraph/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/nodeGraph/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/nodeGraph/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/nodeGraph/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/nodeGraph/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/nodeGraph/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/nodeGraph/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/nodeGraph/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/nodeGraph/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/nodeGraph/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/nodeGraph/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/nodeGraph/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/nodeGraph/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/nodeGraph/options/nodes/arcs.html","title":"arcs","text":""},{"location":"API/panel/nodeGraph/options/nodes/arcs.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withField(value)</code></li> </ul>"},{"location":"API/panel/nodeGraph/options/nodes/arcs.html#fields","title":"Fields","text":""},{"location":"API/panel/nodeGraph/options/nodes/arcs.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The color of the arc.</p>"},{"location":"API/panel/nodeGraph/options/nodes/arcs.html#fn-withfield","title":"fn withField","text":"<pre><code>withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Field from which to get the value. Values should be less than 1, representing fraction of a circle.</p>"},{"location":"API/panel/nodeGraph/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/nodeGraph/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/nodeGraph/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/nodeGraph/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/nodeGraph/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/nodeGraph/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/nodeGraph/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/nodeGraph/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/nodeGraph/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/nodeGraph/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/nodeGraph/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/nodeGraph/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/nodeGraph/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/nodeGraph/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/nodeGraph/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/nodeGraph/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/nodeGraph/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/nodeGraph/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/nodeGraph/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/nodeGraph/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/nodeGraph/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/nodeGraph/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/nodeGraph/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/nodeGraph/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/nodeGraph/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/nodeGraph/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/nodeGraph/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/nodeGraph/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/nodeGraph/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/nodeGraph/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/nodeGraph/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/nodeGraph/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/nodeGraph/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/nodeGraph/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/nodeGraph/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/nodeGraph/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/nodeGraph/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/pieChart/index.html","title":"pieChart","text":"<p>grafonnet.panel.pieChart</p>"},{"location":"API/panel/pieChart/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/pieChart/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj fieldConfig</code><ul> <li><code>obj defaults</code><ul> <li><code>obj custom</code><ul> <li><code>fn withHideFrom(value)</code></li> <li><code>fn withHideFromMixin(value)</code></li> <li><code>obj hideFrom</code><ul> <li><code>fn withLegend(value=true)</code></li> <li><code>fn withTooltip(value=true)</code></li> <li><code>fn withViz(value=true)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withDisplayLabels(value)</code></li> <li><code>fn withDisplayLabelsMixin(value)</code></li> <li><code>fn withLegend(value)</code></li> <li><code>fn withLegendMixin(value)</code></li> <li><code>fn withOrientation(value)</code></li> <li><code>fn withPieType(value)</code></li> <li><code>fn withReduceOptions(value)</code></li> <li><code>fn withReduceOptionsMixin(value)</code></li> <li><code>fn withText(value)</code></li> <li><code>fn withTextMixin(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withTooltipMixin(value)</code></li> <li><code>obj legend</code><ul> <li><code>fn withAsTable(value=true)</code></li> <li><code>fn withCalcs(value)</code></li> <li><code>fn withCalcsMixin(value)</code></li> <li><code>fn withDisplayMode(value)</code></li> <li><code>fn withIsVisible(value=true)</code></li> <li><code>fn withPlacement(value)</code></li> <li><code>fn withShowLegend(value=true)</code></li> <li><code>fn withSortBy(value)</code></li> <li><code>fn withSortDesc(value=true)</code></li> <li><code>fn withValues(value)</code></li> <li><code>fn withValuesMixin(value)</code></li> <li><code>fn withWidth(value)</code></li> </ul> </li> <li><code>obj reduceOptions</code><ul> <li><code>fn withCalcs(value)</code></li> <li><code>fn withCalcsMixin(value)</code></li> <li><code>fn withFields(value)</code></li> <li><code>fn withLimit(value)</code></li> <li><code>fn withValues(value=true)</code></li> </ul> </li> <li><code>obj text</code><ul> <li><code>fn withTitleSize(value)</code></li> <li><code>fn withValueSize(value)</code></li> </ul> </li> <li><code>obj tooltip</code><ul> <li><code>fn withMaxHeight(value)</code></li> <li><code>fn withMaxWidth(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSort(value)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/pieChart/index.html#fields","title":"Fields","text":""},{"location":"API/panel/pieChart/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new pieChart panel with a title.</p>"},{"location":"API/panel/pieChart/index.html#obj-fieldconfig","title":"obj fieldConfig","text":""},{"location":"API/panel/pieChart/index.html#obj-fieldconfigdefaults","title":"obj fieldConfig.defaults","text":""},{"location":"API/panel/pieChart/index.html#obj-fieldconfigdefaultscustom","title":"obj fieldConfig.defaults.custom","text":""},{"location":"API/panel/pieChart/index.html#fn-fieldconfigdefaultscustomwithhidefrom","title":"fn fieldConfig.defaults.custom.withHideFrom","text":"<pre><code>fieldConfig.defaults.custom.withHideFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/pieChart/index.html#fn-fieldconfigdefaultscustomwithhidefrommixin","title":"fn fieldConfig.defaults.custom.withHideFromMixin","text":"<pre><code>fieldConfig.defaults.custom.withHideFromMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/pieChart/index.html#obj-fieldconfigdefaultscustomhidefrom","title":"obj fieldConfig.defaults.custom.hideFrom","text":""},{"location":"API/panel/pieChart/index.html#fn-fieldconfigdefaultscustomhidefromwithlegend","title":"# fn fieldConfig.defaults.custom.hideFrom.withLegend","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-fieldconfigdefaultscustomhidefromwithtooltip","title":"# fn fieldConfig.defaults.custom.hideFrom.withTooltip","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withTooltip(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-fieldconfigdefaultscustomhidefromwithviz","title":"# fn fieldConfig.defaults.custom.hideFrom.withViz","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withViz(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/pieChart/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/pieChart/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/pieChart/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/pieChart/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/pieChart/index.html#fn-optionswithdisplaylabels","title":"fn options.withDisplayLabels","text":"<pre><code>options.withDisplayLabels(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionswithdisplaylabelsmixin","title":"fn options.withDisplayLabelsMixin","text":"<pre><code>options.withDisplayLabelsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionswithlegend","title":"fn options.withLegend","text":"<pre><code>options.withLegend(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionswithlegendmixin","title":"fn options.withLegendMixin","text":"<pre><code>options.withLegendMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionswithorientation","title":"fn options.withOrientation","text":"<pre><code>options.withOrientation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"vertical\"</code>, <code>\"horizontal\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/pieChart/index.html#fn-optionswithpietype","title":"fn options.withPieType","text":"<pre><code>options.withPieType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"pie\"</code>, <code>\"donut\"</code></li> </ul> </li> </ul> <p>Select the pie chart display style.</p>"},{"location":"API/panel/pieChart/index.html#fn-optionswithreduceoptions","title":"fn options.withReduceOptions","text":"<pre><code>options.withReduceOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/pieChart/index.html#fn-optionswithreduceoptionsmixin","title":"fn options.withReduceOptionsMixin","text":"<pre><code>options.withReduceOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/pieChart/index.html#fn-optionswithtext","title":"fn options.withText","text":"<pre><code>options.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/pieChart/index.html#fn-optionswithtextmixin","title":"fn options.withTextMixin","text":"<pre><code>options.withTextMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/pieChart/index.html#fn-optionswithtooltip","title":"fn options.withTooltip","text":"<pre><code>options.withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/pieChart/index.html#fn-optionswithtooltipmixin","title":"fn options.withTooltipMixin","text":"<pre><code>options.withTooltipMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/pieChart/index.html#obj-optionslegend","title":"obj options.legend","text":""},{"location":"API/panel/pieChart/index.html#fn-optionslegendwithastable","title":"fn options.legend.withAsTable","text":"<pre><code>options.legend.withAsTable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionslegendwithcalcs","title":"fn options.legend.withCalcs","text":"<pre><code>options.legend.withCalcs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionslegendwithcalcsmixin","title":"fn options.legend.withCalcsMixin","text":"<pre><code>options.legend.withCalcsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionslegendwithdisplaymode","title":"fn options.legend.withDisplayMode","text":"<pre><code>options.legend.withDisplayMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"list\"</code>, <code>\"table\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs Note: \"hidden\" needs to remain as an option for plugins compatibility</p>"},{"location":"API/panel/pieChart/index.html#fn-optionslegendwithisvisible","title":"fn options.legend.withIsVisible","text":"<pre><code>options.legend.withIsVisible(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionslegendwithplacement","title":"fn options.legend.withPlacement","text":"<pre><code>options.legend.withPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"bottom\"</code>, <code>\"right\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/pieChart/index.html#fn-optionslegendwithshowlegend","title":"fn options.legend.withShowLegend","text":"<pre><code>options.legend.withShowLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionslegendwithsortby","title":"fn options.legend.withSortBy","text":"<pre><code>options.legend.withSortBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionslegendwithsortdesc","title":"fn options.legend.withSortDesc","text":"<pre><code>options.legend.withSortDesc(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionslegendwithvalues","title":"fn options.legend.withValues","text":"<pre><code>options.legend.withValues(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionslegendwithvaluesmixin","title":"fn options.legend.withValuesMixin","text":"<pre><code>options.legend.withValuesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionslegendwithwidth","title":"fn options.legend.withWidth","text":"<pre><code>options.legend.withWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/pieChart/index.html#obj-optionsreduceoptions","title":"obj options.reduceOptions","text":""},{"location":"API/panel/pieChart/index.html#fn-optionsreduceoptionswithcalcs","title":"fn options.reduceOptions.withCalcs","text":"<pre><code>options.reduceOptions.withCalcs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>When !values, pick one value for the whole field</p>"},{"location":"API/panel/pieChart/index.html#fn-optionsreduceoptionswithcalcsmixin","title":"fn options.reduceOptions.withCalcsMixin","text":"<pre><code>options.reduceOptions.withCalcsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>When !values, pick one value for the whole field</p>"},{"location":"API/panel/pieChart/index.html#fn-optionsreduceoptionswithfields","title":"fn options.reduceOptions.withFields","text":"<pre><code>options.reduceOptions.withFields(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Which fields to show.  By default this is only numeric fields</p>"},{"location":"API/panel/pieChart/index.html#fn-optionsreduceoptionswithlimit","title":"fn options.reduceOptions.withLimit","text":"<pre><code>options.reduceOptions.withLimit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>if showing all values limit</p>"},{"location":"API/panel/pieChart/index.html#fn-optionsreduceoptionswithvalues","title":"fn options.reduceOptions.withValues","text":"<pre><code>options.reduceOptions.withValues(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true show each row value</p>"},{"location":"API/panel/pieChart/index.html#obj-optionstext","title":"obj options.text","text":""},{"location":"API/panel/pieChart/index.html#fn-optionstextwithtitlesize","title":"fn options.text.withTitleSize","text":"<pre><code>options.text.withTitleSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Explicit title text size</p>"},{"location":"API/panel/pieChart/index.html#fn-optionstextwithvaluesize","title":"fn options.text.withValueSize","text":"<pre><code>options.text.withValueSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Explicit value text size</p>"},{"location":"API/panel/pieChart/index.html#obj-optionstooltip","title":"obj options.tooltip","text":""},{"location":"API/panel/pieChart/index.html#fn-optionstooltipwithmaxheight","title":"fn options.tooltip.withMaxHeight","text":"<pre><code>options.tooltip.withMaxHeight(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionstooltipwithmaxwidth","title":"fn options.tooltip.withMaxWidth","text":"<pre><code>options.tooltip.withMaxWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/pieChart/index.html#fn-optionstooltipwithmode","title":"fn options.tooltip.withMode","text":"<pre><code>options.tooltip.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"single\"</code>, <code>\"multi\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/pieChart/index.html#fn-optionstooltipwithsort","title":"fn options.tooltip.withSort","text":"<pre><code>options.tooltip.withSort(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"asc\"</code>, <code>\"desc\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/pieChart/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/pieChart/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/pieChart/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/pieChart/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/pieChart/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/pieChart/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/pieChart/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/pieChart/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/pieChart/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/pieChart/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/pieChart/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/pieChart/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/pieChart/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/pieChart/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/pieChart/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/pieChart/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/pieChart/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/pieChart/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/pieChart/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/pieChart/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/pieChart/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/pieChart/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/pieChart/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/pieChart/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/pieChart/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/pieChart/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/pieChart/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/pieChart/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/pieChart/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/pieChart/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/pieChart/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/pieChart/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/pieChart/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/pieChart/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/pieChart/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/pieChart/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/pieChart/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/pieChart/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/pieChart/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/pieChart/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/pieChart/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/pieChart/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/pieChart/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/pieChart/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/pieChart/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/pieChart/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/pieChart/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/pieChart/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/pieChart/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/pieChart/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/pieChart/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/pieChart/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/pieChart/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/pieChart/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/pieChart/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/pieChart/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/pieChart/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/pieChart/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/pieChart/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/pieChart/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/pieChart/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/pieChart/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/pieChart/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/pieChart/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/pieChart/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/pieChart/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/pieChart/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/pieChart/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/pieChart/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/pieChart/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/pieChart/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/pieChart/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/pieChart/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/pieChart/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/pieChart/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/pieChart/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/pieChart/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/pieChart/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/pieChart/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/pieChart/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/pieChart/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/pieChart/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/pieChart/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/pieChart/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/pieChart/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/pieChart/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/pieChart/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/pieChart/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/pieChart/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/pieChart/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/stat/index.html","title":"stat","text":"<p>grafonnet.panel.stat</p>"},{"location":"API/panel/stat/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/stat/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withColorMode(value)</code></li> <li><code>fn withGraphMode(value)</code></li> <li><code>fn withJustifyMode(value)</code></li> <li><code>fn withOrientation(value)</code></li> <li><code>fn withReduceOptions(value)</code></li> <li><code>fn withReduceOptionsMixin(value)</code></li> <li><code>fn withShowPercentChange(value=true)</code></li> <li><code>fn withText(value)</code></li> <li><code>fn withTextMixin(value)</code></li> <li><code>fn withTextMode(value)</code></li> <li><code>fn withWideLayout(value=true)</code></li> <li><code>obj reduceOptions</code><ul> <li><code>fn withCalcs(value)</code></li> <li><code>fn withCalcsMixin(value)</code></li> <li><code>fn withFields(value)</code></li> <li><code>fn withLimit(value)</code></li> <li><code>fn withValues(value=true)</code></li> </ul> </li> <li><code>obj text</code><ul> <li><code>fn withTitleSize(value)</code></li> <li><code>fn withValueSize(value)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/stat/index.html#fields","title":"Fields","text":""},{"location":"API/panel/stat/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new stat panel with a title.</p>"},{"location":"API/panel/stat/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/stat/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/stat/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/stat/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/stat/index.html#fn-optionswithcolormode","title":"fn options.withColorMode","text":"<pre><code>options.withColorMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"value\"</code>, <code>\"background\"</code>, <code>\"background_solid\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stat/index.html#fn-optionswithgraphmode","title":"fn options.withGraphMode","text":"<pre><code>options.withGraphMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"line\"</code>, <code>\"area\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stat/index.html#fn-optionswithjustifymode","title":"fn options.withJustifyMode","text":"<pre><code>options.withJustifyMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"center\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stat/index.html#fn-optionswithorientation","title":"fn options.withOrientation","text":"<pre><code>options.withOrientation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"vertical\"</code>, <code>\"horizontal\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stat/index.html#fn-optionswithreduceoptions","title":"fn options.withReduceOptions","text":"<pre><code>options.withReduceOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stat/index.html#fn-optionswithreduceoptionsmixin","title":"fn options.withReduceOptionsMixin","text":"<pre><code>options.withReduceOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stat/index.html#fn-optionswithshowpercentchange","title":"fn options.withShowPercentChange","text":"<pre><code>options.withShowPercentChange(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/stat/index.html#fn-optionswithtext","title":"fn options.withText","text":"<pre><code>options.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stat/index.html#fn-optionswithtextmixin","title":"fn options.withTextMixin","text":"<pre><code>options.withTextMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stat/index.html#fn-optionswithtextmode","title":"fn options.withTextMode","text":"<pre><code>options.withTextMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"value\"</code>, <code>\"value_and_name\"</code>, <code>\"name\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stat/index.html#fn-optionswithwidelayout","title":"fn options.withWideLayout","text":"<pre><code>options.withWideLayout(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/stat/index.html#obj-optionsreduceoptions","title":"obj options.reduceOptions","text":""},{"location":"API/panel/stat/index.html#fn-optionsreduceoptionswithcalcs","title":"fn options.reduceOptions.withCalcs","text":"<pre><code>options.reduceOptions.withCalcs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>When !values, pick one value for the whole field</p>"},{"location":"API/panel/stat/index.html#fn-optionsreduceoptionswithcalcsmixin","title":"fn options.reduceOptions.withCalcsMixin","text":"<pre><code>options.reduceOptions.withCalcsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>When !values, pick one value for the whole field</p>"},{"location":"API/panel/stat/index.html#fn-optionsreduceoptionswithfields","title":"fn options.reduceOptions.withFields","text":"<pre><code>options.reduceOptions.withFields(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Which fields to show.  By default this is only numeric fields</p>"},{"location":"API/panel/stat/index.html#fn-optionsreduceoptionswithlimit","title":"fn options.reduceOptions.withLimit","text":"<pre><code>options.reduceOptions.withLimit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>if showing all values limit</p>"},{"location":"API/panel/stat/index.html#fn-optionsreduceoptionswithvalues","title":"fn options.reduceOptions.withValues","text":"<pre><code>options.reduceOptions.withValues(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true show each row value</p>"},{"location":"API/panel/stat/index.html#obj-optionstext","title":"obj options.text","text":""},{"location":"API/panel/stat/index.html#fn-optionstextwithtitlesize","title":"fn options.text.withTitleSize","text":"<pre><code>options.text.withTitleSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Explicit title text size</p>"},{"location":"API/panel/stat/index.html#fn-optionstextwithvaluesize","title":"fn options.text.withValueSize","text":"<pre><code>options.text.withValueSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Explicit value text size</p>"},{"location":"API/panel/stat/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/stat/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/stat/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/stat/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/stat/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/stat/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/stat/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/stat/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/stat/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/stat/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/stat/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/stat/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/stat/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/stat/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/stat/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/stat/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/stat/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/stat/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/stat/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/stat/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/stat/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/stat/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/stat/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/stat/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/stat/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/stat/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/stat/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/stat/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/stat/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/stat/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/stat/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/stat/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/stat/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/stat/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/stat/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/stat/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/stat/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/stat/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/stat/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/stat/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/stat/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/stat/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/stat/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/stat/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/stat/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/stat/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/stat/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/stat/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/stat/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/stat/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/stat/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/stat/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/stat/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/stat/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/stat/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/stat/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/stat/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/stat/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/stat/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/stat/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/stat/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/stat/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/stat/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/stat/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/stat/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/stat/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/stat/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/stat/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/stat/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/stat/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/stat/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/stat/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/stat/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/stat/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/stat/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/stat/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/stat/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/stat/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/stat/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/stat/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/stat/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/stat/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/stat/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/stat/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/stat/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/stat/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/stat/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/stat/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/stat/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/stat/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/stat/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/stat/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/stat/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/stat/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/stat/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/stat/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/stat/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/stat/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/stat/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/stat/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/stat/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/stat/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/stat/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/stat/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/stat/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/stateTimeline/index.html","title":"stateTimeline","text":"<p>grafonnet.panel.stateTimeline</p>"},{"location":"API/panel/stateTimeline/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/stateTimeline/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj fieldConfig</code><ul> <li><code>obj defaults</code><ul> <li><code>obj custom</code><ul> <li><code>fn withFillOpacity(value=70)</code></li> <li><code>fn withHideFrom(value)</code></li> <li><code>fn withHideFromMixin(value)</code></li> <li><code>fn withLineWidth(value=0)</code></li> <li><code>obj hideFrom</code><ul> <li><code>fn withLegend(value=true)</code></li> <li><code>fn withTooltip(value=true)</code></li> <li><code>fn withViz(value=true)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withAlignValue(value)</code></li> <li><code>fn withLegend(value)</code></li> <li><code>fn withLegendMixin(value)</code></li> <li><code>fn withMergeValues(value=true)</code></li> <li><code>fn withRowHeight(value=0.9)</code></li> <li><code>fn withShowValue(value)</code></li> <li><code>fn withTimezone(value)</code></li> <li><code>fn withTimezoneMixin(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withTooltipMixin(value)</code></li> <li><code>obj legend</code><ul> <li><code>fn withAsTable(value=true)</code></li> <li><code>fn withCalcs(value=[])</code></li> <li><code>fn withCalcsMixin(value=[])</code></li> <li><code>fn withDisplayMode(value)</code></li> <li><code>fn withIsVisible(value=true)</code></li> <li><code>fn withPlacement(value)</code></li> <li><code>fn withShowLegend(value=true)</code></li> <li><code>fn withSortBy(value)</code></li> <li><code>fn withSortDesc(value=true)</code></li> <li><code>fn withWidth(value)</code></li> </ul> </li> <li><code>obj timezone</code><ul> <li><code>fn withTimeZoneBrowser()</code></li> <li><code>fn withTimeZoneUtc()</code></li> </ul> </li> <li><code>obj tooltip</code><ul> <li><code>fn withMaxHeight(value)</code></li> <li><code>fn withMaxWidth(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSort(value)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fields","title":"Fields","text":""},{"location":"API/panel/stateTimeline/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new stateTimeline panel with a title.</p>"},{"location":"API/panel/stateTimeline/index.html#obj-fieldconfig","title":"obj fieldConfig","text":""},{"location":"API/panel/stateTimeline/index.html#obj-fieldconfigdefaults","title":"obj fieldConfig.defaults","text":""},{"location":"API/panel/stateTimeline/index.html#obj-fieldconfigdefaultscustom","title":"obj fieldConfig.defaults.custom","text":""},{"location":"API/panel/stateTimeline/index.html#fn-fieldconfigdefaultscustomwithfillopacity","title":"fn fieldConfig.defaults.custom.withFillOpacity","text":"<pre><code>fieldConfig.defaults.custom.withFillOpacity(value=70)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>70</code></li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fn-fieldconfigdefaultscustomwithhidefrom","title":"fn fieldConfig.defaults.custom.withHideFrom","text":"<pre><code>fieldConfig.defaults.custom.withHideFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stateTimeline/index.html#fn-fieldconfigdefaultscustomwithhidefrommixin","title":"fn fieldConfig.defaults.custom.withHideFromMixin","text":"<pre><code>fieldConfig.defaults.custom.withHideFromMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stateTimeline/index.html#fn-fieldconfigdefaultscustomwithlinewidth","title":"fn fieldConfig.defaults.custom.withLineWidth","text":"<pre><code>fieldConfig.defaults.custom.withLineWidth(value=0)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>0</code></li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/index.html#obj-fieldconfigdefaultscustomhidefrom","title":"obj fieldConfig.defaults.custom.hideFrom","text":""},{"location":"API/panel/stateTimeline/index.html#fn-fieldconfigdefaultscustomhidefromwithlegend","title":"# fn fieldConfig.defaults.custom.hideFrom.withLegend","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fn-fieldconfigdefaultscustomhidefromwithtooltip","title":"# fn fieldConfig.defaults.custom.hideFrom.withTooltip","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withTooltip(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fn-fieldconfigdefaultscustomhidefromwithviz","title":"# fn fieldConfig.defaults.custom.hideFrom.withViz","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withViz(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/stateTimeline/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/stateTimeline/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/stateTimeline/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/stateTimeline/index.html#fn-optionswithalignvalue","title":"fn options.withAlignValue","text":"<pre><code>options.withAlignValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"center\"</code>, <code>\"left\"</code>, <code>\"right\"</code></li> </ul> </li> </ul> <p>Controls the value alignment in the TimelineChart component</p>"},{"location":"API/panel/stateTimeline/index.html#fn-optionswithlegend","title":"fn options.withLegend","text":"<pre><code>options.withLegend(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stateTimeline/index.html#fn-optionswithlegendmixin","title":"fn options.withLegendMixin","text":"<pre><code>options.withLegendMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stateTimeline/index.html#fn-optionswithmergevalues","title":"fn options.withMergeValues","text":"<pre><code>options.withMergeValues(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Merge equal consecutive values</p>"},{"location":"API/panel/stateTimeline/index.html#fn-optionswithrowheight","title":"fn options.withRowHeight","text":"<pre><code>options.withRowHeight(value=0.9)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)<ul> <li>default value: <code>0.9</code></li> </ul> </li> </ul> <p>Controls the row height</p>"},{"location":"API/panel/stateTimeline/index.html#fn-optionswithshowvalue","title":"fn options.withShowValue","text":"<pre><code>options.withShowValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"never\"</code>, <code>\"always\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stateTimeline/index.html#fn-optionswithtimezone","title":"fn options.withTimezone","text":"<pre><code>options.withTimezone(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fn-optionswithtimezonemixin","title":"fn options.withTimezoneMixin","text":"<pre><code>options.withTimezoneMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fn-optionswithtooltip","title":"fn options.withTooltip","text":"<pre><code>options.withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stateTimeline/index.html#fn-optionswithtooltipmixin","title":"fn options.withTooltipMixin","text":"<pre><code>options.withTooltipMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stateTimeline/index.html#obj-optionslegend","title":"obj options.legend","text":""},{"location":"API/panel/stateTimeline/index.html#fn-optionslegendwithastable","title":"fn options.legend.withAsTable","text":"<pre><code>options.legend.withAsTable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fn-optionslegendwithcalcs","title":"fn options.legend.withCalcs","text":"<pre><code>options.legend.withCalcs(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fn-optionslegendwithcalcsmixin","title":"fn options.legend.withCalcsMixin","text":"<pre><code>options.legend.withCalcsMixin(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fn-optionslegendwithdisplaymode","title":"fn options.legend.withDisplayMode","text":"<pre><code>options.legend.withDisplayMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"list\"</code>, <code>\"table\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs Note: \"hidden\" needs to remain as an option for plugins compatibility</p>"},{"location":"API/panel/stateTimeline/index.html#fn-optionslegendwithisvisible","title":"fn options.legend.withIsVisible","text":"<pre><code>options.legend.withIsVisible(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fn-optionslegendwithplacement","title":"fn options.legend.withPlacement","text":"<pre><code>options.legend.withPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"bottom\"</code>, <code>\"right\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stateTimeline/index.html#fn-optionslegendwithshowlegend","title":"fn options.legend.withShowLegend","text":"<pre><code>options.legend.withShowLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fn-optionslegendwithsortby","title":"fn options.legend.withSortBy","text":"<pre><code>options.legend.withSortBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fn-optionslegendwithsortdesc","title":"fn options.legend.withSortDesc","text":"<pre><code>options.legend.withSortDesc(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fn-optionslegendwithwidth","title":"fn options.legend.withWidth","text":"<pre><code>options.legend.withWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/stateTimeline/index.html#obj-optionstimezone","title":"obj options.timezone","text":""},{"location":"API/panel/stateTimeline/index.html#fn-optionstimezonewithtimezonebrowser","title":"fn options.timezone.withTimeZoneBrowser","text":"<pre><code>options.timezone.withTimeZoneBrowser()\n</code></pre> <p>Use the timezone defined by end user web browser</p>"},{"location":"API/panel/stateTimeline/index.html#fn-optionstimezonewithtimezoneutc","title":"fn options.timezone.withTimeZoneUtc","text":"<pre><code>options.timezone.withTimeZoneUtc()\n</code></pre> <p>Use UTC/GMT timezone</p>"},{"location":"API/panel/stateTimeline/index.html#obj-optionstooltip","title":"obj options.tooltip","text":""},{"location":"API/panel/stateTimeline/index.html#fn-optionstooltipwithmaxheight","title":"fn options.tooltip.withMaxHeight","text":"<pre><code>options.tooltip.withMaxHeight(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fn-optionstooltipwithmaxwidth","title":"fn options.tooltip.withMaxWidth","text":"<pre><code>options.tooltip.withMaxWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/stateTimeline/index.html#fn-optionstooltipwithmode","title":"fn options.tooltip.withMode","text":"<pre><code>options.tooltip.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"single\"</code>, <code>\"multi\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stateTimeline/index.html#fn-optionstooltipwithsort","title":"fn options.tooltip.withSort","text":"<pre><code>options.tooltip.withSort(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"asc\"</code>, <code>\"desc\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/stateTimeline/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/stateTimeline/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/stateTimeline/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/stateTimeline/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/stateTimeline/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/stateTimeline/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/stateTimeline/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/stateTimeline/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/stateTimeline/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/stateTimeline/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/stateTimeline/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/stateTimeline/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/stateTimeline/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/stateTimeline/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/stateTimeline/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/stateTimeline/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/stateTimeline/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/stateTimeline/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/stateTimeline/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/stateTimeline/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/stateTimeline/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/stateTimeline/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/stateTimeline/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/stateTimeline/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/stateTimeline/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/stateTimeline/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/stateTimeline/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/stateTimeline/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/stateTimeline/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/stateTimeline/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/stateTimeline/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/stateTimeline/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/stateTimeline/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/stateTimeline/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/stateTimeline/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/stateTimeline/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/stateTimeline/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/stateTimeline/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/stateTimeline/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/stateTimeline/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/stateTimeline/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/stateTimeline/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/stateTimeline/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/stateTimeline/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/stateTimeline/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/stateTimeline/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/stateTimeline/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/stateTimeline/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/stateTimeline/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/stateTimeline/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/stateTimeline/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/statusHistory/index.html","title":"statusHistory","text":"<p>grafonnet.panel.statusHistory</p>"},{"location":"API/panel/statusHistory/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/statusHistory/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj fieldConfig</code><ul> <li><code>obj defaults</code><ul> <li><code>obj custom</code><ul> <li><code>fn withFillOpacity(value=70)</code></li> <li><code>fn withHideFrom(value)</code></li> <li><code>fn withHideFromMixin(value)</code></li> <li><code>fn withLineWidth(value=1)</code></li> <li><code>obj hideFrom</code><ul> <li><code>fn withLegend(value=true)</code></li> <li><code>fn withTooltip(value=true)</code></li> <li><code>fn withViz(value=true)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withColWidth(value=0.9)</code></li> <li><code>fn withLegend(value)</code></li> <li><code>fn withLegendMixin(value)</code></li> <li><code>fn withRowHeight(value=0.9)</code></li> <li><code>fn withShowValue(value)</code></li> <li><code>fn withTimezone(value)</code></li> <li><code>fn withTimezoneMixin(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withTooltipMixin(value)</code></li> <li><code>obj legend</code><ul> <li><code>fn withAsTable(value=true)</code></li> <li><code>fn withCalcs(value=[])</code></li> <li><code>fn withCalcsMixin(value=[])</code></li> <li><code>fn withDisplayMode(value)</code></li> <li><code>fn withIsVisible(value=true)</code></li> <li><code>fn withPlacement(value)</code></li> <li><code>fn withShowLegend(value=true)</code></li> <li><code>fn withSortBy(value)</code></li> <li><code>fn withSortDesc(value=true)</code></li> <li><code>fn withWidth(value)</code></li> </ul> </li> <li><code>obj timezone</code><ul> <li><code>fn withTimeZoneBrowser()</code></li> <li><code>fn withTimeZoneUtc()</code></li> </ul> </li> <li><code>obj tooltip</code><ul> <li><code>fn withMaxHeight(value)</code></li> <li><code>fn withMaxWidth(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSort(value)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/index.html#fields","title":"Fields","text":""},{"location":"API/panel/statusHistory/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new statusHistory panel with a title.</p>"},{"location":"API/panel/statusHistory/index.html#obj-fieldconfig","title":"obj fieldConfig","text":""},{"location":"API/panel/statusHistory/index.html#obj-fieldconfigdefaults","title":"obj fieldConfig.defaults","text":""},{"location":"API/panel/statusHistory/index.html#obj-fieldconfigdefaultscustom","title":"obj fieldConfig.defaults.custom","text":""},{"location":"API/panel/statusHistory/index.html#fn-fieldconfigdefaultscustomwithfillopacity","title":"fn fieldConfig.defaults.custom.withFillOpacity","text":"<pre><code>fieldConfig.defaults.custom.withFillOpacity(value=70)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>70</code></li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/index.html#fn-fieldconfigdefaultscustomwithhidefrom","title":"fn fieldConfig.defaults.custom.withHideFrom","text":"<pre><code>fieldConfig.defaults.custom.withHideFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/statusHistory/index.html#fn-fieldconfigdefaultscustomwithhidefrommixin","title":"fn fieldConfig.defaults.custom.withHideFromMixin","text":"<pre><code>fieldConfig.defaults.custom.withHideFromMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/statusHistory/index.html#fn-fieldconfigdefaultscustomwithlinewidth","title":"fn fieldConfig.defaults.custom.withLineWidth","text":"<pre><code>fieldConfig.defaults.custom.withLineWidth(value=1)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)<ul> <li>default value: <code>1</code></li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/index.html#obj-fieldconfigdefaultscustomhidefrom","title":"obj fieldConfig.defaults.custom.hideFrom","text":""},{"location":"API/panel/statusHistory/index.html#fn-fieldconfigdefaultscustomhidefromwithlegend","title":"# fn fieldConfig.defaults.custom.hideFrom.withLegend","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/index.html#fn-fieldconfigdefaultscustomhidefromwithtooltip","title":"# fn fieldConfig.defaults.custom.hideFrom.withTooltip","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withTooltip(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/index.html#fn-fieldconfigdefaultscustomhidefromwithviz","title":"# fn fieldConfig.defaults.custom.hideFrom.withViz","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withViz(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/statusHistory/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/statusHistory/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/statusHistory/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/statusHistory/index.html#fn-optionswithcolwidth","title":"fn options.withColWidth","text":"<pre><code>options.withColWidth(value=0.9)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)<ul> <li>default value: <code>0.9</code></li> </ul> </li> </ul> <p>Controls the column width</p>"},{"location":"API/panel/statusHistory/index.html#fn-optionswithlegend","title":"fn options.withLegend","text":"<pre><code>options.withLegend(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/statusHistory/index.html#fn-optionswithlegendmixin","title":"fn options.withLegendMixin","text":"<pre><code>options.withLegendMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/statusHistory/index.html#fn-optionswithrowheight","title":"fn options.withRowHeight","text":"<pre><code>options.withRowHeight(value=0.9)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)<ul> <li>default value: <code>0.9</code></li> </ul> </li> </ul> <p>Set the height of the rows</p>"},{"location":"API/panel/statusHistory/index.html#fn-optionswithshowvalue","title":"fn options.withShowValue","text":"<pre><code>options.withShowValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"never\"</code>, <code>\"always\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/statusHistory/index.html#fn-optionswithtimezone","title":"fn options.withTimezone","text":"<pre><code>options.withTimezone(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/statusHistory/index.html#fn-optionswithtimezonemixin","title":"fn options.withTimezoneMixin","text":"<pre><code>options.withTimezoneMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/statusHistory/index.html#fn-optionswithtooltip","title":"fn options.withTooltip","text":"<pre><code>options.withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/statusHistory/index.html#fn-optionswithtooltipmixin","title":"fn options.withTooltipMixin","text":"<pre><code>options.withTooltipMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/statusHistory/index.html#obj-optionslegend","title":"obj options.legend","text":""},{"location":"API/panel/statusHistory/index.html#fn-optionslegendwithastable","title":"fn options.legend.withAsTable","text":"<pre><code>options.legend.withAsTable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/index.html#fn-optionslegendwithcalcs","title":"fn options.legend.withCalcs","text":"<pre><code>options.legend.withCalcs(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/index.html#fn-optionslegendwithcalcsmixin","title":"fn options.legend.withCalcsMixin","text":"<pre><code>options.legend.withCalcsMixin(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/index.html#fn-optionslegendwithdisplaymode","title":"fn options.legend.withDisplayMode","text":"<pre><code>options.legend.withDisplayMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"list\"</code>, <code>\"table\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs Note: \"hidden\" needs to remain as an option for plugins compatibility</p>"},{"location":"API/panel/statusHistory/index.html#fn-optionslegendwithisvisible","title":"fn options.legend.withIsVisible","text":"<pre><code>options.legend.withIsVisible(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/index.html#fn-optionslegendwithplacement","title":"fn options.legend.withPlacement","text":"<pre><code>options.legend.withPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"bottom\"</code>, <code>\"right\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/statusHistory/index.html#fn-optionslegendwithshowlegend","title":"fn options.legend.withShowLegend","text":"<pre><code>options.legend.withShowLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/index.html#fn-optionslegendwithsortby","title":"fn options.legend.withSortBy","text":"<pre><code>options.legend.withSortBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/statusHistory/index.html#fn-optionslegendwithsortdesc","title":"fn options.legend.withSortDesc","text":"<pre><code>options.legend.withSortDesc(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/index.html#fn-optionslegendwithwidth","title":"fn options.legend.withWidth","text":"<pre><code>options.legend.withWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/statusHistory/index.html#obj-optionstimezone","title":"obj options.timezone","text":""},{"location":"API/panel/statusHistory/index.html#fn-optionstimezonewithtimezonebrowser","title":"fn options.timezone.withTimeZoneBrowser","text":"<pre><code>options.timezone.withTimeZoneBrowser()\n</code></pre> <p>Use the timezone defined by end user web browser</p>"},{"location":"API/panel/statusHistory/index.html#fn-optionstimezonewithtimezoneutc","title":"fn options.timezone.withTimeZoneUtc","text":"<pre><code>options.timezone.withTimeZoneUtc()\n</code></pre> <p>Use UTC/GMT timezone</p>"},{"location":"API/panel/statusHistory/index.html#obj-optionstooltip","title":"obj options.tooltip","text":""},{"location":"API/panel/statusHistory/index.html#fn-optionstooltipwithmaxheight","title":"fn options.tooltip.withMaxHeight","text":"<pre><code>options.tooltip.withMaxHeight(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/statusHistory/index.html#fn-optionstooltipwithmaxwidth","title":"fn options.tooltip.withMaxWidth","text":"<pre><code>options.tooltip.withMaxWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/statusHistory/index.html#fn-optionstooltipwithmode","title":"fn options.tooltip.withMode","text":"<pre><code>options.tooltip.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"single\"</code>, <code>\"multi\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/statusHistory/index.html#fn-optionstooltipwithsort","title":"fn options.tooltip.withSort","text":"<pre><code>options.tooltip.withSort(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"asc\"</code>, <code>\"desc\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/statusHistory/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/statusHistory/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/statusHistory/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/statusHistory/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/statusHistory/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/statusHistory/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/statusHistory/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/statusHistory/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/statusHistory/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/statusHistory/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/statusHistory/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/statusHistory/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/statusHistory/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/statusHistory/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/statusHistory/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/statusHistory/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/statusHistory/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/statusHistory/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/statusHistory/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/statusHistory/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/statusHistory/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/statusHistory/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/statusHistory/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/statusHistory/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/statusHistory/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/statusHistory/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/statusHistory/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/statusHistory/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/statusHistory/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/statusHistory/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/statusHistory/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/statusHistory/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/statusHistory/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/statusHistory/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/statusHistory/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/statusHistory/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/statusHistory/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/statusHistory/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/statusHistory/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/statusHistory/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/statusHistory/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/statusHistory/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/statusHistory/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/statusHistory/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/statusHistory/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/statusHistory/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/statusHistory/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/statusHistory/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/statusHistory/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/statusHistory/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/statusHistory/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/statusHistory/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/statusHistory/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/statusHistory/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/statusHistory/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/statusHistory/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/statusHistory/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/statusHistory/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/statusHistory/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/statusHistory/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/statusHistory/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/statusHistory/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/statusHistory/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/statusHistory/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/statusHistory/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/statusHistory/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/statusHistory/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/statusHistory/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/statusHistory/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/statusHistory/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/statusHistory/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/statusHistory/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/statusHistory/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/statusHistory/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/table/index.html","title":"table","text":"<p>grafonnet.panel.table</p>"},{"location":"API/panel/table/index.html#subpackages","title":"Subpackages","text":"<ul> <li>options.sortBy</li> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/table/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj fieldConfig</code><ul> <li><code>obj defaults</code><ul> <li><code>obj custom</code><ul> <li><code>fn withAlign(value)</code></li> <li><code>fn withCellOptions(value)</code></li> <li><code>fn withCellOptionsMixin(value)</code></li> <li><code>fn withDisplayMode(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withHidden(value=true)</code></li> <li><code>fn withHideHeader(value=true)</code></li> <li><code>fn withInspect(value=true)</code></li> <li><code>fn withMinWidth(value)</code></li> <li><code>fn withWidth(value)</code></li> <li><code>obj cellOptions</code><ul> <li><code>fn withTableAutoCellOptions(value)</code></li> <li><code>fn withTableAutoCellOptionsMixin(value)</code></li> <li><code>fn withTableBarGaugeCellOptions(value)</code></li> <li><code>fn withTableBarGaugeCellOptionsMixin(value)</code></li> <li><code>fn withTableColorTextCellOptions(value)</code></li> <li><code>fn withTableColorTextCellOptionsMixin(value)</code></li> <li><code>fn withTableColoredBackgroundCellOptions(value)</code></li> <li><code>fn withTableColoredBackgroundCellOptionsMixin(value)</code></li> <li><code>fn withTableDataLinksCellOptions(value)</code></li> <li><code>fn withTableDataLinksCellOptionsMixin(value)</code></li> <li><code>fn withTableImageCellOptions(value)</code></li> <li><code>fn withTableImageCellOptionsMixin(value)</code></li> <li><code>fn withTableJsonViewCellOptions(value)</code></li> <li><code>fn withTableJsonViewCellOptionsMixin(value)</code></li> <li><code>fn withTableSparklineCellOptions(value)</code></li> <li><code>fn withTableSparklineCellOptionsMixin(value)</code></li> <li><code>obj TableAutoCellOptions</code><ul> <li><code>fn withType()</code></li> </ul> </li> <li><code>obj TableBarGaugeCellOptions</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withType()</code></li> <li><code>fn withValueDisplayMode(value)</code></li> </ul> </li> <li><code>obj TableColorTextCellOptions</code><ul> <li><code>fn withType()</code></li> </ul> </li> <li><code>obj TableColoredBackgroundCellOptions</code><ul> <li><code>fn withApplyToRow(value=true)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> <li><code>obj TableDataLinksCellOptions</code><ul> <li><code>fn withType()</code></li> </ul> </li> <li><code>obj TableImageCellOptions</code><ul> <li><code>fn withType()</code></li> </ul> </li> <li><code>obj TableJsonViewCellOptions</code><ul> <li><code>fn withType()</code></li> </ul> </li> <li><code>obj TableSparklineCellOptions</code><ul> <li><code>fn withAxisBorderShow(value=true)</code></li> <li><code>fn withAxisCenteredZero(value=true)</code></li> <li><code>fn withAxisColorMode(value)</code></li> <li><code>fn withAxisGridShow(value=true)</code></li> <li><code>fn withAxisLabel(value)</code></li> <li><code>fn withAxisPlacement(value)</code></li> <li><code>fn withAxisSoftMax(value)</code></li> <li><code>fn withAxisSoftMin(value)</code></li> <li><code>fn withAxisWidth(value)</code></li> <li><code>fn withBarAlignment(value)</code></li> <li><code>fn withBarMaxWidth(value)</code></li> <li><code>fn withBarWidthFactor(value)</code></li> <li><code>fn withDrawStyle(value)</code></li> <li><code>fn withFillBelowTo(value)</code></li> <li><code>fn withFillColor(value)</code></li> <li><code>fn withFillOpacity(value)</code></li> <li><code>fn withGradientMode(value)</code></li> <li><code>fn withHideFrom(value)</code></li> <li><code>fn withHideFromMixin(value)</code></li> <li><code>fn withHideValue(value=true)</code></li> <li><code>fn withLineColor(value)</code></li> <li><code>fn withLineInterpolation(value)</code></li> <li><code>fn withLineStyle(value)</code></li> <li><code>fn withLineStyleMixin(value)</code></li> <li><code>fn withLineWidth(value)</code></li> <li><code>fn withPointColor(value)</code></li> <li><code>fn withPointSize(value)</code></li> <li><code>fn withPointSymbol(value)</code></li> <li><code>fn withScaleDistribution(value)</code></li> <li><code>fn withScaleDistributionMixin(value)</code></li> <li><code>fn withShowPoints(value)</code></li> <li><code>fn withSpanNulls(value)</code></li> <li><code>fn withSpanNullsMixin(value)</code></li> <li><code>fn withStacking(value)</code></li> <li><code>fn withStackingMixin(value)</code></li> <li><code>fn withThresholdsStyle(value)</code></li> <li><code>fn withThresholdsStyleMixin(value)</code></li> <li><code>fn withTransform(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj hideFrom</code><ul> <li><code>fn withLegend(value=true)</code></li> <li><code>fn withTooltip(value=true)</code></li> <li><code>fn withViz(value=true)</code></li> </ul> </li> <li><code>obj lineStyle</code><ul> <li><code>fn withDash(value)</code></li> <li><code>fn withDashMixin(value)</code></li> <li><code>fn withFill(value)</code></li> </ul> </li> <li><code>obj scaleDistribution</code><ul> <li><code>fn withLinearThreshold(value)</code></li> <li><code>fn withLog(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> <li><code>obj stacking</code><ul> <li><code>fn withGroup(value)</code></li> <li><code>fn withMode(value)</code></li> </ul> </li> <li><code>obj thresholdsStyle</code><ul> <li><code>fn withMode(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withCellHeight(value)</code></li> <li><code>fn withFooter(value)</code></li> <li><code>fn withFooterMixin(value)</code></li> <li><code>fn withFrameIndex(value=0)</code></li> <li><code>fn withShowHeader(value=true)</code></li> <li><code>fn withShowTypeIcons(value=true)</code></li> <li><code>fn withSortBy(value)</code></li> <li><code>fn withSortByMixin(value)</code></li> <li><code>obj footer</code><ul> <li><code>fn withCountRows(value=true)</code></li> <li><code>fn withEnablePagination(value=true)</code></li> <li><code>fn withFields(value)</code></li> <li><code>fn withFieldsMixin(value)</code></li> <li><code>fn withReducer(value)</code></li> <li><code>fn withReducerMixin(value)</code></li> <li><code>fn withShow(value=true)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#fields","title":"Fields","text":""},{"location":"API/panel/table/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new table panel with a title.</p>"},{"location":"API/panel/table/index.html#obj-fieldconfig","title":"obj fieldConfig","text":""},{"location":"API/panel/table/index.html#obj-fieldconfigdefaults","title":"obj fieldConfig.defaults","text":""},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustom","title":"obj fieldConfig.defaults.custom","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomwithalign","title":"fn fieldConfig.defaults.custom.withAlign","text":"<pre><code>fieldConfig.defaults.custom.withAlign(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"left\"</code>, <code>\"right\"</code>, <code>\"center\"</code></li> </ul> </li> </ul> <p>TODO -- should not be table specific! TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomwithcelloptions","title":"fn fieldConfig.defaults.custom.withCellOptions","text":"<pre><code>fieldConfig.defaults.custom.withCellOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Table cell options. Each cell has a display mode and other potential options for that display.</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomwithcelloptionsmixin","title":"fn fieldConfig.defaults.custom.withCellOptionsMixin","text":"<pre><code>fieldConfig.defaults.custom.withCellOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Table cell options. Each cell has a display mode and other potential options for that display.</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomwithdisplaymode","title":"fn fieldConfig.defaults.custom.withDisplayMode","text":"<pre><code>fieldConfig.defaults.custom.withDisplayMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"color-text\"</code>, <code>\"color-background\"</code>, <code>\"color-background-solid\"</code>, <code>\"gradient-gauge\"</code>, <code>\"lcd-gauge\"</code>, <code>\"json-view\"</code>, <code>\"basic\"</code>, <code>\"image\"</code>, <code>\"gauge\"</code>, <code>\"sparkline\"</code>, <code>\"data-links\"</code>, <code>\"custom\"</code></li> </ul> </li> </ul> <p>Internally, this is the \"type\" of cell that's being displayed in the table such as colored text, JSON, gauge, etc. The color-background-solid, gradient-gauge, and lcd-gauge modes are deprecated in favor of new cell subOptions</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomwithfilterable","title":"fn fieldConfig.defaults.custom.withFilterable","text":"<pre><code>fieldConfig.defaults.custom.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomwithhidden","title":"fn fieldConfig.defaults.custom.withHidden","text":"<pre><code>fieldConfig.defaults.custom.withHidden(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>?? default is missing or false ??</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomwithhideheader","title":"fn fieldConfig.defaults.custom.withHideHeader","text":"<pre><code>fieldConfig.defaults.custom.withHideHeader(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Hides any header for a column, useful for columns that show some static content or buttons.</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomwithinspect","title":"fn fieldConfig.defaults.custom.withInspect","text":"<pre><code>fieldConfig.defaults.custom.withInspect(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomwithminwidth","title":"fn fieldConfig.defaults.custom.withMinWidth","text":"<pre><code>fieldConfig.defaults.custom.withMinWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomwithwidth","title":"fn fieldConfig.defaults.custom.withWidth","text":"<pre><code>fieldConfig.defaults.custom.withWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustomcelloptions","title":"obj fieldConfig.defaults.custom.cellOptions","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtableautocelloptions","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableAutoCellOptions","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableAutoCellOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Auto mode table cell options</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtableautocelloptionsmixin","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableAutoCellOptionsMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableAutoCellOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Auto mode table cell options</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtablebargaugecelloptions","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableBarGaugeCellOptions","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableBarGaugeCellOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Gauge cell options</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtablebargaugecelloptionsmixin","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableBarGaugeCellOptionsMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableBarGaugeCellOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Gauge cell options</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtablecolortextcelloptions","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableColorTextCellOptions","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableColorTextCellOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Colored text cell options</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtablecolortextcelloptionsmixin","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableColorTextCellOptionsMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableColorTextCellOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Colored text cell options</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtablecoloredbackgroundcelloptions","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableColoredBackgroundCellOptions","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableColoredBackgroundCellOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Colored background cell options</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtablecoloredbackgroundcelloptionsmixin","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableColoredBackgroundCellOptionsMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableColoredBackgroundCellOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Colored background cell options</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtabledatalinkscelloptions","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableDataLinksCellOptions","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableDataLinksCellOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Show data links in the cell</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtabledatalinkscelloptionsmixin","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableDataLinksCellOptionsMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableDataLinksCellOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Show data links in the cell</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtableimagecelloptions","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableImageCellOptions","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableImageCellOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Json view cell options</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtableimagecelloptionsmixin","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableImageCellOptionsMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableImageCellOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Json view cell options</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtablejsonviewcelloptions","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableJsonViewCellOptions","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableJsonViewCellOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Json view cell options</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtablejsonviewcelloptionsmixin","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableJsonViewCellOptionsMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableJsonViewCellOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Json view cell options</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtablesparklinecelloptions","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableSparklineCellOptions","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableSparklineCellOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Sparkline cell options</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionswithtablesparklinecelloptionsmixin","title":"# fn fieldConfig.defaults.custom.cellOptions.withTableSparklineCellOptionsMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.withTableSparklineCellOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Sparkline cell options</p>"},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustomcelloptionstableautocelloptions","title":"# obj fieldConfig.defaults.custom.cellOptions.TableAutoCellOptions","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstableautocelloptionswithtype","title":"## fn fieldConfig.defaults.custom.cellOptions.TableAutoCellOptions.withType","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableAutoCellOptions.withType()\n</code></pre>"},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustomcelloptionstablebargaugecelloptions","title":"# obj fieldConfig.defaults.custom.cellOptions.TableBarGaugeCellOptions","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablebargaugecelloptionswithmode","title":"## fn fieldConfig.defaults.custom.cellOptions.TableBarGaugeCellOptions.withMode","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableBarGaugeCellOptions.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"basic\"</code>, <code>\"lcd\"</code>, <code>\"gradient\"</code></li> </ul> </li> </ul> <p>Enum expressing the possible display modes for the bar gauge component of Grafana UI</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablebargaugecelloptionswithtype","title":"## fn fieldConfig.defaults.custom.cellOptions.TableBarGaugeCellOptions.withType","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableBarGaugeCellOptions.withType()\n</code></pre>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablebargaugecelloptionswithvaluedisplaymode","title":"## fn fieldConfig.defaults.custom.cellOptions.TableBarGaugeCellOptions.withValueDisplayMode","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableBarGaugeCellOptions.withValueDisplayMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"color\"</code>, <code>\"text\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>Allows for the table cell gauge display type to set the gauge mode.</p>"},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustomcelloptionstablecolortextcelloptions","title":"# obj fieldConfig.defaults.custom.cellOptions.TableColorTextCellOptions","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablecolortextcelloptionswithtype","title":"## fn fieldConfig.defaults.custom.cellOptions.TableColorTextCellOptions.withType","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableColorTextCellOptions.withType()\n</code></pre>"},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustomcelloptionstablecoloredbackgroundcelloptions","title":"# obj fieldConfig.defaults.custom.cellOptions.TableColoredBackgroundCellOptions","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablecoloredbackgroundcelloptionswithapplytorow","title":"## fn fieldConfig.defaults.custom.cellOptions.TableColoredBackgroundCellOptions.withApplyToRow","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableColoredBackgroundCellOptions.withApplyToRow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablecoloredbackgroundcelloptionswithmode","title":"## fn fieldConfig.defaults.custom.cellOptions.TableColoredBackgroundCellOptions.withMode","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableColoredBackgroundCellOptions.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"basic\"</code>, <code>\"gradient\"</code></li> </ul> </li> </ul> <p>Display mode to the \"Colored Background\" display mode for table cells. Either displays a solid color (basic mode) or a gradient.</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablecoloredbackgroundcelloptionswithtype","title":"## fn fieldConfig.defaults.custom.cellOptions.TableColoredBackgroundCellOptions.withType","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableColoredBackgroundCellOptions.withType()\n</code></pre>"},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustomcelloptionstabledatalinkscelloptions","title":"# obj fieldConfig.defaults.custom.cellOptions.TableDataLinksCellOptions","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstabledatalinkscelloptionswithtype","title":"## fn fieldConfig.defaults.custom.cellOptions.TableDataLinksCellOptions.withType","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableDataLinksCellOptions.withType()\n</code></pre>"},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustomcelloptionstableimagecelloptions","title":"# obj fieldConfig.defaults.custom.cellOptions.TableImageCellOptions","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstableimagecelloptionswithtype","title":"## fn fieldConfig.defaults.custom.cellOptions.TableImageCellOptions.withType","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableImageCellOptions.withType()\n</code></pre>"},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustomcelloptionstablejsonviewcelloptions","title":"# obj fieldConfig.defaults.custom.cellOptions.TableJsonViewCellOptions","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablejsonviewcelloptionswithtype","title":"## fn fieldConfig.defaults.custom.cellOptions.TableJsonViewCellOptions.withType","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableJsonViewCellOptions.withType()\n</code></pre>"},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustomcelloptionstablesparklinecelloptions","title":"# obj fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithaxisbordershow","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisBorderShow","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisBorderShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithaxiscenteredzero","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisCenteredZero","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisCenteredZero(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithaxiscolormode","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisColorMode","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisColorMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"text\"</code>, <code>\"series\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithaxisgridshow","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisGridShow","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisGridShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithaxislabel","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisLabel","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithaxisplacement","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisPlacement","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"top\"</code>, <code>\"right\"</code>, <code>\"bottom\"</code>, <code>\"left\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithaxissoftmax","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisSoftMax","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisSoftMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithaxissoftmin","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisSoftMin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisSoftMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithaxiswidth","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisWidth","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withAxisWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithbaralignment","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withBarAlignment","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withBarAlignment(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>-1</code>, <code>0</code>, <code>1</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithbarmaxwidth","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withBarMaxWidth","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withBarMaxWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithbarwidthfactor","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withBarWidthFactor","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withBarWidthFactor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithdrawstyle","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withDrawStyle","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withDrawStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"line\"</code>, <code>\"bars\"</code>, <code>\"points\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithfillbelowto","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withFillBelowTo","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withFillBelowTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithfillcolor","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withFillColor","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withFillColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithfillopacity","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withFillOpacity","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withFillOpacity(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithgradientmode","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withGradientMode","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withGradientMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"opacity\"</code>, <code>\"hue\"</code>, <code>\"scheme\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithhidefrom","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withHideFrom","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withHideFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithhidefrommixin","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withHideFromMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withHideFromMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithhidevalue","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withHideValue","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withHideValue(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithlinecolor","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withLineColor","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withLineColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithlineinterpolation","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withLineInterpolation","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withLineInterpolation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"smooth\"</code>, <code>\"stepBefore\"</code>, <code>\"stepAfter\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithlinestyle","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withLineStyle","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withLineStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithlinestylemixin","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withLineStyleMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withLineStyleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithlinewidth","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withLineWidth","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withLineWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithpointcolor","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withPointColor","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withPointColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithpointsize","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withPointSize","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withPointSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithpointsymbol","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withPointSymbol","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withPointSymbol(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithscaledistribution","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withScaleDistribution","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withScaleDistribution(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithscaledistributionmixin","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withScaleDistributionMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withScaleDistributionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithshowpoints","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withShowPoints","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withShowPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"never\"</code>, <code>\"always\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithspannulls","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withSpanNulls","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withSpanNulls(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>,<code>number</code>)</li> </ul> <p>Indicate if null values should be treated as gaps or connected. When the value is a number, it represents the maximum delta in the X axis that should be considered connected.  For timeseries, this is milliseconds</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithspannullsmixin","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withSpanNullsMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withSpanNullsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>,<code>number</code>)</li> </ul> <p>Indicate if null values should be treated as gaps or connected. When the value is a number, it represents the maximum delta in the X axis that should be considered connected.  For timeseries, this is milliseconds</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithstacking","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withStacking","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withStacking(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithstackingmixin","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withStackingMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withStackingMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswiththresholdsstyle","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withThresholdsStyle","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withThresholdsStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswiththresholdsstylemixin","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withThresholdsStyleMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withThresholdsStyleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithtransform","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withTransform","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withTransform(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"constant\"</code>, <code>\"negative-Y\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionswithtype","title":"## fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withType","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.withType()\n</code></pre>"},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionshidefrom","title":"## obj fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.hideFrom","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionshidefromwithlegend","title":"### fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.hideFrom.withLegend","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.hideFrom.withLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionshidefromwithtooltip","title":"### fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.hideFrom.withTooltip","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.hideFrom.withTooltip(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionshidefromwithviz","title":"### fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.hideFrom.withViz","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.hideFrom.withViz(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionslinestyle","title":"## obj fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.lineStyle","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionslinestylewithdash","title":"### fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.lineStyle.withDash","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.lineStyle.withDash(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionslinestylewithdashmixin","title":"### fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.lineStyle.withDashMixin","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.lineStyle.withDashMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionslinestylewithfill","title":"### fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.lineStyle.withFill","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.lineStyle.withFill(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"solid\"</code>, <code>\"dash\"</code>, <code>\"dot\"</code>, <code>\"square\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionsscaledistribution","title":"## obj fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.scaleDistribution","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionsscaledistributionwithlinearthreshold","title":"### fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.scaleDistribution.withLinearThreshold","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.scaleDistribution.withLinearThreshold(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionsscaledistributionwithlog","title":"### fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.scaleDistribution.withLog","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.scaleDistribution.withLog(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionsscaledistributionwithtype","title":"### fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.scaleDistribution.withType","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.scaleDistribution.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"log\"</code>, <code>\"ordinal\"</code>, <code>\"symlog\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionsstacking","title":"## obj fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.stacking","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionsstackingwithgroup","title":"### fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.stacking.withGroup","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.stacking.withGroup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionsstackingwithmode","title":"### fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.stacking.withMode","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.stacking.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"normal\"</code>, <code>\"percent\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#obj-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionsthresholdsstyle","title":"## obj fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.thresholdsStyle","text":""},{"location":"API/panel/table/index.html#fn-fieldconfigdefaultscustomcelloptionstablesparklinecelloptionsthresholdsstylewithmode","title":"### fn fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.thresholdsStyle.withMode","text":"<pre><code>fieldConfig.defaults.custom.cellOptions.TableSparklineCellOptions.thresholdsStyle.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"off\"</code>, <code>\"line\"</code>, <code>\"dashed\"</code>, <code>\"area\"</code>, <code>\"line+area\"</code>, <code>\"dashed+area\"</code>, <code>\"series\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/table/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/table/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/table/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/table/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/table/index.html#fn-optionswithcellheight","title":"fn options.withCellHeight","text":"<pre><code>options.withCellHeight(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"sm\"</code>, <code>\"md\"</code>, <code>\"lg\"</code></li> </ul> </li> </ul> <p>Height of a table cell</p>"},{"location":"API/panel/table/index.html#fn-optionswithfooter","title":"fn options.withFooter","text":"<pre><code>options.withFooter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Footer options</p>"},{"location":"API/panel/table/index.html#fn-optionswithfootermixin","title":"fn options.withFooterMixin","text":"<pre><code>options.withFooterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Footer options</p>"},{"location":"API/panel/table/index.html#fn-optionswithframeindex","title":"fn options.withFrameIndex","text":"<pre><code>options.withFrameIndex(value=0)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)<ul> <li>default value: <code>0</code></li> </ul> </li> </ul> <p>Represents the index of the selected frame</p>"},{"location":"API/panel/table/index.html#fn-optionswithshowheader","title":"fn options.withShowHeader","text":"<pre><code>options.withShowHeader(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls whether the panel should show the header</p>"},{"location":"API/panel/table/index.html#fn-optionswithshowtypeicons","title":"fn options.withShowTypeIcons","text":"<pre><code>options.withShowTypeIcons(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls whether the header should show icons for the column types</p>"},{"location":"API/panel/table/index.html#fn-optionswithsortby","title":"fn options.withSortBy","text":"<pre><code>options.withSortBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Used to control row sorting</p>"},{"location":"API/panel/table/index.html#fn-optionswithsortbymixin","title":"fn options.withSortByMixin","text":"<pre><code>options.withSortByMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Used to control row sorting</p>"},{"location":"API/panel/table/index.html#obj-optionsfooter","title":"obj options.footer","text":""},{"location":"API/panel/table/index.html#fn-optionsfooterwithcountrows","title":"fn options.footer.withCountRows","text":"<pre><code>options.footer.withCountRows(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#fn-optionsfooterwithenablepagination","title":"fn options.footer.withEnablePagination","text":"<pre><code>options.footer.withEnablePagination(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#fn-optionsfooterwithfields","title":"fn options.footer.withFields","text":"<pre><code>options.footer.withFields(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-optionsfooterwithfieldsmixin","title":"fn options.footer.withFieldsMixin","text":"<pre><code>options.footer.withFieldsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/table/index.html#fn-optionsfooterwithreducer","title":"fn options.footer.withReducer","text":"<pre><code>options.footer.withReducer(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>actually 1 value</p>"},{"location":"API/panel/table/index.html#fn-optionsfooterwithreducermixin","title":"fn options.footer.withReducerMixin","text":"<pre><code>options.footer.withReducerMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>actually 1 value</p>"},{"location":"API/panel/table/index.html#fn-optionsfooterwithshow","title":"fn options.footer.withShow","text":"<pre><code>options.footer.withShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/table/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/table/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/table/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/table/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/table/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/table/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/table/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/table/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/table/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/table/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/table/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/table/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/table/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/table/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/table/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/table/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/table/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/table/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/table/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/table/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/table/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/table/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/table/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/table/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/table/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/table/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/table/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/table/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/table/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/table/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/table/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/table/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/table/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/table/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/table/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/table/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/table/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/table/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/table/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/table/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/table/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/table/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/table/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/table/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/table/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/table/options/sortBy.html","title":"sortBy","text":""},{"location":"API/panel/table/options/sortBy.html#index","title":"Index","text":"<ul> <li><code>fn withDesc(value=true)</code></li> <li><code>fn withDisplayName(value)</code></li> </ul>"},{"location":"API/panel/table/options/sortBy.html#fields","title":"Fields","text":""},{"location":"API/panel/table/options/sortBy.html#fn-withdesc","title":"fn withDesc","text":"<pre><code>withDesc(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Flag used to indicate descending sort order</p>"},{"location":"API/panel/table/options/sortBy.html#fn-withdisplayname","title":"fn withDisplayName","text":"<pre><code>withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Sets the display name of the field to sort by</p>"},{"location":"API/panel/table/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/table/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/table/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/table/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/table/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/table/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/table/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/table/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/table/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/table/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/table/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/table/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/table/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/table/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/table/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/table/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/table/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/table/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/table/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/table/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/table/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/table/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/table/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/table/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/table/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/table/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/table/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/table/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/table/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/table/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/table/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/table/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/table/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/table/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/table/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/table/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/table/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/table/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/table/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/table/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/table/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/table/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/table/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/table/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/table/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/table/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/table/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/table/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/table/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/table/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/table/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/table/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/table/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/table/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/table/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/table/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/table/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/table/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/table/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/table/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/table/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/table/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/table/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/table/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/table/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/table/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/table/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/table/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/table/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/table/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/table/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/table/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/table/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/table/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/table/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/table/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/table/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/table/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/table/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/table/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/text/index.html","title":"text","text":"<p>grafonnet.panel.text</p>"},{"location":"API/panel/text/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/text/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withCode(value)</code></li> <li><code>fn withCodeMixin(value)</code></li> <li><code>fn withContent(value=\"# Title\\n\\nFor markdown syntax help: [commonmark.org/help](https://commonmark.org/help/)\")</code></li> <li><code>fn withMode(value)</code></li> <li><code>obj code</code><ul> <li><code>fn withLanguage(value)</code></li> <li><code>fn withShowLineNumbers(value=true)</code></li> <li><code>fn withShowMiniMap(value=true)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/text/index.html#fields","title":"Fields","text":""},{"location":"API/panel/text/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new text panel with a title.</p>"},{"location":"API/panel/text/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/text/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/text/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/text/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/text/index.html#fn-optionswithcode","title":"fn options.withCode","text":"<pre><code>options.withCode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/text/index.html#fn-optionswithcodemixin","title":"fn options.withCodeMixin","text":"<pre><code>options.withCodeMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/text/index.html#fn-optionswithcontent","title":"fn options.withContent","text":"<pre><code>options.withContent(value=\"# Title\\n\\nFor markdown syntax help: [commonmark.org/help](https://commonmark.org/help/)\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"# Title\\n\\nFor markdown syntax help: [commonmark.org/help](https://commonmark.org/help/)\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/text/index.html#fn-optionswithmode","title":"fn options.withMode","text":"<pre><code>options.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"html\"</code>, <code>\"markdown\"</code>, <code>\"code\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/text/index.html#obj-optionscode","title":"obj options.code","text":""},{"location":"API/panel/text/index.html#fn-optionscodewithlanguage","title":"fn options.code.withLanguage","text":"<pre><code>options.code.withLanguage(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"json\"</code>, <code>\"yaml\"</code>, <code>\"xml\"</code>, <code>\"typescript\"</code>, <code>\"sql\"</code>, <code>\"go\"</code>, <code>\"markdown\"</code>, <code>\"html\"</code>, <code>\"plaintext\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/text/index.html#fn-optionscodewithshowlinenumbers","title":"fn options.code.withShowLineNumbers","text":"<pre><code>options.code.withShowLineNumbers(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/text/index.html#fn-optionscodewithshowminimap","title":"fn options.code.withShowMiniMap","text":"<pre><code>options.code.withShowMiniMap(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/text/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/text/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/text/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/text/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/text/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/text/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/text/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/text/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/text/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/text/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/text/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/text/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/text/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/text/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/text/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/text/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/text/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/text/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/text/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/text/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/text/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/text/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/text/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/text/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/text/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/text/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/text/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/text/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/text/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/text/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/text/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/text/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/text/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/text/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/text/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/text/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/text/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/text/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/text/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/text/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/text/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/text/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/text/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/text/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/text/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/text/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/text/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/text/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/text/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/text/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/text/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/text/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/text/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/text/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/text/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/text/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/text/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/text/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/text/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/text/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/text/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/text/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/text/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/text/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/text/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/text/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/text/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/text/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/text/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/text/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/text/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/text/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/text/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/text/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/text/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/text/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/text/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/text/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/text/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/text/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/text/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/text/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/text/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/text/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/text/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/text/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/text/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/text/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/text/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/text/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/text/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/text/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/text/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/text/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/text/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/text/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/text/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/text/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/text/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/text/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/text/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/text/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/text/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/text/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/text/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/text/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/text/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/text/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/text/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/text/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/text/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/text/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/text/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/text/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/text/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/text/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/text/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/text/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/text/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/text/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/text/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/text/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/text/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/text/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/text/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/text/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/text/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/text/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/timeSeries/index.html","title":"timeSeries","text":"<p>grafonnet.panel.timeSeries</p>"},{"location":"API/panel/timeSeries/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/timeSeries/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj fieldConfig</code><ul> <li><code>obj defaults</code><ul> <li><code>obj custom</code><ul> <li><code>fn withAxisBorderShow(value=true)</code></li> <li><code>fn withAxisCenteredZero(value=true)</code></li> <li><code>fn withAxisColorMode(value)</code></li> <li><code>fn withAxisGridShow(value=true)</code></li> <li><code>fn withAxisLabel(value)</code></li> <li><code>fn withAxisPlacement(value)</code></li> <li><code>fn withAxisSoftMax(value)</code></li> <li><code>fn withAxisSoftMin(value)</code></li> <li><code>fn withAxisWidth(value)</code></li> <li><code>fn withBarAlignment(value)</code></li> <li><code>fn withBarMaxWidth(value)</code></li> <li><code>fn withBarWidthFactor(value)</code></li> <li><code>fn withDrawStyle(value)</code></li> <li><code>fn withFillBelowTo(value)</code></li> <li><code>fn withFillColor(value)</code></li> <li><code>fn withFillOpacity(value)</code></li> <li><code>fn withGradientMode(value)</code></li> <li><code>fn withHideFrom(value)</code></li> <li><code>fn withHideFromMixin(value)</code></li> <li><code>fn withInsertNulls(value)</code></li> <li><code>fn withInsertNullsMixin(value)</code></li> <li><code>fn withLineColor(value)</code></li> <li><code>fn withLineInterpolation(value)</code></li> <li><code>fn withLineStyle(value)</code></li> <li><code>fn withLineStyleMixin(value)</code></li> <li><code>fn withLineWidth(value)</code></li> <li><code>fn withPointColor(value)</code></li> <li><code>fn withPointSize(value)</code></li> <li><code>fn withPointSymbol(value)</code></li> <li><code>fn withScaleDistribution(value)</code></li> <li><code>fn withScaleDistributionMixin(value)</code></li> <li><code>fn withShowPoints(value)</code></li> <li><code>fn withSpanNulls(value)</code></li> <li><code>fn withSpanNullsMixin(value)</code></li> <li><code>fn withStacking(value)</code></li> <li><code>fn withStackingMixin(value)</code></li> <li><code>fn withThresholdsStyle(value)</code></li> <li><code>fn withThresholdsStyleMixin(value)</code></li> <li><code>fn withTransform(value)</code></li> <li><code>obj hideFrom</code><ul> <li><code>fn withLegend(value=true)</code></li> <li><code>fn withTooltip(value=true)</code></li> <li><code>fn withViz(value=true)</code></li> </ul> </li> <li><code>obj lineStyle</code><ul> <li><code>fn withDash(value)</code></li> <li><code>fn withDashMixin(value)</code></li> <li><code>fn withFill(value)</code></li> </ul> </li> <li><code>obj scaleDistribution</code><ul> <li><code>fn withLinearThreshold(value)</code></li> <li><code>fn withLog(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> <li><code>obj stacking</code><ul> <li><code>fn withGroup(value)</code></li> <li><code>fn withMode(value)</code></li> </ul> </li> <li><code>obj thresholdsStyle</code><ul> <li><code>fn withMode(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withLegend(value)</code></li> <li><code>fn withLegendMixin(value)</code></li> <li><code>fn withOrientation(value)</code></li> <li><code>fn withTimezone(value)</code></li> <li><code>fn withTimezoneMixin(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withTooltipMixin(value)</code></li> <li><code>obj legend</code><ul> <li><code>fn withAsTable(value=true)</code></li> <li><code>fn withCalcs(value=[])</code></li> <li><code>fn withCalcsMixin(value=[])</code></li> <li><code>fn withDisplayMode(value)</code></li> <li><code>fn withIsVisible(value=true)</code></li> <li><code>fn withPlacement(value)</code></li> <li><code>fn withShowLegend(value=true)</code></li> <li><code>fn withSortBy(value)</code></li> <li><code>fn withSortDesc(value=true)</code></li> <li><code>fn withWidth(value)</code></li> </ul> </li> <li><code>obj timezone</code><ul> <li><code>fn withTimeZoneBrowser()</code></li> <li><code>fn withTimeZoneUtc()</code></li> </ul> </li> <li><code>obj tooltip</code><ul> <li><code>fn withMaxHeight(value)</code></li> <li><code>fn withMaxWidth(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSort(value)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/index.html#fields","title":"Fields","text":""},{"location":"API/panel/timeSeries/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new timeSeries panel with a title.</p>"},{"location":"API/panel/timeSeries/index.html#obj-fieldconfig","title":"obj fieldConfig","text":""},{"location":"API/panel/timeSeries/index.html#obj-fieldconfigdefaults","title":"obj fieldConfig.defaults","text":""},{"location":"API/panel/timeSeries/index.html#obj-fieldconfigdefaultscustom","title":"obj fieldConfig.defaults.custom","text":""},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithaxisbordershow","title":"fn fieldConfig.defaults.custom.withAxisBorderShow","text":"<pre><code>fieldConfig.defaults.custom.withAxisBorderShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithaxiscenteredzero","title":"fn fieldConfig.defaults.custom.withAxisCenteredZero","text":"<pre><code>fieldConfig.defaults.custom.withAxisCenteredZero(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithaxiscolormode","title":"fn fieldConfig.defaults.custom.withAxisColorMode","text":"<pre><code>fieldConfig.defaults.custom.withAxisColorMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"text\"</code>, <code>\"series\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithaxisgridshow","title":"fn fieldConfig.defaults.custom.withAxisGridShow","text":"<pre><code>fieldConfig.defaults.custom.withAxisGridShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithaxislabel","title":"fn fieldConfig.defaults.custom.withAxisLabel","text":"<pre><code>fieldConfig.defaults.custom.withAxisLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithaxisplacement","title":"fn fieldConfig.defaults.custom.withAxisPlacement","text":"<pre><code>fieldConfig.defaults.custom.withAxisPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"top\"</code>, <code>\"right\"</code>, <code>\"bottom\"</code>, <code>\"left\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithaxissoftmax","title":"fn fieldConfig.defaults.custom.withAxisSoftMax","text":"<pre><code>fieldConfig.defaults.custom.withAxisSoftMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithaxissoftmin","title":"fn fieldConfig.defaults.custom.withAxisSoftMin","text":"<pre><code>fieldConfig.defaults.custom.withAxisSoftMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithaxiswidth","title":"fn fieldConfig.defaults.custom.withAxisWidth","text":"<pre><code>fieldConfig.defaults.custom.withAxisWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithbaralignment","title":"fn fieldConfig.defaults.custom.withBarAlignment","text":"<pre><code>fieldConfig.defaults.custom.withBarAlignment(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>-1</code>, <code>0</code>, <code>1</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithbarmaxwidth","title":"fn fieldConfig.defaults.custom.withBarMaxWidth","text":"<pre><code>fieldConfig.defaults.custom.withBarMaxWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithbarwidthfactor","title":"fn fieldConfig.defaults.custom.withBarWidthFactor","text":"<pre><code>fieldConfig.defaults.custom.withBarWidthFactor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithdrawstyle","title":"fn fieldConfig.defaults.custom.withDrawStyle","text":"<pre><code>fieldConfig.defaults.custom.withDrawStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"line\"</code>, <code>\"bars\"</code>, <code>\"points\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithfillbelowto","title":"fn fieldConfig.defaults.custom.withFillBelowTo","text":"<pre><code>fieldConfig.defaults.custom.withFillBelowTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithfillcolor","title":"fn fieldConfig.defaults.custom.withFillColor","text":"<pre><code>fieldConfig.defaults.custom.withFillColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithfillopacity","title":"fn fieldConfig.defaults.custom.withFillOpacity","text":"<pre><code>fieldConfig.defaults.custom.withFillOpacity(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithgradientmode","title":"fn fieldConfig.defaults.custom.withGradientMode","text":"<pre><code>fieldConfig.defaults.custom.withGradientMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"opacity\"</code>, <code>\"hue\"</code>, <code>\"scheme\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithhidefrom","title":"fn fieldConfig.defaults.custom.withHideFrom","text":"<pre><code>fieldConfig.defaults.custom.withHideFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithhidefrommixin","title":"fn fieldConfig.defaults.custom.withHideFromMixin","text":"<pre><code>fieldConfig.defaults.custom.withHideFromMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithinsertnulls","title":"fn fieldConfig.defaults.custom.withInsertNulls","text":"<pre><code>fieldConfig.defaults.custom.withInsertNulls(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>,<code>integer</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithinsertnullsmixin","title":"fn fieldConfig.defaults.custom.withInsertNullsMixin","text":"<pre><code>fieldConfig.defaults.custom.withInsertNullsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>,<code>integer</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithlinecolor","title":"fn fieldConfig.defaults.custom.withLineColor","text":"<pre><code>fieldConfig.defaults.custom.withLineColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithlineinterpolation","title":"fn fieldConfig.defaults.custom.withLineInterpolation","text":"<pre><code>fieldConfig.defaults.custom.withLineInterpolation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"smooth\"</code>, <code>\"stepBefore\"</code>, <code>\"stepAfter\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithlinestyle","title":"fn fieldConfig.defaults.custom.withLineStyle","text":"<pre><code>fieldConfig.defaults.custom.withLineStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithlinestylemixin","title":"fn fieldConfig.defaults.custom.withLineStyleMixin","text":"<pre><code>fieldConfig.defaults.custom.withLineStyleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithlinewidth","title":"fn fieldConfig.defaults.custom.withLineWidth","text":"<pre><code>fieldConfig.defaults.custom.withLineWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithpointcolor","title":"fn fieldConfig.defaults.custom.withPointColor","text":"<pre><code>fieldConfig.defaults.custom.withPointColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithpointsize","title":"fn fieldConfig.defaults.custom.withPointSize","text":"<pre><code>fieldConfig.defaults.custom.withPointSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithpointsymbol","title":"fn fieldConfig.defaults.custom.withPointSymbol","text":"<pre><code>fieldConfig.defaults.custom.withPointSymbol(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithscaledistribution","title":"fn fieldConfig.defaults.custom.withScaleDistribution","text":"<pre><code>fieldConfig.defaults.custom.withScaleDistribution(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithscaledistributionmixin","title":"fn fieldConfig.defaults.custom.withScaleDistributionMixin","text":"<pre><code>fieldConfig.defaults.custom.withScaleDistributionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithshowpoints","title":"fn fieldConfig.defaults.custom.withShowPoints","text":"<pre><code>fieldConfig.defaults.custom.withShowPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"never\"</code>, <code>\"always\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithspannulls","title":"fn fieldConfig.defaults.custom.withSpanNulls","text":"<pre><code>fieldConfig.defaults.custom.withSpanNulls(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>,<code>number</code>)</li> </ul> <p>Indicate if null values should be treated as gaps or connected. When the value is a number, it represents the maximum delta in the X axis that should be considered connected.  For timeseries, this is milliseconds</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithspannullsmixin","title":"fn fieldConfig.defaults.custom.withSpanNullsMixin","text":"<pre><code>fieldConfig.defaults.custom.withSpanNullsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>,<code>number</code>)</li> </ul> <p>Indicate if null values should be treated as gaps or connected. When the value is a number, it represents the maximum delta in the X axis that should be considered connected.  For timeseries, this is milliseconds</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithstacking","title":"fn fieldConfig.defaults.custom.withStacking","text":"<pre><code>fieldConfig.defaults.custom.withStacking(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithstackingmixin","title":"fn fieldConfig.defaults.custom.withStackingMixin","text":"<pre><code>fieldConfig.defaults.custom.withStackingMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwiththresholdsstyle","title":"fn fieldConfig.defaults.custom.withThresholdsStyle","text":"<pre><code>fieldConfig.defaults.custom.withThresholdsStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwiththresholdsstylemixin","title":"fn fieldConfig.defaults.custom.withThresholdsStyleMixin","text":"<pre><code>fieldConfig.defaults.custom.withThresholdsStyleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomwithtransform","title":"fn fieldConfig.defaults.custom.withTransform","text":"<pre><code>fieldConfig.defaults.custom.withTransform(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"constant\"</code>, <code>\"negative-Y\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#obj-fieldconfigdefaultscustomhidefrom","title":"obj fieldConfig.defaults.custom.hideFrom","text":""},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomhidefromwithlegend","title":"# fn fieldConfig.defaults.custom.hideFrom.withLegend","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomhidefromwithtooltip","title":"# fn fieldConfig.defaults.custom.hideFrom.withTooltip","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withTooltip(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomhidefromwithviz","title":"# fn fieldConfig.defaults.custom.hideFrom.withViz","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withViz(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/index.html#obj-fieldconfigdefaultscustomlinestyle","title":"obj fieldConfig.defaults.custom.lineStyle","text":""},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomlinestylewithdash","title":"# fn fieldConfig.defaults.custom.lineStyle.withDash","text":"<pre><code>fieldConfig.defaults.custom.lineStyle.withDash(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomlinestylewithdashmixin","title":"# fn fieldConfig.defaults.custom.lineStyle.withDashMixin","text":"<pre><code>fieldConfig.defaults.custom.lineStyle.withDashMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomlinestylewithfill","title":"# fn fieldConfig.defaults.custom.lineStyle.withFill","text":"<pre><code>fieldConfig.defaults.custom.lineStyle.withFill(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"solid\"</code>, <code>\"dash\"</code>, <code>\"dot\"</code>, <code>\"square\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/index.html#obj-fieldconfigdefaultscustomscaledistribution","title":"obj fieldConfig.defaults.custom.scaleDistribution","text":""},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomscaledistributionwithlinearthreshold","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withLinearThreshold","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withLinearThreshold(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomscaledistributionwithlog","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withLog","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withLog(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomscaledistributionwithtype","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withType","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"log\"</code>, <code>\"ordinal\"</code>, <code>\"symlog\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#obj-fieldconfigdefaultscustomstacking","title":"obj fieldConfig.defaults.custom.stacking","text":""},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomstackingwithgroup","title":"# fn fieldConfig.defaults.custom.stacking.withGroup","text":"<pre><code>fieldConfig.defaults.custom.stacking.withGroup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomstackingwithmode","title":"# fn fieldConfig.defaults.custom.stacking.withMode","text":"<pre><code>fieldConfig.defaults.custom.stacking.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"normal\"</code>, <code>\"percent\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#obj-fieldconfigdefaultscustomthresholdsstyle","title":"obj fieldConfig.defaults.custom.thresholdsStyle","text":""},{"location":"API/panel/timeSeries/index.html#fn-fieldconfigdefaultscustomthresholdsstylewithmode","title":"# fn fieldConfig.defaults.custom.thresholdsStyle.withMode","text":"<pre><code>fieldConfig.defaults.custom.thresholdsStyle.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"off\"</code>, <code>\"line\"</code>, <code>\"dashed\"</code>, <code>\"area\"</code>, <code>\"line+area\"</code>, <code>\"dashed+area\"</code>, <code>\"series\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/timeSeries/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/timeSeries/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/timeSeries/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/timeSeries/index.html#fn-optionswithlegend","title":"fn options.withLegend","text":"<pre><code>options.withLegend(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-optionswithlegendmixin","title":"fn options.withLegendMixin","text":"<pre><code>options.withLegendMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-optionswithorientation","title":"fn options.withOrientation","text":"<pre><code>options.withOrientation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"vertical\"</code>, <code>\"horizontal\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-optionswithtimezone","title":"fn options.withTimezone","text":"<pre><code>options.withTimezone(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-optionswithtimezonemixin","title":"fn options.withTimezoneMixin","text":"<pre><code>options.withTimezoneMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-optionswithtooltip","title":"fn options.withTooltip","text":"<pre><code>options.withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-optionswithtooltipmixin","title":"fn options.withTooltipMixin","text":"<pre><code>options.withTooltipMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#obj-optionslegend","title":"obj options.legend","text":""},{"location":"API/panel/timeSeries/index.html#fn-optionslegendwithastable","title":"fn options.legend.withAsTable","text":"<pre><code>options.legend.withAsTable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-optionslegendwithcalcs","title":"fn options.legend.withCalcs","text":"<pre><code>options.legend.withCalcs(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-optionslegendwithcalcsmixin","title":"fn options.legend.withCalcsMixin","text":"<pre><code>options.legend.withCalcsMixin(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-optionslegendwithdisplaymode","title":"fn options.legend.withDisplayMode","text":"<pre><code>options.legend.withDisplayMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"list\"</code>, <code>\"table\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs Note: \"hidden\" needs to remain as an option for plugins compatibility</p>"},{"location":"API/panel/timeSeries/index.html#fn-optionslegendwithisvisible","title":"fn options.legend.withIsVisible","text":"<pre><code>options.legend.withIsVisible(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-optionslegendwithplacement","title":"fn options.legend.withPlacement","text":"<pre><code>options.legend.withPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"bottom\"</code>, <code>\"right\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-optionslegendwithshowlegend","title":"fn options.legend.withShowLegend","text":"<pre><code>options.legend.withShowLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-optionslegendwithsortby","title":"fn options.legend.withSortBy","text":"<pre><code>options.legend.withSortBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-optionslegendwithsortdesc","title":"fn options.legend.withSortDesc","text":"<pre><code>options.legend.withSortDesc(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-optionslegendwithwidth","title":"fn options.legend.withWidth","text":"<pre><code>options.legend.withWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#obj-optionstimezone","title":"obj options.timezone","text":""},{"location":"API/panel/timeSeries/index.html#fn-optionstimezonewithtimezonebrowser","title":"fn options.timezone.withTimeZoneBrowser","text":"<pre><code>options.timezone.withTimeZoneBrowser()\n</code></pre> <p>Use the timezone defined by end user web browser</p>"},{"location":"API/panel/timeSeries/index.html#fn-optionstimezonewithtimezoneutc","title":"fn options.timezone.withTimeZoneUtc","text":"<pre><code>options.timezone.withTimeZoneUtc()\n</code></pre> <p>Use UTC/GMT timezone</p>"},{"location":"API/panel/timeSeries/index.html#obj-optionstooltip","title":"obj options.tooltip","text":""},{"location":"API/panel/timeSeries/index.html#fn-optionstooltipwithmaxheight","title":"fn options.tooltip.withMaxHeight","text":"<pre><code>options.tooltip.withMaxHeight(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-optionstooltipwithmaxwidth","title":"fn options.tooltip.withMaxWidth","text":"<pre><code>options.tooltip.withMaxWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/timeSeries/index.html#fn-optionstooltipwithmode","title":"fn options.tooltip.withMode","text":"<pre><code>options.tooltip.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"single\"</code>, <code>\"multi\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#fn-optionstooltipwithsort","title":"fn options.tooltip.withSort","text":"<pre><code>options.tooltip.withSort(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"asc\"</code>, <code>\"desc\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/timeSeries/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/timeSeries/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/timeSeries/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/timeSeries/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/timeSeries/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/timeSeries/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/timeSeries/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/timeSeries/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/timeSeries/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/timeSeries/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/timeSeries/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/timeSeries/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/timeSeries/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/timeSeries/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/timeSeries/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/timeSeries/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/timeSeries/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/timeSeries/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/timeSeries/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/timeSeries/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/timeSeries/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/timeSeries/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/timeSeries/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/timeSeries/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/timeSeries/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/timeSeries/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/timeSeries/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/timeSeries/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/timeSeries/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/timeSeries/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/timeSeries/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/timeSeries/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/timeSeries/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/timeSeries/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/timeSeries/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/timeSeries/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/timeSeries/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/timeSeries/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/timeSeries/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/timeSeries/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/timeSeries/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/timeSeries/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/timeSeries/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/timeSeries/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/timeSeries/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/timeSeries/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/timeSeries/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/timeSeries/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/timeSeries/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/timeSeries/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/timeSeries/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/timeSeries/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/timeSeries/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/timeSeries/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/timeSeries/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/timeSeries/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/timeSeries/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/timeSeries/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/timeSeries/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/timeSeries/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/timeSeries/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/timeSeries/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/timeSeries/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/timeSeries/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/timeSeries/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/timeSeries/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/timeSeries/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/timeSeries/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/timeSeries/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/timeSeries/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/timeSeries/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/timeSeries/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/timeSeries/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/timeSeries/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/trend/index.html","title":"trend","text":"<p>grafonnet.panel.trend</p>"},{"location":"API/panel/trend/index.html#subpackages","title":"Subpackages","text":"<ul> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/trend/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj fieldConfig</code><ul> <li><code>obj defaults</code><ul> <li><code>obj custom</code><ul> <li><code>fn withAxisBorderShow(value=true)</code></li> <li><code>fn withAxisCenteredZero(value=true)</code></li> <li><code>fn withAxisColorMode(value)</code></li> <li><code>fn withAxisGridShow(value=true)</code></li> <li><code>fn withAxisLabel(value)</code></li> <li><code>fn withAxisPlacement(value)</code></li> <li><code>fn withAxisSoftMax(value)</code></li> <li><code>fn withAxisSoftMin(value)</code></li> <li><code>fn withAxisWidth(value)</code></li> <li><code>fn withBarAlignment(value)</code></li> <li><code>fn withBarMaxWidth(value)</code></li> <li><code>fn withBarWidthFactor(value)</code></li> <li><code>fn withDrawStyle(value)</code></li> <li><code>fn withFillBelowTo(value)</code></li> <li><code>fn withFillColor(value)</code></li> <li><code>fn withFillOpacity(value)</code></li> <li><code>fn withGradientMode(value)</code></li> <li><code>fn withHideFrom(value)</code></li> <li><code>fn withHideFromMixin(value)</code></li> <li><code>fn withInsertNulls(value)</code></li> <li><code>fn withInsertNullsMixin(value)</code></li> <li><code>fn withLineColor(value)</code></li> <li><code>fn withLineInterpolation(value)</code></li> <li><code>fn withLineStyle(value)</code></li> <li><code>fn withLineStyleMixin(value)</code></li> <li><code>fn withLineWidth(value)</code></li> <li><code>fn withPointColor(value)</code></li> <li><code>fn withPointSize(value)</code></li> <li><code>fn withPointSymbol(value)</code></li> <li><code>fn withScaleDistribution(value)</code></li> <li><code>fn withScaleDistributionMixin(value)</code></li> <li><code>fn withShowPoints(value)</code></li> <li><code>fn withSpanNulls(value)</code></li> <li><code>fn withSpanNullsMixin(value)</code></li> <li><code>fn withStacking(value)</code></li> <li><code>fn withStackingMixin(value)</code></li> <li><code>fn withThresholdsStyle(value)</code></li> <li><code>fn withThresholdsStyleMixin(value)</code></li> <li><code>fn withTransform(value)</code></li> <li><code>obj hideFrom</code><ul> <li><code>fn withLegend(value=true)</code></li> <li><code>fn withTooltip(value=true)</code></li> <li><code>fn withViz(value=true)</code></li> </ul> </li> <li><code>obj lineStyle</code><ul> <li><code>fn withDash(value)</code></li> <li><code>fn withDashMixin(value)</code></li> <li><code>fn withFill(value)</code></li> </ul> </li> <li><code>obj scaleDistribution</code><ul> <li><code>fn withLinearThreshold(value)</code></li> <li><code>fn withLog(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> <li><code>obj stacking</code><ul> <li><code>fn withGroup(value)</code></li> <li><code>fn withMode(value)</code></li> </ul> </li> <li><code>obj thresholdsStyle</code><ul> <li><code>fn withMode(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withLegend(value)</code></li> <li><code>fn withLegendMixin(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withTooltipMixin(value)</code></li> <li><code>fn withXField(value)</code></li> <li><code>obj legend</code><ul> <li><code>fn withAsTable(value=true)</code></li> <li><code>fn withCalcs(value=[])</code></li> <li><code>fn withCalcsMixin(value=[])</code></li> <li><code>fn withDisplayMode(value)</code></li> <li><code>fn withIsVisible(value=true)</code></li> <li><code>fn withPlacement(value)</code></li> <li><code>fn withShowLegend(value=true)</code></li> <li><code>fn withSortBy(value)</code></li> <li><code>fn withSortDesc(value=true)</code></li> <li><code>fn withWidth(value)</code></li> </ul> </li> <li><code>obj tooltip</code><ul> <li><code>fn withMaxHeight(value)</code></li> <li><code>fn withMaxWidth(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSort(value)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/trend/index.html#fields","title":"Fields","text":""},{"location":"API/panel/trend/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new trend panel with a title.</p>"},{"location":"API/panel/trend/index.html#obj-fieldconfig","title":"obj fieldConfig","text":""},{"location":"API/panel/trend/index.html#obj-fieldconfigdefaults","title":"obj fieldConfig.defaults","text":""},{"location":"API/panel/trend/index.html#obj-fieldconfigdefaultscustom","title":"obj fieldConfig.defaults.custom","text":""},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithaxisbordershow","title":"fn fieldConfig.defaults.custom.withAxisBorderShow","text":"<pre><code>fieldConfig.defaults.custom.withAxisBorderShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithaxiscenteredzero","title":"fn fieldConfig.defaults.custom.withAxisCenteredZero","text":"<pre><code>fieldConfig.defaults.custom.withAxisCenteredZero(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithaxiscolormode","title":"fn fieldConfig.defaults.custom.withAxisColorMode","text":"<pre><code>fieldConfig.defaults.custom.withAxisColorMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"text\"</code>, <code>\"series\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithaxisgridshow","title":"fn fieldConfig.defaults.custom.withAxisGridShow","text":"<pre><code>fieldConfig.defaults.custom.withAxisGridShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithaxislabel","title":"fn fieldConfig.defaults.custom.withAxisLabel","text":"<pre><code>fieldConfig.defaults.custom.withAxisLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithaxisplacement","title":"fn fieldConfig.defaults.custom.withAxisPlacement","text":"<pre><code>fieldConfig.defaults.custom.withAxisPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"top\"</code>, <code>\"right\"</code>, <code>\"bottom\"</code>, <code>\"left\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithaxissoftmax","title":"fn fieldConfig.defaults.custom.withAxisSoftMax","text":"<pre><code>fieldConfig.defaults.custom.withAxisSoftMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithaxissoftmin","title":"fn fieldConfig.defaults.custom.withAxisSoftMin","text":"<pre><code>fieldConfig.defaults.custom.withAxisSoftMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithaxiswidth","title":"fn fieldConfig.defaults.custom.withAxisWidth","text":"<pre><code>fieldConfig.defaults.custom.withAxisWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithbaralignment","title":"fn fieldConfig.defaults.custom.withBarAlignment","text":"<pre><code>fieldConfig.defaults.custom.withBarAlignment(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>-1</code>, <code>0</code>, <code>1</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithbarmaxwidth","title":"fn fieldConfig.defaults.custom.withBarMaxWidth","text":"<pre><code>fieldConfig.defaults.custom.withBarMaxWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithbarwidthfactor","title":"fn fieldConfig.defaults.custom.withBarWidthFactor","text":"<pre><code>fieldConfig.defaults.custom.withBarWidthFactor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithdrawstyle","title":"fn fieldConfig.defaults.custom.withDrawStyle","text":"<pre><code>fieldConfig.defaults.custom.withDrawStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"line\"</code>, <code>\"bars\"</code>, <code>\"points\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithfillbelowto","title":"fn fieldConfig.defaults.custom.withFillBelowTo","text":"<pre><code>fieldConfig.defaults.custom.withFillBelowTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithfillcolor","title":"fn fieldConfig.defaults.custom.withFillColor","text":"<pre><code>fieldConfig.defaults.custom.withFillColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithfillopacity","title":"fn fieldConfig.defaults.custom.withFillOpacity","text":"<pre><code>fieldConfig.defaults.custom.withFillOpacity(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithgradientmode","title":"fn fieldConfig.defaults.custom.withGradientMode","text":"<pre><code>fieldConfig.defaults.custom.withGradientMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"opacity\"</code>, <code>\"hue\"</code>, <code>\"scheme\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithhidefrom","title":"fn fieldConfig.defaults.custom.withHideFrom","text":"<pre><code>fieldConfig.defaults.custom.withHideFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithhidefrommixin","title":"fn fieldConfig.defaults.custom.withHideFromMixin","text":"<pre><code>fieldConfig.defaults.custom.withHideFromMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithinsertnulls","title":"fn fieldConfig.defaults.custom.withInsertNulls","text":"<pre><code>fieldConfig.defaults.custom.withInsertNulls(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>,<code>integer</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithinsertnullsmixin","title":"fn fieldConfig.defaults.custom.withInsertNullsMixin","text":"<pre><code>fieldConfig.defaults.custom.withInsertNullsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>,<code>integer</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithlinecolor","title":"fn fieldConfig.defaults.custom.withLineColor","text":"<pre><code>fieldConfig.defaults.custom.withLineColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithlineinterpolation","title":"fn fieldConfig.defaults.custom.withLineInterpolation","text":"<pre><code>fieldConfig.defaults.custom.withLineInterpolation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"smooth\"</code>, <code>\"stepBefore\"</code>, <code>\"stepAfter\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithlinestyle","title":"fn fieldConfig.defaults.custom.withLineStyle","text":"<pre><code>fieldConfig.defaults.custom.withLineStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithlinestylemixin","title":"fn fieldConfig.defaults.custom.withLineStyleMixin","text":"<pre><code>fieldConfig.defaults.custom.withLineStyleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithlinewidth","title":"fn fieldConfig.defaults.custom.withLineWidth","text":"<pre><code>fieldConfig.defaults.custom.withLineWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithpointcolor","title":"fn fieldConfig.defaults.custom.withPointColor","text":"<pre><code>fieldConfig.defaults.custom.withPointColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithpointsize","title":"fn fieldConfig.defaults.custom.withPointSize","text":"<pre><code>fieldConfig.defaults.custom.withPointSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithpointsymbol","title":"fn fieldConfig.defaults.custom.withPointSymbol","text":"<pre><code>fieldConfig.defaults.custom.withPointSymbol(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithscaledistribution","title":"fn fieldConfig.defaults.custom.withScaleDistribution","text":"<pre><code>fieldConfig.defaults.custom.withScaleDistribution(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithscaledistributionmixin","title":"fn fieldConfig.defaults.custom.withScaleDistributionMixin","text":"<pre><code>fieldConfig.defaults.custom.withScaleDistributionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithshowpoints","title":"fn fieldConfig.defaults.custom.withShowPoints","text":"<pre><code>fieldConfig.defaults.custom.withShowPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"never\"</code>, <code>\"always\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithspannulls","title":"fn fieldConfig.defaults.custom.withSpanNulls","text":"<pre><code>fieldConfig.defaults.custom.withSpanNulls(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>,<code>number</code>)</li> </ul> <p>Indicate if null values should be treated as gaps or connected. When the value is a number, it represents the maximum delta in the X axis that should be considered connected.  For timeseries, this is milliseconds</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithspannullsmixin","title":"fn fieldConfig.defaults.custom.withSpanNullsMixin","text":"<pre><code>fieldConfig.defaults.custom.withSpanNullsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>,<code>number</code>)</li> </ul> <p>Indicate if null values should be treated as gaps or connected. When the value is a number, it represents the maximum delta in the X axis that should be considered connected.  For timeseries, this is milliseconds</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithstacking","title":"fn fieldConfig.defaults.custom.withStacking","text":"<pre><code>fieldConfig.defaults.custom.withStacking(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithstackingmixin","title":"fn fieldConfig.defaults.custom.withStackingMixin","text":"<pre><code>fieldConfig.defaults.custom.withStackingMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwiththresholdsstyle","title":"fn fieldConfig.defaults.custom.withThresholdsStyle","text":"<pre><code>fieldConfig.defaults.custom.withThresholdsStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwiththresholdsstylemixin","title":"fn fieldConfig.defaults.custom.withThresholdsStyleMixin","text":"<pre><code>fieldConfig.defaults.custom.withThresholdsStyleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomwithtransform","title":"fn fieldConfig.defaults.custom.withTransform","text":"<pre><code>fieldConfig.defaults.custom.withTransform(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"constant\"</code>, <code>\"negative-Y\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#obj-fieldconfigdefaultscustomhidefrom","title":"obj fieldConfig.defaults.custom.hideFrom","text":""},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomhidefromwithlegend","title":"# fn fieldConfig.defaults.custom.hideFrom.withLegend","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomhidefromwithtooltip","title":"# fn fieldConfig.defaults.custom.hideFrom.withTooltip","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withTooltip(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomhidefromwithviz","title":"# fn fieldConfig.defaults.custom.hideFrom.withViz","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withViz(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/index.html#obj-fieldconfigdefaultscustomlinestyle","title":"obj fieldConfig.defaults.custom.lineStyle","text":""},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomlinestylewithdash","title":"# fn fieldConfig.defaults.custom.lineStyle.withDash","text":"<pre><code>fieldConfig.defaults.custom.lineStyle.withDash(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomlinestylewithdashmixin","title":"# fn fieldConfig.defaults.custom.lineStyle.withDashMixin","text":"<pre><code>fieldConfig.defaults.custom.lineStyle.withDashMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomlinestylewithfill","title":"# fn fieldConfig.defaults.custom.lineStyle.withFill","text":"<pre><code>fieldConfig.defaults.custom.lineStyle.withFill(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"solid\"</code>, <code>\"dash\"</code>, <code>\"dot\"</code>, <code>\"square\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/index.html#obj-fieldconfigdefaultscustomscaledistribution","title":"obj fieldConfig.defaults.custom.scaleDistribution","text":""},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomscaledistributionwithlinearthreshold","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withLinearThreshold","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withLinearThreshold(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomscaledistributionwithlog","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withLog","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withLog(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomscaledistributionwithtype","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withType","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"log\"</code>, <code>\"ordinal\"</code>, <code>\"symlog\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#obj-fieldconfigdefaultscustomstacking","title":"obj fieldConfig.defaults.custom.stacking","text":""},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomstackingwithgroup","title":"# fn fieldConfig.defaults.custom.stacking.withGroup","text":"<pre><code>fieldConfig.defaults.custom.stacking.withGroup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomstackingwithmode","title":"# fn fieldConfig.defaults.custom.stacking.withMode","text":"<pre><code>fieldConfig.defaults.custom.stacking.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"normal\"</code>, <code>\"percent\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#obj-fieldconfigdefaultscustomthresholdsstyle","title":"obj fieldConfig.defaults.custom.thresholdsStyle","text":""},{"location":"API/panel/trend/index.html#fn-fieldconfigdefaultscustomthresholdsstylewithmode","title":"# fn fieldConfig.defaults.custom.thresholdsStyle.withMode","text":"<pre><code>fieldConfig.defaults.custom.thresholdsStyle.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"off\"</code>, <code>\"line\"</code>, <code>\"dashed\"</code>, <code>\"area\"</code>, <code>\"line+area\"</code>, <code>\"dashed+area\"</code>, <code>\"series\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/trend/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/trend/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/trend/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/trend/index.html#fn-optionswithlegend","title":"fn options.withLegend","text":"<pre><code>options.withLegend(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-optionswithlegendmixin","title":"fn options.withLegendMixin","text":"<pre><code>options.withLegendMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-optionswithtooltip","title":"fn options.withTooltip","text":"<pre><code>options.withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-optionswithtooltipmixin","title":"fn options.withTooltipMixin","text":"<pre><code>options.withTooltipMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-optionswithxfield","title":"fn options.withXField","text":"<pre><code>options.withXField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of the x field to use (defaults to first number)</p>"},{"location":"API/panel/trend/index.html#obj-optionslegend","title":"obj options.legend","text":""},{"location":"API/panel/trend/index.html#fn-optionslegendwithastable","title":"fn options.legend.withAsTable","text":"<pre><code>options.legend.withAsTable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/index.html#fn-optionslegendwithcalcs","title":"fn options.legend.withCalcs","text":"<pre><code>options.legend.withCalcs(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/index.html#fn-optionslegendwithcalcsmixin","title":"fn options.legend.withCalcsMixin","text":"<pre><code>options.legend.withCalcsMixin(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/index.html#fn-optionslegendwithdisplaymode","title":"fn options.legend.withDisplayMode","text":"<pre><code>options.legend.withDisplayMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"list\"</code>, <code>\"table\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs Note: \"hidden\" needs to remain as an option for plugins compatibility</p>"},{"location":"API/panel/trend/index.html#fn-optionslegendwithisvisible","title":"fn options.legend.withIsVisible","text":"<pre><code>options.legend.withIsVisible(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/index.html#fn-optionslegendwithplacement","title":"fn options.legend.withPlacement","text":"<pre><code>options.legend.withPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"bottom\"</code>, <code>\"right\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-optionslegendwithshowlegend","title":"fn options.legend.withShowLegend","text":"<pre><code>options.legend.withShowLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/index.html#fn-optionslegendwithsortby","title":"fn options.legend.withSortBy","text":"<pre><code>options.legend.withSortBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-optionslegendwithsortdesc","title":"fn options.legend.withSortDesc","text":"<pre><code>options.legend.withSortDesc(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/index.html#fn-optionslegendwithwidth","title":"fn options.legend.withWidth","text":"<pre><code>options.legend.withWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#obj-optionstooltip","title":"obj options.tooltip","text":""},{"location":"API/panel/trend/index.html#fn-optionstooltipwithmaxheight","title":"fn options.tooltip.withMaxHeight","text":"<pre><code>options.tooltip.withMaxHeight(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-optionstooltipwithmaxwidth","title":"fn options.tooltip.withMaxWidth","text":"<pre><code>options.tooltip.withMaxWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/trend/index.html#fn-optionstooltipwithmode","title":"fn options.tooltip.withMode","text":"<pre><code>options.tooltip.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"single\"</code>, <code>\"multi\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#fn-optionstooltipwithsort","title":"fn options.tooltip.withSort","text":"<pre><code>options.tooltip.withSort(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"asc\"</code>, <code>\"desc\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/trend/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/trend/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/trend/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/trend/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/trend/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/trend/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/trend/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/trend/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/trend/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/trend/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/trend/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/trend/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/trend/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/trend/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/trend/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/trend/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/trend/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/trend/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/trend/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/trend/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/trend/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/trend/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/trend/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/trend/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/trend/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/trend/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/trend/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/trend/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/trend/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/trend/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/trend/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/trend/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/trend/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/trend/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/trend/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/trend/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/trend/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/trend/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/trend/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/trend/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/trend/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/trend/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/trend/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/trend/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/trend/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/trend/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/trend/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/trend/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/trend/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/trend/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/trend/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/trend/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/trend/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/trend/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/trend/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/trend/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/trend/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/trend/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/trend/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/trend/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/trend/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/trend/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/trend/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/trend/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/trend/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/trend/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/trend/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/trend/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/trend/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/trend/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/trend/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/trend/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/trend/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/trend/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/trend/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/trend/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/trend/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/trend/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/trend/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/trend/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/trend/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/trend/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/trend/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/trend/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/trend/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/trend/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/trend/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/trend/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/trend/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/trend/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/trend/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/trend/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/trend/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/trend/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/trend/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/trend/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/trend/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/trend/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/trend/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/trend/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/trend/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/trend/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/trend/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/panel/xyChart/index.html","title":"xyChart","text":"<p>grafonnet.panel.xyChart</p>"},{"location":"API/panel/xyChart/index.html#subpackages","title":"Subpackages","text":"<ul> <li>options.series</li> <li>panelOptions.link</li> <li>queryOptions.transformation</li> <li>standardOptions.mapping</li> <li>standardOptions.override</li> <li>standardOptions.threshold.step</li> </ul>"},{"location":"API/panel/xyChart/index.html#index","title":"Index","text":"<ul> <li><code>fn new(title)</code></li> <li><code>obj fieldConfig</code><ul> <li><code>obj defaults</code><ul> <li><code>obj custom</code><ul> <li><code>fn withAxisBorderShow(value=true)</code></li> <li><code>fn withAxisCenteredZero(value=true)</code></li> <li><code>fn withAxisColorMode(value)</code></li> <li><code>fn withAxisGridShow(value=true)</code></li> <li><code>fn withAxisLabel(value)</code></li> <li><code>fn withAxisPlacement(value)</code></li> <li><code>fn withAxisSoftMax(value)</code></li> <li><code>fn withAxisSoftMin(value)</code></li> <li><code>fn withAxisWidth(value)</code></li> <li><code>fn withHideFrom(value)</code></li> <li><code>fn withHideFromMixin(value)</code></li> <li><code>fn withLabel(value)</code></li> <li><code>fn withLabelValue(value)</code></li> <li><code>fn withLabelValueMixin(value)</code></li> <li><code>fn withLineColor(value)</code></li> <li><code>fn withLineColorMixin(value)</code></li> <li><code>fn withLineStyle(value)</code></li> <li><code>fn withLineStyleMixin(value)</code></li> <li><code>fn withLineWidth(value)</code></li> <li><code>fn withPointColor(value)</code></li> <li><code>fn withPointColorMixin(value)</code></li> <li><code>fn withPointSize(value)</code></li> <li><code>fn withPointSizeMixin(value)</code></li> <li><code>fn withScaleDistribution(value)</code></li> <li><code>fn withScaleDistributionMixin(value)</code></li> <li><code>fn withShow(value)</code></li> <li><code>obj hideFrom</code><ul> <li><code>fn withLegend(value=true)</code></li> <li><code>fn withTooltip(value=true)</code></li> <li><code>fn withViz(value=true)</code></li> </ul> </li> <li><code>obj labelValue</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withFixed(value)</code></li> <li><code>fn withMode(value)</code></li> </ul> </li> <li><code>obj lineColor</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withFixed(value)</code></li> </ul> </li> <li><code>obj lineStyle</code><ul> <li><code>fn withDash(value)</code></li> <li><code>fn withDashMixin(value)</code></li> <li><code>fn withFill(value)</code></li> </ul> </li> <li><code>obj pointColor</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withFixed(value)</code></li> </ul> </li> <li><code>obj pointSize</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withFixed(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withMode(value)</code></li> </ul> </li> <li><code>obj scaleDistribution</code><ul> <li><code>fn withLinearThreshold(value)</code></li> <li><code>fn withLog(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj libraryPanel</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj options</code><ul> <li><code>fn withDims(value)</code></li> <li><code>fn withDimsMixin(value)</code></li> <li><code>fn withLegend(value)</code></li> <li><code>fn withLegendMixin(value)</code></li> <li><code>fn withSeries(value)</code></li> <li><code>fn withSeriesMapping(value)</code></li> <li><code>fn withSeriesMixin(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withTooltipMixin(value)</code></li> <li><code>obj dims</code><ul> <li><code>fn withExclude(value)</code></li> <li><code>fn withExcludeMixin(value)</code></li> <li><code>fn withFrame(value)</code></li> <li><code>fn withX(value)</code></li> </ul> </li> <li><code>obj legend</code><ul> <li><code>fn withAsTable(value=true)</code></li> <li><code>fn withCalcs(value=[])</code></li> <li><code>fn withCalcsMixin(value=[])</code></li> <li><code>fn withDisplayMode(value)</code></li> <li><code>fn withIsVisible(value=true)</code></li> <li><code>fn withPlacement(value)</code></li> <li><code>fn withShowLegend(value=true)</code></li> <li><code>fn withSortBy(value)</code></li> <li><code>fn withSortDesc(value=true)</code></li> <li><code>fn withWidth(value)</code></li> </ul> </li> <li><code>obj tooltip</code><ul> <li><code>fn withMaxHeight(value)</code></li> <li><code>fn withMaxWidth(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSort(value)</code></li> </ul> </li> </ul> </li> <li><code>obj panelOptions</code><ul> <li><code>fn withDescription(value)</code></li> <li><code>fn withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMaxPerRow(value)</code></li> <li><code>fn withRepeat(value)</code></li> <li><code>fn withRepeatDirection(value=\"h\")</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTransparent(value=true)</code></li> </ul> </li> <li><code>obj queryOptions</code><ul> <li><code>fn withDatasource(type, uid)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHideTimeOverride(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryCachingTTL(value)</code></li> <li><code>fn withTargets(value)</code></li> <li><code>fn withTargetsMixin(value)</code></li> <li><code>fn withTimeFrom(value)</code></li> <li><code>fn withTimeShift(value)</code></li> <li><code>fn withTransformations(value)</code></li> <li><code>fn withTransformationsMixin(value)</code></li> </ul> </li> <li><code>obj standardOptions</code><ul> <li><code>fn withDecimals(value)</code></li> <li><code>fn withDisplayName(value)</code></li> <li><code>fn withFilterable(value=true)</code></li> <li><code>fn withLinks(value)</code></li> <li><code>fn withLinksMixin(value)</code></li> <li><code>fn withMappings(value)</code></li> <li><code>fn withMappingsMixin(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNoValue(value)</code></li> <li><code>fn withOverrides(value)</code></li> <li><code>fn withOverridesMixin(value)</code></li> <li><code>fn withPath(value)</code></li> <li><code>fn withUnit(value)</code></li> <li><code>obj color</code><ul> <li><code>fn withFixedColor(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withSeriesBy(value)</code></li> </ul> </li> <li><code>obj thresholds</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withSteps(value)</code></li> <li><code>fn withStepsMixin(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#fields","title":"Fields","text":""},{"location":"API/panel/xyChart/index.html#fn-new","title":"fn new","text":"<pre><code>new(title)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>title (<code>string</code>)</li> </ul> <p>Creates a new xyChart panel with a title.</p>"},{"location":"API/panel/xyChart/index.html#obj-fieldconfig","title":"obj fieldConfig","text":""},{"location":"API/panel/xyChart/index.html#obj-fieldconfigdefaults","title":"obj fieldConfig.defaults","text":""},{"location":"API/panel/xyChart/index.html#obj-fieldconfigdefaultscustom","title":"obj fieldConfig.defaults.custom","text":""},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithaxisbordershow","title":"fn fieldConfig.defaults.custom.withAxisBorderShow","text":"<pre><code>fieldConfig.defaults.custom.withAxisBorderShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithaxiscenteredzero","title":"fn fieldConfig.defaults.custom.withAxisCenteredZero","text":"<pre><code>fieldConfig.defaults.custom.withAxisCenteredZero(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithaxiscolormode","title":"fn fieldConfig.defaults.custom.withAxisColorMode","text":"<pre><code>fieldConfig.defaults.custom.withAxisColorMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"text\"</code>, <code>\"series\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithaxisgridshow","title":"fn fieldConfig.defaults.custom.withAxisGridShow","text":"<pre><code>fieldConfig.defaults.custom.withAxisGridShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithaxislabel","title":"fn fieldConfig.defaults.custom.withAxisLabel","text":"<pre><code>fieldConfig.defaults.custom.withAxisLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithaxisplacement","title":"fn fieldConfig.defaults.custom.withAxisPlacement","text":"<pre><code>fieldConfig.defaults.custom.withAxisPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"top\"</code>, <code>\"right\"</code>, <code>\"bottom\"</code>, <code>\"left\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithaxissoftmax","title":"fn fieldConfig.defaults.custom.withAxisSoftMax","text":"<pre><code>fieldConfig.defaults.custom.withAxisSoftMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithaxissoftmin","title":"fn fieldConfig.defaults.custom.withAxisSoftMin","text":"<pre><code>fieldConfig.defaults.custom.withAxisSoftMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithaxiswidth","title":"fn fieldConfig.defaults.custom.withAxisWidth","text":"<pre><code>fieldConfig.defaults.custom.withAxisWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithhidefrom","title":"fn fieldConfig.defaults.custom.withHideFrom","text":"<pre><code>fieldConfig.defaults.custom.withHideFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithhidefrommixin","title":"fn fieldConfig.defaults.custom.withHideFromMixin","text":"<pre><code>fieldConfig.defaults.custom.withHideFromMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithlabel","title":"fn fieldConfig.defaults.custom.withLabel","text":"<pre><code>fieldConfig.defaults.custom.withLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"never\"</code>, <code>\"always\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithlabelvalue","title":"fn fieldConfig.defaults.custom.withLabelValue","text":"<pre><code>fieldConfig.defaults.custom.withLabelValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithlabelvaluemixin","title":"fn fieldConfig.defaults.custom.withLabelValueMixin","text":"<pre><code>fieldConfig.defaults.custom.withLabelValueMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithlinecolor","title":"fn fieldConfig.defaults.custom.withLineColor","text":"<pre><code>fieldConfig.defaults.custom.withLineColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithlinecolormixin","title":"fn fieldConfig.defaults.custom.withLineColorMixin","text":"<pre><code>fieldConfig.defaults.custom.withLineColorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithlinestyle","title":"fn fieldConfig.defaults.custom.withLineStyle","text":"<pre><code>fieldConfig.defaults.custom.withLineStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithlinestylemixin","title":"fn fieldConfig.defaults.custom.withLineStyleMixin","text":"<pre><code>fieldConfig.defaults.custom.withLineStyleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithlinewidth","title":"fn fieldConfig.defaults.custom.withLineWidth","text":"<pre><code>fieldConfig.defaults.custom.withLineWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithpointcolor","title":"fn fieldConfig.defaults.custom.withPointColor","text":"<pre><code>fieldConfig.defaults.custom.withPointColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithpointcolormixin","title":"fn fieldConfig.defaults.custom.withPointColorMixin","text":"<pre><code>fieldConfig.defaults.custom.withPointColorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithpointsize","title":"fn fieldConfig.defaults.custom.withPointSize","text":"<pre><code>fieldConfig.defaults.custom.withPointSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithpointsizemixin","title":"fn fieldConfig.defaults.custom.withPointSizeMixin","text":"<pre><code>fieldConfig.defaults.custom.withPointSizeMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithscaledistribution","title":"fn fieldConfig.defaults.custom.withScaleDistribution","text":"<pre><code>fieldConfig.defaults.custom.withScaleDistribution(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithscaledistributionmixin","title":"fn fieldConfig.defaults.custom.withScaleDistributionMixin","text":"<pre><code>fieldConfig.defaults.custom.withScaleDistributionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomwithshow","title":"fn fieldConfig.defaults.custom.withShow","text":"<pre><code>fieldConfig.defaults.custom.withShow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"points\"</code>, <code>\"lines\"</code>, <code>\"points+lines\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#obj-fieldconfigdefaultscustomhidefrom","title":"obj fieldConfig.defaults.custom.hideFrom","text":""},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomhidefromwithlegend","title":"# fn fieldConfig.defaults.custom.hideFrom.withLegend","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomhidefromwithtooltip","title":"# fn fieldConfig.defaults.custom.hideFrom.withTooltip","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withTooltip(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomhidefromwithviz","title":"# fn fieldConfig.defaults.custom.hideFrom.withViz","text":"<pre><code>fieldConfig.defaults.custom.hideFrom.withViz(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#obj-fieldconfigdefaultscustomlabelvalue","title":"obj fieldConfig.defaults.custom.labelValue","text":""},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomlabelvaluewithfield","title":"# fn fieldConfig.defaults.custom.labelValue.withField","text":"<pre><code>fieldConfig.defaults.custom.labelValue.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>fixed: T -- will be added by each element</p>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomlabelvaluewithfixed","title":"# fn fieldConfig.defaults.custom.labelValue.withFixed","text":"<pre><code>fieldConfig.defaults.custom.labelValue.withFixed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomlabelvaluewithmode","title":"# fn fieldConfig.defaults.custom.labelValue.withMode","text":"<pre><code>fieldConfig.defaults.custom.labelValue.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"fixed\"</code>, <code>\"field\"</code>, <code>\"template\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#obj-fieldconfigdefaultscustomlinecolor","title":"obj fieldConfig.defaults.custom.lineColor","text":""},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomlinecolorwithfield","title":"# fn fieldConfig.defaults.custom.lineColor.withField","text":"<pre><code>fieldConfig.defaults.custom.lineColor.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>fixed: T -- will be added by each element</p>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomlinecolorwithfixed","title":"# fn fieldConfig.defaults.custom.lineColor.withFixed","text":"<pre><code>fieldConfig.defaults.custom.lineColor.withFixed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>color value</p>"},{"location":"API/panel/xyChart/index.html#obj-fieldconfigdefaultscustomlinestyle","title":"obj fieldConfig.defaults.custom.lineStyle","text":""},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomlinestylewithdash","title":"# fn fieldConfig.defaults.custom.lineStyle.withDash","text":"<pre><code>fieldConfig.defaults.custom.lineStyle.withDash(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomlinestylewithdashmixin","title":"# fn fieldConfig.defaults.custom.lineStyle.withDashMixin","text":"<pre><code>fieldConfig.defaults.custom.lineStyle.withDashMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomlinestylewithfill","title":"# fn fieldConfig.defaults.custom.lineStyle.withFill","text":"<pre><code>fieldConfig.defaults.custom.lineStyle.withFill(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"solid\"</code>, <code>\"dash\"</code>, <code>\"dot\"</code>, <code>\"square\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#obj-fieldconfigdefaultscustompointcolor","title":"obj fieldConfig.defaults.custom.pointColor","text":""},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustompointcolorwithfield","title":"# fn fieldConfig.defaults.custom.pointColor.withField","text":"<pre><code>fieldConfig.defaults.custom.pointColor.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>fixed: T -- will be added by each element</p>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustompointcolorwithfixed","title":"# fn fieldConfig.defaults.custom.pointColor.withFixed","text":"<pre><code>fieldConfig.defaults.custom.pointColor.withFixed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>color value</p>"},{"location":"API/panel/xyChart/index.html#obj-fieldconfigdefaultscustompointsize","title":"obj fieldConfig.defaults.custom.pointSize","text":""},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustompointsizewithfield","title":"# fn fieldConfig.defaults.custom.pointSize.withField","text":"<pre><code>fieldConfig.defaults.custom.pointSize.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>fixed: T -- will be added by each element</p>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustompointsizewithfixed","title":"# fn fieldConfig.defaults.custom.pointSize.withFixed","text":"<pre><code>fieldConfig.defaults.custom.pointSize.withFixed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustompointsizewithmax","title":"# fn fieldConfig.defaults.custom.pointSize.withMax","text":"<pre><code>fieldConfig.defaults.custom.pointSize.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustompointsizewithmin","title":"# fn fieldConfig.defaults.custom.pointSize.withMin","text":"<pre><code>fieldConfig.defaults.custom.pointSize.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustompointsizewithmode","title":"# fn fieldConfig.defaults.custom.pointSize.withMode","text":"<pre><code>fieldConfig.defaults.custom.pointSize.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"quad\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#obj-fieldconfigdefaultscustomscaledistribution","title":"obj fieldConfig.defaults.custom.scaleDistribution","text":""},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomscaledistributionwithlinearthreshold","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withLinearThreshold","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withLinearThreshold(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomscaledistributionwithlog","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withLog","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withLog(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-fieldconfigdefaultscustomscaledistributionwithtype","title":"# fn fieldConfig.defaults.custom.scaleDistribution.withType","text":"<pre><code>fieldConfig.defaults.custom.scaleDistribution.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"log\"</code>, <code>\"ordinal\"</code>, <code>\"symlog\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#obj-librarypanel","title":"obj libraryPanel","text":""},{"location":"API/panel/xyChart/index.html#fn-librarypanelwithname","title":"fn libraryPanel.withName","text":"<pre><code>libraryPanel.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel name</p>"},{"location":"API/panel/xyChart/index.html#fn-librarypanelwithuid","title":"fn libraryPanel.withUid","text":"<pre><code>libraryPanel.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Library panel uid</p>"},{"location":"API/panel/xyChart/index.html#obj-options","title":"obj options","text":""},{"location":"API/panel/xyChart/index.html#fn-optionswithdims","title":"fn options.withDims","text":"<pre><code>options.withDims(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Configuration for the Table/Auto mode</p>"},{"location":"API/panel/xyChart/index.html#fn-optionswithdimsmixin","title":"fn options.withDimsMixin","text":"<pre><code>options.withDimsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Configuration for the Table/Auto mode</p>"},{"location":"API/panel/xyChart/index.html#fn-optionswithlegend","title":"fn options.withLegend","text":"<pre><code>options.withLegend(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#fn-optionswithlegendmixin","title":"fn options.withLegendMixin","text":"<pre><code>options.withLegendMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#fn-optionswithseries","title":"fn options.withSeries","text":"<pre><code>options.withSeries(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Manual Mode</p>"},{"location":"API/panel/xyChart/index.html#fn-optionswithseriesmapping","title":"fn options.withSeriesMapping","text":"<pre><code>options.withSeriesMapping(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"manual\"</code></li> </ul> </li> </ul> <p>Auto is \"table\" in the UI</p>"},{"location":"API/panel/xyChart/index.html#fn-optionswithseriesmixin","title":"fn options.withSeriesMixin","text":"<pre><code>options.withSeriesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Manual Mode</p>"},{"location":"API/panel/xyChart/index.html#fn-optionswithtooltip","title":"fn options.withTooltip","text":"<pre><code>options.withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#fn-optionswithtooltipmixin","title":"fn options.withTooltipMixin","text":"<pre><code>options.withTooltipMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#obj-optionsdims","title":"obj options.dims","text":""},{"location":"API/panel/xyChart/index.html#fn-optionsdimswithexclude","title":"fn options.dims.withExclude","text":"<pre><code>options.dims.withExclude(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-optionsdimswithexcludemixin","title":"fn options.dims.withExcludeMixin","text":"<pre><code>options.dims.withExcludeMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-optionsdimswithframe","title":"fn options.dims.withFrame","text":"<pre><code>options.dims.withFrame(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-optionsdimswithx","title":"fn options.dims.withX","text":"<pre><code>options.dims.withX(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#obj-optionslegend","title":"obj options.legend","text":""},{"location":"API/panel/xyChart/index.html#fn-optionslegendwithastable","title":"fn options.legend.withAsTable","text":"<pre><code>options.legend.withAsTable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-optionslegendwithcalcs","title":"fn options.legend.withCalcs","text":"<pre><code>options.legend.withCalcs(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-optionslegendwithcalcsmixin","title":"fn options.legend.withCalcsMixin","text":"<pre><code>options.legend.withCalcsMixin(value=[])\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)<ul> <li>default value: <code>[]</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-optionslegendwithdisplaymode","title":"fn options.legend.withDisplayMode","text":"<pre><code>options.legend.withDisplayMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"list\"</code>, <code>\"table\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs Note: \"hidden\" needs to remain as an option for plugins compatibility</p>"},{"location":"API/panel/xyChart/index.html#fn-optionslegendwithisvisible","title":"fn options.legend.withIsVisible","text":"<pre><code>options.legend.withIsVisible(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-optionslegendwithplacement","title":"fn options.legend.withPlacement","text":"<pre><code>options.legend.withPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"bottom\"</code>, <code>\"right\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#fn-optionslegendwithshowlegend","title":"fn options.legend.withShowLegend","text":"<pre><code>options.legend.withShowLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-optionslegendwithsortby","title":"fn options.legend.withSortBy","text":"<pre><code>options.legend.withSortBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-optionslegendwithsortdesc","title":"fn options.legend.withSortDesc","text":"<pre><code>options.legend.withSortDesc(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-optionslegendwithwidth","title":"fn options.legend.withWidth","text":"<pre><code>options.legend.withWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#obj-optionstooltip","title":"obj options.tooltip","text":""},{"location":"API/panel/xyChart/index.html#fn-optionstooltipwithmaxheight","title":"fn options.tooltip.withMaxHeight","text":"<pre><code>options.tooltip.withMaxHeight(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-optionstooltipwithmaxwidth","title":"fn options.tooltip.withMaxWidth","text":"<pre><code>options.tooltip.withMaxWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/index.html#fn-optionstooltipwithmode","title":"fn options.tooltip.withMode","text":"<pre><code>options.tooltip.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"single\"</code>, <code>\"multi\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#fn-optionstooltipwithsort","title":"fn options.tooltip.withSort","text":"<pre><code>options.tooltip.withSort(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"asc\"</code>, <code>\"desc\"</code>, <code>\"none\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/index.html#obj-paneloptions","title":"obj panelOptions","text":""},{"location":"API/panel/xyChart/index.html#fn-paneloptionswithdescription","title":"fn panelOptions.withDescription","text":"<pre><code>panelOptions.withDescription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel description.</p>"},{"location":"API/panel/xyChart/index.html#fn-paneloptionswithgridpos","title":"fn panelOptions.withGridPos","text":"<pre><code>panelOptions.withGridPos(h=\"null\", w=\"null\", x=\"null\", y=\"null\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>h (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>w (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>x (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> <li>y (<code>number</code>)<ul> <li>default value: <code>\"null\"</code></li> </ul> </li> </ul> <p><code>withGridPos</code> configures the height, width and xy coordinates of the panel. Also see <code>grafonnet.util.grid</code> for helper functions to calculate these fields.</p> <p>All arguments default to <code>null</code>, which means they will remain unchanged or unset.</p>"},{"location":"API/panel/xyChart/index.html#fn-paneloptionswithlinks","title":"fn panelOptions.withLinks","text":"<pre><code>panelOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/xyChart/index.html#fn-paneloptionswithlinksmixin","title":"fn panelOptions.withLinksMixin","text":"<pre><code>panelOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Panel links.</p>"},{"location":"API/panel/xyChart/index.html#fn-paneloptionswithmaxperrow","title":"fn panelOptions.withMaxPerRow","text":"<pre><code>panelOptions.withMaxPerRow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Option for repeated panels that controls max items per row Only relevant for horizontally repeated panels</p>"},{"location":"API/panel/xyChart/index.html#fn-paneloptionswithrepeat","title":"fn panelOptions.withRepeat","text":"<pre><code>panelOptions.withRepeat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of template variable to repeat for.</p>"},{"location":"API/panel/xyChart/index.html#fn-paneloptionswithrepeatdirection","title":"fn panelOptions.withRepeatDirection","text":"<pre><code>panelOptions.withRepeatDirection(value=\"h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"h\"</code></li> <li>valid values: <code>\"h\"</code>, <code>\"v\"</code></li> </ul> </li> </ul> <p>Direction to repeat in if 'repeat' is set. <code>h</code> for horizontal, <code>v</code> for vertical.</p>"},{"location":"API/panel/xyChart/index.html#fn-paneloptionswithtitle","title":"fn panelOptions.withTitle","text":"<pre><code>panelOptions.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Panel title.</p>"},{"location":"API/panel/xyChart/index.html#fn-paneloptionswithtransparent","title":"fn panelOptions.withTransparent","text":"<pre><code>panelOptions.withTransparent(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Whether to display the panel without a background.</p>"},{"location":"API/panel/xyChart/index.html#obj-queryoptions","title":"obj queryOptions","text":""},{"location":"API/panel/xyChart/index.html#fn-queryoptionswithdatasource","title":"fn queryOptions.withDatasource","text":"<pre><code>queryOptions.withDatasource(type, uid)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>type (<code>string</code>)</li> <li>uid (<code>string</code>)</li> </ul> <p><code>withDatasource</code> sets the datasource for all queries in a panel.</p> <p>The default datasource for a panel is set to 'Mixed datasource' so panels can be datasource agnostic, which is a lot more interesting from a reusability standpoint. Note that this requires query targets to explicitly set datasource for the same reason.</p>"},{"location":"API/panel/xyChart/index.html#fn-queryoptionswithdatasourcemixin","title":"fn queryOptions.withDatasourceMixin","text":"<pre><code>queryOptions.withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Ref to a DataSource instance</p>"},{"location":"API/panel/xyChart/index.html#fn-queryoptionswithhidetimeoverride","title":"fn queryOptions.withHideTimeOverride","text":"<pre><code>queryOptions.withHideTimeOverride(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Controls if the timeFrom or timeShift overrides are shown in the panel header</p>"},{"location":"API/panel/xyChart/index.html#fn-queryoptionswithinterval","title":"fn queryOptions.withInterval","text":"<pre><code>queryOptions.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables. This value must be formatted as a number followed by a valid time identifier like: \"40s\", \"3d\", etc. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/xyChart/index.html#fn-queryoptionswithmaxdatapoints","title":"fn queryOptions.withMaxDataPoints","text":"<pre><code>queryOptions.withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum number of data points that the panel queries are retrieving.</p>"},{"location":"API/panel/xyChart/index.html#fn-queryoptionswithquerycachingttl","title":"fn queryOptions.withQueryCachingTTL","text":"<pre><code>queryOptions.withQueryCachingTTL(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Overrides the data source configured time-to-live for a query cache item in milliseconds</p>"},{"location":"API/panel/xyChart/index.html#fn-queryoptionswithtargets","title":"fn queryOptions.withTargets","text":"<pre><code>queryOptions.withTargets(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/xyChart/index.html#fn-queryoptionswithtargetsmixin","title":"fn queryOptions.withTargetsMixin","text":"<pre><code>queryOptions.withTargetsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Depends on the panel plugin. See the plugin documentation for details.</p>"},{"location":"API/panel/xyChart/index.html#fn-queryoptionswithtimefrom","title":"fn queryOptions.withTimeFrom","text":"<pre><code>queryOptions.withTimeFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the relative time range for individual panels, which causes them to be different than what is selected in the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different time periods or days on the same dashboard. The value is formatted as time operation like: <code>now-5m</code> (Last 5 minutes), <code>now/d</code> (the day so far), <code>now-5d/d</code>(Last 5 days), <code>now/w</code> (This week so far), <code>now-2y/y</code> (Last 2 years). Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/xyChart/index.html#fn-queryoptionswithtimeshift","title":"fn queryOptions.withTimeShift","text":"<pre><code>queryOptions.withTimeShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Overrides the time range for individual panels by shifting its start and end relative to the time picker. For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting <code>2h</code>. Note: Panel time overrides have no effect when the dashboard\u2019s time range is absolute. See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options</p>"},{"location":"API/panel/xyChart/index.html#fn-queryoptionswithtransformations","title":"fn queryOptions.withTransformations","text":"<pre><code>queryOptions.withTransformations(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/xyChart/index.html#fn-queryoptionswithtransformationsmixin","title":"fn queryOptions.withTransformationsMixin","text":"<pre><code>queryOptions.withTransformationsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of transformations that are applied to the panel data before rendering. When there are multiple transformations, Grafana applies them in the order they are listed. Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.</p>"},{"location":"API/panel/xyChart/index.html#obj-standardoptions","title":"obj standardOptions","text":""},{"location":"API/panel/xyChart/index.html#fn-standardoptionswithdecimals","title":"fn standardOptions.withDecimals","text":"<pre><code>standardOptions.withDecimals(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Specify the number of decimals Grafana includes in the rendered value. If you leave this field blank, Grafana automatically truncates the number of decimals based on the value. For example 1.1234 will display as 1.12 and 100.456 will display as 100. To display all decimals, set the unit to <code>String</code>.</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionswithdisplayname","title":"fn standardOptions.withDisplayName","text":"<pre><code>standardOptions.withDisplayName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The display value for this field.  This supports template variables blank is auto</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionswithfilterable","title":"fn standardOptions.withFilterable","text":"<pre><code>standardOptions.withFilterable(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>True if data source field supports ad-hoc filters</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionswithlinks","title":"fn standardOptions.withLinks","text":"<pre><code>standardOptions.withLinks(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionswithlinksmixin","title":"fn standardOptions.withLinksMixin","text":"<pre><code>standardOptions.withLinksMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>The behavior when clicking on a result</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionswithmappings","title":"fn standardOptions.withMappings","text":"<pre><code>standardOptions.withMappings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionswithmappingsmixin","title":"fn standardOptions.withMappingsMixin","text":"<pre><code>standardOptions.withMappingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Convert input values into a display string</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionswithmax","title":"fn standardOptions.withMax","text":"<pre><code>standardOptions.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionswithmin","title":"fn standardOptions.withMin","text":"<pre><code>standardOptions.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionswithnovalue","title":"fn standardOptions.withNoValue","text":"<pre><code>standardOptions.withNoValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alternative to empty string</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionswithoverrides","title":"fn standardOptions.withOverrides","text":"<pre><code>standardOptions.withOverrides(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionswithoverridesmixin","title":"fn standardOptions.withOverridesMixin","text":"<pre><code>standardOptions.withOverridesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Overrides are the options applied to specific fields overriding the defaults.</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionswithpath","title":"fn standardOptions.withPath","text":"<pre><code>standardOptions.withPath(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An explicit path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}</p> <p>When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionswithunit","title":"fn standardOptions.withUnit","text":"<pre><code>standardOptions.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unit a field should use. The unit you select is applied to all fields except time. You can use the units ID availables in Grafana or a custom unit. Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts As custom unit, you can use the following formats: <code>suffix:&lt;suffix&gt;</code> for custom unit that should go after value. <code>prefix:&lt;prefix&gt;</code> for custom unit that should go before value. <code>time:&lt;format&gt;</code> For custom date time formats type for example <code>time:YYYY-MM-DD</code>. <code>si:&lt;base scale&gt;&lt;unit characters&gt;</code> for custom SI units. For example: <code>si: mF</code>. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character. <code>count:&lt;unit&gt;</code> for a custom count unit. <code>currency:&lt;unit&gt;</code> for custom a currency unit.</p>"},{"location":"API/panel/xyChart/index.html#obj-standardoptionscolor","title":"obj standardOptions.color","text":""},{"location":"API/panel/xyChart/index.html#fn-standardoptionscolorwithfixedcolor","title":"fn standardOptions.color.withFixedColor","text":"<pre><code>standardOptions.color.withFixedColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The fixed color value for fixed or shades color modes.</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionscolorwithmode","title":"fn standardOptions.color.withMode","text":"<pre><code>standardOptions.color.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"thresholds\"</code>, <code>\"palette-classic\"</code>, <code>\"palette-classic-by-name\"</code>, <code>\"continuous-GrYlRd\"</code>, <code>\"continuous-RdYlGr\"</code>, <code>\"continuous-BlYlRd\"</code>, <code>\"continuous-YlRd\"</code>, <code>\"continuous-BlPu\"</code>, <code>\"continuous-YlBl\"</code>, <code>\"continuous-blues\"</code>, <code>\"continuous-reds\"</code>, <code>\"continuous-greens\"</code>, <code>\"continuous-purples\"</code>, <code>\"fixed\"</code>, <code>\"shades\"</code></li> </ul> </li> </ul> <p>Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value. Continuous color interpolates a color using the percentage of a value relative to min and max. Accepted values are: <code>thresholds</code>: From thresholds. Informs Grafana to take the color from the matching threshold <code>palette-classic</code>: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations <code>palette-classic-by-name</code>: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations <code>continuous-GrYlRd</code>: ontinuous Green-Yellow-Red palette mode <code>continuous-RdYlGr</code>: Continuous Red-Yellow-Green palette mode <code>continuous-BlYlRd</code>: Continuous Blue-Yellow-Red palette mode <code>continuous-YlRd</code>: Continuous Yellow-Red palette mode <code>continuous-BlPu</code>: Continuous Blue-Purple palette mode <code>continuous-YlBl</code>: Continuous Yellow-Blue palette mode <code>continuous-blues</code>: Continuous Blue palette mode <code>continuous-reds</code>: Continuous Red palette mode <code>continuous-greens</code>: Continuous Green palette mode <code>continuous-purples</code>: Continuous Purple palette mode <code>shades</code>: Shades of a single color. Specify a single color, useful in an override rule. <code>fixed</code>: Fixed color mode. Specify a single color, useful in an override rule.</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionscolorwithseriesby","title":"fn standardOptions.color.withSeriesBy","text":"<pre><code>standardOptions.color.withSeriesBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"min\"</code>, <code>\"max\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.</p>"},{"location":"API/panel/xyChart/index.html#obj-standardoptionsthresholds","title":"obj standardOptions.thresholds","text":""},{"location":"API/panel/xyChart/index.html#fn-standardoptionsthresholdswithmode","title":"fn standardOptions.thresholds.withMode","text":"<pre><code>standardOptions.thresholds.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"absolute\"</code>, <code>\"percentage\"</code></li> </ul> </li> </ul> <p>Thresholds can either be <code>absolute</code> (specific number) or <code>percentage</code> (relative to min or max, it will be values between 0 and 1).</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionsthresholdswithsteps","title":"fn standardOptions.thresholds.withSteps","text":"<pre><code>standardOptions.thresholds.withSteps(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/xyChart/index.html#fn-standardoptionsthresholdswithstepsmixin","title":"fn standardOptions.thresholds.withStepsMixin","text":"<pre><code>standardOptions.thresholds.withStepsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Must be sorted by 'value', first value is always -Infinity</p>"},{"location":"API/panel/xyChart/options/series.html","title":"series","text":""},{"location":"API/panel/xyChart/options/series.html#index","title":"Index","text":"<ul> <li><code>fn withAxisBorderShow(value=true)</code></li> <li><code>fn withAxisCenteredZero(value=true)</code></li> <li><code>fn withAxisColorMode(value)</code></li> <li><code>fn withAxisGridShow(value=true)</code></li> <li><code>fn withAxisLabel(value)</code></li> <li><code>fn withAxisPlacement(value)</code></li> <li><code>fn withAxisSoftMax(value)</code></li> <li><code>fn withAxisSoftMin(value)</code></li> <li><code>fn withAxisWidth(value)</code></li> <li><code>fn withFrame(value)</code></li> <li><code>fn withHideFrom(value)</code></li> <li><code>fn withHideFromMixin(value)</code></li> <li><code>fn withLabel(value)</code></li> <li><code>fn withLabelValue(value)</code></li> <li><code>fn withLabelValueMixin(value)</code></li> <li><code>fn withLineColor(value)</code></li> <li><code>fn withLineColorMixin(value)</code></li> <li><code>fn withLineStyle(value)</code></li> <li><code>fn withLineStyleMixin(value)</code></li> <li><code>fn withLineWidth(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>fn withPointColor(value)</code></li> <li><code>fn withPointColorMixin(value)</code></li> <li><code>fn withPointSize(value)</code></li> <li><code>fn withPointSizeMixin(value)</code></li> <li><code>fn withScaleDistribution(value)</code></li> <li><code>fn withScaleDistributionMixin(value)</code></li> <li><code>fn withShow(value)</code></li> <li><code>fn withX(value)</code></li> <li><code>fn withY(value)</code></li> <li><code>obj hideFrom</code><ul> <li><code>fn withLegend(value=true)</code></li> <li><code>fn withTooltip(value=true)</code></li> <li><code>fn withViz(value=true)</code></li> </ul> </li> <li><code>obj labelValue</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withFixed(value)</code></li> <li><code>fn withMode(value)</code></li> </ul> </li> <li><code>obj lineColor</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withFixed(value)</code></li> </ul> </li> <li><code>obj lineStyle</code><ul> <li><code>fn withDash(value)</code></li> <li><code>fn withDashMixin(value)</code></li> <li><code>fn withFill(value)</code></li> </ul> </li> <li><code>obj pointColor</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withFixed(value)</code></li> </ul> </li> <li><code>obj pointSize</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withFixed(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withMode(value)</code></li> </ul> </li> <li><code>obj scaleDistribution</code><ul> <li><code>fn withLinearThreshold(value)</code></li> <li><code>fn withLog(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fields","title":"Fields","text":""},{"location":"API/panel/xyChart/options/series.html#fn-withaxisbordershow","title":"fn withAxisBorderShow","text":"<pre><code>withAxisBorderShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withaxiscenteredzero","title":"fn withAxisCenteredZero","text":"<pre><code>withAxisCenteredZero(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withaxiscolormode","title":"fn withAxisColorMode","text":"<pre><code>withAxisColorMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"text\"</code>, <code>\"series\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/options/series.html#fn-withaxisgridshow","title":"fn withAxisGridShow","text":"<pre><code>withAxisGridShow(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withaxislabel","title":"fn withAxisLabel","text":"<pre><code>withAxisLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withaxisplacement","title":"fn withAxisPlacement","text":"<pre><code>withAxisPlacement(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"top\"</code>, <code>\"right\"</code>, <code>\"bottom\"</code>, <code>\"left\"</code>, <code>\"hidden\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/options/series.html#fn-withaxissoftmax","title":"fn withAxisSoftMax","text":"<pre><code>withAxisSoftMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withaxissoftmin","title":"fn withAxisSoftMin","text":"<pre><code>withAxisSoftMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withaxiswidth","title":"fn withAxisWidth","text":"<pre><code>withAxisWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withframe","title":"fn withFrame","text":"<pre><code>withFrame(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withhidefrom","title":"fn withHideFrom","text":"<pre><code>withHideFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/options/series.html#fn-withhidefrommixin","title":"fn withHideFromMixin","text":"<pre><code>withHideFromMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/options/series.html#fn-withlabel","title":"fn withLabel","text":"<pre><code>withLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"auto\"</code>, <code>\"never\"</code>, <code>\"always\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/options/series.html#fn-withlabelvalue","title":"fn withLabelValue","text":"<pre><code>withLabelValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withlabelvaluemixin","title":"fn withLabelValueMixin","text":"<pre><code>withLabelValueMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withlinecolor","title":"fn withLineColor","text":"<pre><code>withLineColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withlinecolormixin","title":"fn withLineColorMixin","text":"<pre><code>withLineColorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withlinestyle","title":"fn withLineStyle","text":"<pre><code>withLineStyle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/options/series.html#fn-withlinestylemixin","title":"fn withLineStyleMixin","text":"<pre><code>withLineStyleMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/options/series.html#fn-withlinewidth","title":"fn withLineWidth","text":"<pre><code>withLineWidth(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withpointcolor","title":"fn withPointColor","text":"<pre><code>withPointColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withpointcolormixin","title":"fn withPointColorMixin","text":"<pre><code>withPointColorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withpointsize","title":"fn withPointSize","text":"<pre><code>withPointSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withpointsizemixin","title":"fn withPointSizeMixin","text":"<pre><code>withPointSizeMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withscaledistribution","title":"fn withScaleDistribution","text":"<pre><code>withScaleDistribution(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/options/series.html#fn-withscaledistributionmixin","title":"fn withScaleDistributionMixin","text":"<pre><code>withScaleDistributionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/options/series.html#fn-withshow","title":"fn withShow","text":"<pre><code>withShow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"points\"</code>, <code>\"lines\"</code>, <code>\"points+lines\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withx","title":"fn withX","text":"<pre><code>withX(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-withy","title":"fn withY","text":"<pre><code>withY(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#obj-hidefrom","title":"obj hideFrom","text":""},{"location":"API/panel/xyChart/options/series.html#fn-hidefromwithlegend","title":"fn hideFrom.withLegend","text":"<pre><code>hideFrom.withLegend(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-hidefromwithtooltip","title":"fn hideFrom.withTooltip","text":"<pre><code>hideFrom.withTooltip(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-hidefromwithviz","title":"fn hideFrom.withViz","text":"<pre><code>hideFrom.withViz(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/options/series.html#obj-labelvalue","title":"obj labelValue","text":""},{"location":"API/panel/xyChart/options/series.html#fn-labelvaluewithfield","title":"fn labelValue.withField","text":"<pre><code>labelValue.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>fixed: T -- will be added by each element</p>"},{"location":"API/panel/xyChart/options/series.html#fn-labelvaluewithfixed","title":"fn labelValue.withFixed","text":"<pre><code>labelValue.withFixed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-labelvaluewithmode","title":"fn labelValue.withMode","text":"<pre><code>labelValue.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"fixed\"</code>, <code>\"field\"</code>, <code>\"template\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/options/series.html#obj-linecolor","title":"obj lineColor","text":""},{"location":"API/panel/xyChart/options/series.html#fn-linecolorwithfield","title":"fn lineColor.withField","text":"<pre><code>lineColor.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>fixed: T -- will be added by each element</p>"},{"location":"API/panel/xyChart/options/series.html#fn-linecolorwithfixed","title":"fn lineColor.withFixed","text":"<pre><code>lineColor.withFixed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>color value</p>"},{"location":"API/panel/xyChart/options/series.html#obj-linestyle","title":"obj lineStyle","text":""},{"location":"API/panel/xyChart/options/series.html#fn-linestylewithdash","title":"fn lineStyle.withDash","text":"<pre><code>lineStyle.withDash(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-linestylewithdashmixin","title":"fn lineStyle.withDashMixin","text":"<pre><code>lineStyle.withDashMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-linestylewithfill","title":"fn lineStyle.withFill","text":"<pre><code>lineStyle.withFill(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"solid\"</code>, <code>\"dash\"</code>, <code>\"dot\"</code>, <code>\"square\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/options/series.html#obj-pointcolor","title":"obj pointColor","text":""},{"location":"API/panel/xyChart/options/series.html#fn-pointcolorwithfield","title":"fn pointColor.withField","text":"<pre><code>pointColor.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>fixed: T -- will be added by each element</p>"},{"location":"API/panel/xyChart/options/series.html#fn-pointcolorwithfixed","title":"fn pointColor.withFixed","text":"<pre><code>pointColor.withFixed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>color value</p>"},{"location":"API/panel/xyChart/options/series.html#obj-pointsize","title":"obj pointSize","text":""},{"location":"API/panel/xyChart/options/series.html#fn-pointsizewithfield","title":"fn pointSize.withField","text":"<pre><code>pointSize.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>fixed: T -- will be added by each element</p>"},{"location":"API/panel/xyChart/options/series.html#fn-pointsizewithfixed","title":"fn pointSize.withFixed","text":"<pre><code>pointSize.withFixed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-pointsizewithmax","title":"fn pointSize.withMax","text":"<pre><code>pointSize.withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-pointsizewithmin","title":"fn pointSize.withMin","text":"<pre><code>pointSize.withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-pointsizewithmode","title":"fn pointSize.withMode","text":"<pre><code>pointSize.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"quad\"</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/options/series.html#obj-scaledistribution","title":"obj scaleDistribution","text":""},{"location":"API/panel/xyChart/options/series.html#fn-scaledistributionwithlinearthreshold","title":"fn scaleDistribution.withLinearThreshold","text":"<pre><code>scaleDistribution.withLinearThreshold(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-scaledistributionwithlog","title":"fn scaleDistribution.withLog","text":"<pre><code>scaleDistribution.withLog(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/panel/xyChart/options/series.html#fn-scaledistributionwithtype","title":"fn scaleDistribution.withType","text":"<pre><code>scaleDistribution.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"linear\"</code>, <code>\"log\"</code>, <code>\"ordinal\"</code>, <code>\"symlog\"</code></li> </ul> </li> </ul> <p>TODO docs</p>"},{"location":"API/panel/xyChart/panelOptions/link.html","title":"link","text":""},{"location":"API/panel/xyChart/panelOptions/link.html#index","title":"Index","text":"<ul> <li><code>fn withAsDropdown(value=true)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIncludeVars(value=true)</code></li> <li><code>fn withKeepTime(value=true)</code></li> <li><code>fn withTags(value)</code></li> <li><code>fn withTagsMixin(value)</code></li> <li><code>fn withTargetBlank(value=true)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withTooltip(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul>"},{"location":"API/panel/xyChart/panelOptions/link.html#fields","title":"Fields","text":""},{"location":"API/panel/xyChart/panelOptions/link.html#fn-withasdropdown","title":"fn withAsDropdown","text":"<pre><code>withAsDropdown(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards</p>"},{"location":"API/panel/xyChart/panelOptions/link.html#fn-withicon","title":"fn withIcon","text":"<pre><code>withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon name to be displayed with the link</p>"},{"location":"API/panel/xyChart/panelOptions/link.html#fn-withincludevars","title":"fn withIncludeVars","text":"<pre><code>withIncludeVars(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current template variables values in the link as query params</p>"},{"location":"API/panel/xyChart/panelOptions/link.html#fn-withkeeptime","title":"fn withKeepTime","text":"<pre><code>withKeepTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, includes current time range in the link as query params</p>"},{"location":"API/panel/xyChart/panelOptions/link.html#fn-withtags","title":"fn withTags","text":"<pre><code>withTags(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/xyChart/panelOptions/link.html#fn-withtagsmixin","title":"fn withTagsMixin","text":"<pre><code>withTagsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards</p>"},{"location":"API/panel/xyChart/panelOptions/link.html#fn-withtargetblank","title":"fn withTargetBlank","text":"<pre><code>withTargetBlank(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If true, the link will be opened in a new tab</p>"},{"location":"API/panel/xyChart/panelOptions/link.html#fn-withtitle","title":"fn withTitle","text":"<pre><code>withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Title to display with the link</p>"},{"location":"API/panel/xyChart/panelOptions/link.html#fn-withtooltip","title":"fn withTooltip","text":"<pre><code>withTooltip(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Tooltip to display when the user hovers their mouse over it</p>"},{"location":"API/panel/xyChart/panelOptions/link.html#fn-withtype","title":"fn withType","text":"<pre><code>withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"link\"</code>, <code>\"dashboards\"</code></li> </ul> </li> </ul> <p>Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)</p>"},{"location":"API/panel/xyChart/panelOptions/link.html#fn-withurl","title":"fn withUrl","text":"<pre><code>withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Link URL. Only required/valid if the type is link</p>"},{"location":"API/panel/xyChart/queryOptions/transformation.html","title":"transformation","text":""},{"location":"API/panel/xyChart/queryOptions/transformation.html#index","title":"Index","text":"<ul> <li><code>fn withDisabled(value=true)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilterMixin(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withTopic(value)</code></li> <li><code>obj filter</code><ul> <li><code>fn withId(value=\"\")</code></li> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/queryOptions/transformation.html#fields","title":"Fields","text":""},{"location":"API/panel/xyChart/queryOptions/transformation.html#fn-withdisabled","title":"fn withDisabled","text":"<pre><code>withDisabled(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Disabled transformations are skipped</p>"},{"location":"API/panel/xyChart/queryOptions/transformation.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/xyChart/queryOptions/transformation.html#fn-withfiltermixin","title":"fn withFilterMixin","text":"<pre><code>withFilterMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation. It comes with in id ( to resolve implementation from registry) and a configuration that\u2019s specific to a particular matcher type.</p>"},{"location":"API/panel/xyChart/queryOptions/transformation.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Unique identifier of transformer</p>"},{"location":"API/panel/xyChart/queryOptions/transformation.html#fn-withoptions","title":"fn withOptions","text":"<pre><code>withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/xyChart/queryOptions/transformation.html#fn-withoptionsmixin","title":"fn withOptionsMixin","text":"<pre><code>withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Options to be passed to the transformer Valid options depend on the transformer id</p>"},{"location":"API/panel/xyChart/queryOptions/transformation.html#fn-withtopic","title":"fn withTopic","text":"<pre><code>withTopic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"series\"</code>, <code>\"annotations\"</code>, <code>\"alertStates\"</code></li> </ul> </li> </ul> <p>Where to pull DataFrames from as input to transformation</p>"},{"location":"API/panel/xyChart/queryOptions/transformation.html#obj-filter","title":"obj filter","text":""},{"location":"API/panel/xyChart/queryOptions/transformation.html#fn-filterwithid","title":"fn filter.withId","text":"<pre><code>filter.withId(value=\"\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"\"</code></li> </ul> </li> </ul> <p>The matcher id. This is used to find the matcher implementation from registry.</p>"},{"location":"API/panel/xyChart/queryOptions/transformation.html#fn-filterwithoptions","title":"fn filter.withOptions","text":"<pre><code>filter.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/xyChart/queryOptions/transformation.html#fn-filterwithoptionsmixin","title":"fn filter.withOptionsMixin","text":"<pre><code>filter.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The matcher options. This is specific to the matcher implementation.</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html","title":"mapping","text":""},{"location":"API/panel/xyChart/standardOptions/mapping.html#index","title":"Index","text":"<ul> <li><code>obj RangeMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>fn withTo(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj RegexMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withPattern(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj SpecialValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj options</code><ul> <li><code>fn withMatch(value)</code></li> <li><code>fn withResult(value)</code></li> <li><code>fn withResultMixin(value)</code></li> <li><code>obj result</code><ul> <li><code>fn withColor(value)</code></li> <li><code>fn withIcon(value)</code></li> <li><code>fn withIndex(value)</code></li> <li><code>fn withText(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj ValueMap</code><ul> <li><code>fn withOptions(value)</code></li> <li><code>fn withOptionsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fields","title":"Fields","text":""},{"location":"API/panel/xyChart/standardOptions/mapping.html#obj-rangemap","title":"obj RangeMap","text":""},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-rangemapwithoptions","title":"fn RangeMap.withOptions","text":"<pre><code>RangeMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-rangemapwithoptionsmixin","title":"fn RangeMap.withOptionsMixin","text":"<pre><code>RangeMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Range to match against and the result to apply when the value is within the range</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-rangemapwithtype","title":"fn RangeMap.withType","text":"<pre><code>RangeMap.withType()\n</code></pre>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#obj-rangemapoptions","title":"obj RangeMap.options","text":""},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-rangemapoptionswithfrom","title":"fn RangeMap.options.withFrom","text":"<pre><code>RangeMap.options.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Min value of the range. It can be null which means -Infinity</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-rangemapoptionswithresult","title":"fn RangeMap.options.withResult","text":"<pre><code>RangeMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-rangemapoptionswithresultmixin","title":"fn RangeMap.options.withResultMixin","text":"<pre><code>RangeMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-rangemapoptionswithto","title":"fn RangeMap.options.withTo","text":"<pre><code>RangeMap.options.withTo(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Max value of the range. It can be null which means +Infinity</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#obj-rangemapoptionsresult","title":"obj RangeMap.options.result","text":""},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-rangemapoptionsresultwithcolor","title":"fn RangeMap.options.result.withColor","text":"<pre><code>RangeMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-rangemapoptionsresultwithicon","title":"fn RangeMap.options.result.withIcon","text":"<pre><code>RangeMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-rangemapoptionsresultwithindex","title":"fn RangeMap.options.result.withIndex","text":"<pre><code>RangeMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-rangemapoptionsresultwithtext","title":"fn RangeMap.options.result.withText","text":"<pre><code>RangeMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#obj-regexmap","title":"obj RegexMap","text":""},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-regexmapwithoptions","title":"fn RegexMap.withOptions","text":"<pre><code>RegexMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-regexmapwithoptionsmixin","title":"fn RegexMap.withOptionsMixin","text":"<pre><code>RegexMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Regular expression to match against and the result to apply when the value matches the regex</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-regexmapwithtype","title":"fn RegexMap.withType","text":"<pre><code>RegexMap.withType()\n</code></pre>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#obj-regexmapoptions","title":"obj RegexMap.options","text":""},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-regexmapoptionswithpattern","title":"fn RegexMap.options.withPattern","text":"<pre><code>RegexMap.options.withPattern(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Regular expression to match against</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-regexmapoptionswithresult","title":"fn RegexMap.options.withResult","text":"<pre><code>RegexMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-regexmapoptionswithresultmixin","title":"fn RegexMap.options.withResultMixin","text":"<pre><code>RegexMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#obj-regexmapoptionsresult","title":"obj RegexMap.options.result","text":""},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-regexmapoptionsresultwithcolor","title":"fn RegexMap.options.result.withColor","text":"<pre><code>RegexMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-regexmapoptionsresultwithicon","title":"fn RegexMap.options.result.withIcon","text":"<pre><code>RegexMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-regexmapoptionsresultwithindex","title":"fn RegexMap.options.result.withIndex","text":"<pre><code>RegexMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-regexmapoptionsresultwithtext","title":"fn RegexMap.options.result.withText","text":"<pre><code>RegexMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#obj-specialvaluemap","title":"obj SpecialValueMap","text":""},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-specialvaluemapwithoptions","title":"fn SpecialValueMap.withOptions","text":"<pre><code>SpecialValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-specialvaluemapwithoptionsmixin","title":"fn SpecialValueMap.withOptionsMixin","text":"<pre><code>SpecialValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-specialvaluemapwithtype","title":"fn SpecialValueMap.withType","text":"<pre><code>SpecialValueMap.withType()\n</code></pre>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#obj-specialvaluemapoptions","title":"obj SpecialValueMap.options","text":""},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-specialvaluemapoptionswithmatch","title":"fn SpecialValueMap.options.withMatch","text":"<pre><code>SpecialValueMap.options.withMatch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"true\"</code>, <code>\"false\"</code>, <code>\"null\"</code>, <code>\"nan\"</code>, <code>\"null+nan\"</code>, <code>\"empty\"</code></li> </ul> </li> </ul> <p>Special value types supported by the <code>SpecialValueMap</code></p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-specialvaluemapoptionswithresult","title":"fn SpecialValueMap.options.withResult","text":"<pre><code>SpecialValueMap.options.withResult(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-specialvaluemapoptionswithresultmixin","title":"fn SpecialValueMap.options.withResultMixin","text":"<pre><code>SpecialValueMap.options.withResultMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Result used as replacement with text and color when the value matches</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#obj-specialvaluemapoptionsresult","title":"obj SpecialValueMap.options.result","text":""},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithcolor","title":"fn SpecialValueMap.options.result.withColor","text":"<pre><code>SpecialValueMap.options.result.withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to use when the value matches</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithicon","title":"fn SpecialValueMap.options.result.withIcon","text":"<pre><code>SpecialValueMap.options.result.withIcon(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Icon to display when the value matches. Only specific visualizations.</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithindex","title":"fn SpecialValueMap.options.result.withIndex","text":"<pre><code>SpecialValueMap.options.result.withIndex(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Position in the mapping array. Only used internally.</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-specialvaluemapoptionsresultwithtext","title":"fn SpecialValueMap.options.result.withText","text":"<pre><code>SpecialValueMap.options.result.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Text to display when the value matches</p>"},{"location":"API/panel/xyChart/standardOptions/mapping.html#obj-valuemap","title":"obj ValueMap","text":""},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-valuemapwithoptions","title":"fn ValueMap.withOptions","text":"<pre><code>ValueMap.withOptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-valuemapwithoptionsmixin","title":"fn ValueMap.withOptionsMixin","text":"<pre><code>ValueMap.withOptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Map with : ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"},{"location":"API/panel/xyChart/standardOptions/mapping.html#fn-valuemapwithtype","title":"fn ValueMap.withType","text":"<pre><code>ValueMap.withType()\n</code></pre>"},{"location":"API/panel/xyChart/standardOptions/override.html","title":"override","text":"<p>Overrides allow you to customize visualization settings for specific fields or series. This is accomplished by adding an override rule that targets a particular set of fields and that can each define multiple options.</p> <pre><code>override.byType.new('number')\n+ override.byType.withPropertiesFromOptions(\n  panel.standardOptions.withDecimals(2)\n  + panel.standardOptions.withUnit('s')\n)\n</code></pre>"},{"location":"API/panel/xyChart/standardOptions/override.html#index","title":"Index","text":"<ul> <li><code>obj byName</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byQuery</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byRegexp</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byType</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> <li><code>obj byValue</code><ul> <li><code>fn new(value)</code></li> <li><code>fn withPropertiesFromOptions(options)</code></li> <li><code>fn withProperty(id, value)</code></li> </ul> </li> </ul>"},{"location":"API/panel/xyChart/standardOptions/override.html#fields","title":"Fields","text":""},{"location":"API/panel/xyChart/standardOptions/override.html#obj-byname","title":"obj byName","text":""},{"location":"API/panel/xyChart/standardOptions/override.html#fn-bynamenew","title":"fn byName.new","text":"<pre><code>byName.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byName</code>.</p>"},{"location":"API/panel/xyChart/standardOptions/override.html#fn-bynamewithpropertiesfromoptions","title":"fn byName.withPropertiesFromOptions","text":"<pre><code>byName.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/xyChart/standardOptions/override.html#fn-bynamewithproperty","title":"fn byName.withProperty","text":"<pre><code>byName.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/xyChart/standardOptions/override.html#obj-byquery","title":"obj byQuery","text":""},{"location":"API/panel/xyChart/standardOptions/override.html#fn-byquerynew","title":"fn byQuery.new","text":"<pre><code>byQuery.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byFrameRefID</code>.</p>"},{"location":"API/panel/xyChart/standardOptions/override.html#fn-byquerywithpropertiesfromoptions","title":"fn byQuery.withPropertiesFromOptions","text":"<pre><code>byQuery.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/xyChart/standardOptions/override.html#fn-byquerywithproperty","title":"fn byQuery.withProperty","text":"<pre><code>byQuery.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/xyChart/standardOptions/override.html#obj-byregexp","title":"obj byRegexp","text":""},{"location":"API/panel/xyChart/standardOptions/override.html#fn-byregexpnew","title":"fn byRegexp.new","text":"<pre><code>byRegexp.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byRegexp</code>.</p>"},{"location":"API/panel/xyChart/standardOptions/override.html#fn-byregexpwithpropertiesfromoptions","title":"fn byRegexp.withPropertiesFromOptions","text":"<pre><code>byRegexp.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/xyChart/standardOptions/override.html#fn-byregexpwithproperty","title":"fn byRegexp.withProperty","text":"<pre><code>byRegexp.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/xyChart/standardOptions/override.html#obj-bytype","title":"obj byType","text":""},{"location":"API/panel/xyChart/standardOptions/override.html#fn-bytypenew","title":"fn byType.new","text":"<pre><code>byType.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byType</code>.</p>"},{"location":"API/panel/xyChart/standardOptions/override.html#fn-bytypewithpropertiesfromoptions","title":"fn byType.withPropertiesFromOptions","text":"<pre><code>byType.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/xyChart/standardOptions/override.html#fn-bytypewithproperty","title":"fn byType.withProperty","text":"<pre><code>byType.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/xyChart/standardOptions/override.html#obj-byvalue","title":"obj byValue","text":""},{"location":"API/panel/xyChart/standardOptions/override.html#fn-byvaluenew","title":"fn byValue.new","text":"<pre><code>byValue.new(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p><code>new</code> creates a new override of type <code>byValue</code>.</p>"},{"location":"API/panel/xyChart/standardOptions/override.html#fn-byvaluewithpropertiesfromoptions","title":"fn byValue.withPropertiesFromOptions","text":"<pre><code>byValue.withPropertiesFromOptions(options)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>options (<code>object</code>)</li> </ul> <p><code>withPropertiesFromOptions</code> takes an object with properties that need to be overridden. See example code above.</p>"},{"location":"API/panel/xyChart/standardOptions/override.html#fn-byvaluewithproperty","title":"fn byValue.withProperty","text":"<pre><code>byValue.withProperty(id, value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>id (<code>string</code>)</li> <li>value (<code>any</code>)</li> </ul> <p><code>withProperty</code> adds a property that needs to be overridden. This function can be called multiple time, adding more properties.</p>"},{"location":"API/panel/xyChart/standardOptions/threshold/step.html","title":"threshold.step","text":""},{"location":"API/panel/xyChart/standardOptions/threshold/step.html#index","title":"Index","text":"<ul> <li><code>fn withColor(value)</code></li> <li><code>fn withValue(value)</code></li> </ul>"},{"location":"API/panel/xyChart/standardOptions/threshold/step.html#fields","title":"Fields","text":""},{"location":"API/panel/xyChart/standardOptions/threshold/step.html#fn-withcolor","title":"fn withColor","text":"<pre><code>withColor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.</p>"},{"location":"API/panel/xyChart/standardOptions/threshold/step.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded. Nulls currently appear here when serializing -Infinity to JSON.</p>"},{"location":"API/query/index.html","title":"query","text":"<p>grafonnet.query</p>"},{"location":"API/query/index.html#subpackages","title":"Subpackages","text":"<ul> <li>azureMonitor</li> <li>cloudWatch</li> <li>elasticsearch</li> <li>expr</li> <li>googleCloudMonitoring</li> <li>grafanaPyroscope</li> <li>loki</li> <li>parca</li> <li>prometheus</li> <li>tempo</li> <li>testData</li> </ul>"},{"location":"API/query/googleCloudMonitoring.html","title":"googleCloudMonitoring","text":"<p>grafonnet.query.googleCloudMonitoring</p>"},{"location":"API/query/googleCloudMonitoring.html#index","title":"Index","text":"<ul> <li><code>fn withAliasBy(value)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withIntervalMs(value)</code></li> <li><code>fn withPromQLQuery(value)</code></li> <li><code>fn withPromQLQueryMixin(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withSloQuery(value)</code></li> <li><code>fn withSloQueryMixin(value)</code></li> <li><code>fn withTimeSeriesList(value)</code></li> <li><code>fn withTimeSeriesListMixin(value)</code></li> <li><code>fn withTimeSeriesQuery(value)</code></li> <li><code>fn withTimeSeriesQueryMixin(value)</code></li> <li><code>obj promQLQuery</code><ul> <li><code>fn withExpr(value)</code></li> <li><code>fn withProjectName(value)</code></li> <li><code>fn withStep(value)</code></li> </ul> </li> <li><code>obj sloQuery</code><ul> <li><code>fn withAlignmentPeriod(value)</code></li> <li><code>fn withGoal(value)</code></li> <li><code>fn withLookbackPeriod(value)</code></li> <li><code>fn withPerSeriesAligner(value)</code></li> <li><code>fn withProjectName(value)</code></li> <li><code>fn withSelectorName(value)</code></li> <li><code>fn withServiceId(value)</code></li> <li><code>fn withServiceName(value)</code></li> <li><code>fn withSloId(value)</code></li> <li><code>fn withSloName(value)</code></li> </ul> </li> <li><code>obj timeSeriesList</code><ul> <li><code>fn withAlignmentPeriod(value)</code></li> <li><code>fn withCrossSeriesReducer(value)</code></li> <li><code>fn withFilters(value)</code></li> <li><code>fn withFiltersMixin(value)</code></li> <li><code>fn withGroupBys(value)</code></li> <li><code>fn withGroupBysMixin(value)</code></li> <li><code>fn withPerSeriesAligner(value)</code></li> <li><code>fn withPreprocessor(value)</code></li> <li><code>fn withProjectName(value)</code></li> <li><code>fn withSecondaryAlignmentPeriod(value)</code></li> <li><code>fn withSecondaryCrossSeriesReducer(value)</code></li> <li><code>fn withSecondaryGroupBys(value)</code></li> <li><code>fn withSecondaryGroupBysMixin(value)</code></li> <li><code>fn withSecondaryPerSeriesAligner(value)</code></li> <li><code>fn withText(value)</code></li> <li><code>fn withTitle(value)</code></li> <li><code>fn withView(value)</code></li> </ul> </li> <li><code>obj timeSeriesQuery</code><ul> <li><code>fn withGraphPeriod(value=\"disabled\")</code></li> <li><code>fn withProjectName(value)</code></li> <li><code>fn withQuery(value)</code></li> </ul> </li> </ul>"},{"location":"API/query/googleCloudMonitoring.html#fields","title":"Fields","text":""},{"location":"API/query/googleCloudMonitoring.html#fn-withaliasby","title":"fn withAliasBy","text":"<pre><code>withAliasBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Aliases can be set to modify the legend labels. e.g. {{metric.label.xxx}}. See docs for more detail.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Set the datasource for this query.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If hide is set to true, Grafana will filter out the response(s) associated with this query before returning it to the panel.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-withintervalms","title":"fn withIntervalMs","text":"<pre><code>withIntervalMs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Time interval in milliseconds.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-withpromqlquery","title":"fn withPromQLQuery","text":"<pre><code>withPromQLQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>PromQL sub-query properties.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-withpromqlquerymixin","title":"fn withPromQLQueryMixin","text":"<pre><code>withPromQLQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>PromQL sub-query properties.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specify the query flavor TODO make this required and give it a default</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>A unique identifier for the query within the list of targets. In server side expressions, the refId is used as a variable name to identify results. By default, the UI will assign A-&gt;Z; however setting meaningful names may be useful.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-withsloquery","title":"fn withSloQuery","text":"<pre><code>withSloQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>SLO sub-query properties.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-withsloquerymixin","title":"fn withSloQueryMixin","text":"<pre><code>withSloQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>SLO sub-query properties.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-withtimeserieslist","title":"fn withTimeSeriesList","text":"<pre><code>withTimeSeriesList(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Time Series List sub-query properties.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-withtimeserieslistmixin","title":"fn withTimeSeriesListMixin","text":"<pre><code>withTimeSeriesListMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Time Series List sub-query properties.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-withtimeseriesquery","title":"fn withTimeSeriesQuery","text":"<pre><code>withTimeSeriesQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Time Series sub-query properties.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-withtimeseriesquerymixin","title":"fn withTimeSeriesQueryMixin","text":"<pre><code>withTimeSeriesQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Time Series sub-query properties.</p>"},{"location":"API/query/googleCloudMonitoring.html#obj-promqlquery","title":"obj promQLQuery","text":""},{"location":"API/query/googleCloudMonitoring.html#fn-promqlquerywithexpr","title":"fn promQLQuery.withExpr","text":"<pre><code>promQLQuery.withExpr(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>PromQL expression/query to be executed.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-promqlquerywithprojectname","title":"fn promQLQuery.withProjectName","text":"<pre><code>promQLQuery.withProjectName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>GCP project to execute the query against.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-promqlquerywithstep","title":"fn promQLQuery.withStep","text":"<pre><code>promQLQuery.withStep(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>PromQL min step</p>"},{"location":"API/query/googleCloudMonitoring.html#obj-sloquery","title":"obj sloQuery","text":""},{"location":"API/query/googleCloudMonitoring.html#fn-sloquerywithalignmentperiod","title":"fn sloQuery.withAlignmentPeriod","text":"<pre><code>sloQuery.withAlignmentPeriod(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-sloquerywithgoal","title":"fn sloQuery.withGoal","text":"<pre><code>sloQuery.withGoal(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>SLO goal value.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-sloquerywithlookbackperiod","title":"fn sloQuery.withLookbackPeriod","text":"<pre><code>sloQuery.withLookbackPeriod(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specific lookback period for the SLO.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-sloquerywithperseriesaligner","title":"fn sloQuery.withPerSeriesAligner","text":"<pre><code>sloQuery.withPerSeriesAligner(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alignment function to be used. Defaults to ALIGN_MEAN.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-sloquerywithprojectname","title":"fn sloQuery.withProjectName","text":"<pre><code>sloQuery.withProjectName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>GCP project to execute the query against.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-sloquerywithselectorname","title":"fn sloQuery.withSelectorName","text":"<pre><code>sloQuery.withSelectorName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>SLO selector.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-sloquerywithserviceid","title":"fn sloQuery.withServiceId","text":"<pre><code>sloQuery.withServiceId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>ID for the service the SLO is in.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-sloquerywithservicename","title":"fn sloQuery.withServiceName","text":"<pre><code>sloQuery.withServiceName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name for the service the SLO is in.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-sloquerywithsloid","title":"fn sloQuery.withSloId","text":"<pre><code>sloQuery.withSloId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>ID for the SLO.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-sloquerywithsloname","title":"fn sloQuery.withSloName","text":"<pre><code>sloQuery.withSloName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of the SLO.</p>"},{"location":"API/query/googleCloudMonitoring.html#obj-timeserieslist","title":"obj timeSeriesList","text":""},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithalignmentperiod","title":"fn timeSeriesList.withAlignmentPeriod","text":"<pre><code>timeSeriesList.withAlignmentPeriod(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithcrossseriesreducer","title":"fn timeSeriesList.withCrossSeriesReducer","text":"<pre><code>timeSeriesList.withCrossSeriesReducer(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Reducer applied across a set of time-series values. Defaults to REDUCE_NONE.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithfilters","title":"fn timeSeriesList.withFilters","text":"<pre><code>timeSeriesList.withFilters(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Array of filters to query data by. Labels that can be filtered on are defined by the metric.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithfiltersmixin","title":"fn timeSeriesList.withFiltersMixin","text":"<pre><code>timeSeriesList.withFiltersMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Array of filters to query data by. Labels that can be filtered on are defined by the metric.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithgroupbys","title":"fn timeSeriesList.withGroupBys","text":"<pre><code>timeSeriesList.withGroupBys(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Array of labels to group data by.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithgroupbysmixin","title":"fn timeSeriesList.withGroupBysMixin","text":"<pre><code>timeSeriesList.withGroupBysMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Array of labels to group data by.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithperseriesaligner","title":"fn timeSeriesList.withPerSeriesAligner","text":"<pre><code>timeSeriesList.withPerSeriesAligner(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alignment function to be used. Defaults to ALIGN_MEAN.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithpreprocessor","title":"fn timeSeriesList.withPreprocessor","text":"<pre><code>timeSeriesList.withPreprocessor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"none\"</code>, <code>\"rate\"</code>, <code>\"delta\"</code></li> </ul> </li> </ul> <p>Types of pre-processor available. Defined by the metric.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithprojectname","title":"fn timeSeriesList.withProjectName","text":"<pre><code>timeSeriesList.withProjectName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>GCP project to execute the query against.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithsecondaryalignmentperiod","title":"fn timeSeriesList.withSecondaryAlignmentPeriod","text":"<pre><code>timeSeriesList.withSecondaryAlignmentPeriod(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Only present if a preprocessor is selected. Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithsecondarycrossseriesreducer","title":"fn timeSeriesList.withSecondaryCrossSeriesReducer","text":"<pre><code>timeSeriesList.withSecondaryCrossSeriesReducer(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Only present if a preprocessor is selected. Reducer applied across a set of time-series values. Defaults to REDUCE_NONE.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithsecondarygroupbys","title":"fn timeSeriesList.withSecondaryGroupBys","text":"<pre><code>timeSeriesList.withSecondaryGroupBys(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Only present if a preprocessor is selected. Array of labels to group data by.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithsecondarygroupbysmixin","title":"fn timeSeriesList.withSecondaryGroupBysMixin","text":"<pre><code>timeSeriesList.withSecondaryGroupBysMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Only present if a preprocessor is selected. Array of labels to group data by.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithsecondaryperseriesaligner","title":"fn timeSeriesList.withSecondaryPerSeriesAligner","text":"<pre><code>timeSeriesList.withSecondaryPerSeriesAligner(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Only present if a preprocessor is selected. Alignment function to be used. Defaults to ALIGN_MEAN.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithtext","title":"fn timeSeriesList.withText","text":"<pre><code>timeSeriesList.withText(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Annotation text.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithtitle","title":"fn timeSeriesList.withTitle","text":"<pre><code>timeSeriesList.withTitle(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Annotation title.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeserieslistwithview","title":"fn timeSeriesList.withView","text":"<pre><code>timeSeriesList.withView(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Data view, defaults to FULL.</p>"},{"location":"API/query/googleCloudMonitoring.html#obj-timeseriesquery","title":"obj timeSeriesQuery","text":""},{"location":"API/query/googleCloudMonitoring.html#fn-timeseriesquerywithgraphperiod","title":"fn timeSeriesQuery.withGraphPeriod","text":"<pre><code>timeSeriesQuery.withGraphPeriod(value=\"disabled\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"disabled\"</code></li> </ul> </li> </ul> <p>To disable the graphPeriod, it should explictly be set to 'disabled'.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeseriesquerywithprojectname","title":"fn timeSeriesQuery.withProjectName","text":"<pre><code>timeSeriesQuery.withProjectName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>GCP project to execute the query against.</p>"},{"location":"API/query/googleCloudMonitoring.html#fn-timeseriesquerywithquery","title":"fn timeSeriesQuery.withQuery","text":"<pre><code>timeSeriesQuery.withQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>MQL query to be executed.</p>"},{"location":"API/query/grafanaPyroscope.html","title":"grafanaPyroscope","text":"<p>grafonnet.query.grafanaPyroscope</p>"},{"location":"API/query/grafanaPyroscope.html#index","title":"Index","text":"<ul> <li><code>fn withDatasource(value)</code></li> <li><code>fn withGroupBy(value)</code></li> <li><code>fn withGroupByMixin(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withLabelSelector(value=\"{}\")</code></li> <li><code>fn withMaxNodes(value)</code></li> <li><code>fn withProfileTypeId(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withSpanSelector(value)</code></li> <li><code>fn withSpanSelectorMixin(value)</code></li> </ul>"},{"location":"API/query/grafanaPyroscope.html#fields","title":"Fields","text":""},{"location":"API/query/grafanaPyroscope.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Set the datasource for this query.</p>"},{"location":"API/query/grafanaPyroscope.html#fn-withgroupby","title":"fn withGroupBy","text":"<pre><code>withGroupBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Allows to group the results.</p>"},{"location":"API/query/grafanaPyroscope.html#fn-withgroupbymixin","title":"fn withGroupByMixin","text":"<pre><code>withGroupByMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Allows to group the results.</p>"},{"location":"API/query/grafanaPyroscope.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If hide is set to true, Grafana will filter out the response(s) associated with this query before returning it to the panel.</p>"},{"location":"API/query/grafanaPyroscope.html#fn-withlabelselector","title":"fn withLabelSelector","text":"<pre><code>withLabelSelector(value=\"{}\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"{}\"</code></li> </ul> </li> </ul> <p>Specifies the query label selectors.</p>"},{"location":"API/query/grafanaPyroscope.html#fn-withmaxnodes","title":"fn withMaxNodes","text":"<pre><code>withMaxNodes(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Sets the maximum number of nodes in the flamegraph.</p>"},{"location":"API/query/grafanaPyroscope.html#fn-withprofiletypeid","title":"fn withProfileTypeId","text":"<pre><code>withProfileTypeId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specifies the type of profile to query.</p>"},{"location":"API/query/grafanaPyroscope.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specify the query flavor TODO make this required and give it a default</p>"},{"location":"API/query/grafanaPyroscope.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>A unique identifier for the query within the list of targets. In server side expressions, the refId is used as a variable name to identify results. By default, the UI will assign A-&gt;Z; however setting meaningful names may be useful.</p>"},{"location":"API/query/grafanaPyroscope.html#fn-withspanselector","title":"fn withSpanSelector","text":"<pre><code>withSpanSelector(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Specifies the query span selectors.</p>"},{"location":"API/query/grafanaPyroscope.html#fn-withspanselectormixin","title":"fn withSpanSelectorMixin","text":"<pre><code>withSpanSelectorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Specifies the query span selectors.</p>"},{"location":"API/query/loki.html","title":"loki","text":"<p>grafonnet.query.loki</p>"},{"location":"API/query/loki.html#index","title":"Index","text":"<ul> <li><code>fn new(datasource, expr)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withEditorMode(value)</code></li> <li><code>fn withExpr(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withInstant(value=true)</code></li> <li><code>fn withLegendFormat(value)</code></li> <li><code>fn withMaxLines(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRange(value=true)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withResolution(value)</code></li> <li><code>fn withStep(value)</code></li> </ul>"},{"location":"API/query/loki.html#fields","title":"Fields","text":""},{"location":"API/query/loki.html#fn-new","title":"fn new","text":"<pre><code>new(datasource, expr)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>datasource (<code>string</code>)</li> <li>expr (<code>string</code>)</li> </ul> <p>Creates a new loki query target for panels.</p>"},{"location":"API/query/loki.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Set the datasource for this query.</p>"},{"location":"API/query/loki.html#fn-witheditormode","title":"fn withEditorMode","text":"<pre><code>withEditorMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"code\"</code>, <code>\"builder\"</code></li> </ul> </li> </ul>"},{"location":"API/query/loki.html#fn-withexpr","title":"fn withExpr","text":"<pre><code>withExpr(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The LogQL query.</p>"},{"location":"API/query/loki.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If hide is set to true, Grafana will filter out the response(s) associated with this query before returning it to the panel.</p>"},{"location":"API/query/loki.html#fn-withinstant","title":"fn withInstant","text":"<pre><code>withInstant(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>@deprecated, now use queryType.</p>"},{"location":"API/query/loki.html#fn-withlegendformat","title":"fn withLegendFormat","text":"<pre><code>withLegendFormat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Used to override the name of the series.</p>"},{"location":"API/query/loki.html#fn-withmaxlines","title":"fn withMaxLines","text":"<pre><code>withMaxLines(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Used to limit the number of log rows returned.</p>"},{"location":"API/query/loki.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specify the query flavor TODO make this required and give it a default</p>"},{"location":"API/query/loki.html#fn-withrange","title":"fn withRange","text":"<pre><code>withRange(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>@deprecated, now use queryType.</p>"},{"location":"API/query/loki.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>A unique identifier for the query within the list of targets. In server side expressions, the refId is used as a variable name to identify results. By default, the UI will assign A-&gt;Z; however setting meaningful names may be useful.</p>"},{"location":"API/query/loki.html#fn-withresolution","title":"fn withResolution","text":"<pre><code>withResolution(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>@deprecated, now use step.</p>"},{"location":"API/query/loki.html#fn-withstep","title":"fn withStep","text":"<pre><code>withStep(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Used to set step value for range queries.</p>"},{"location":"API/query/parca.html","title":"parca","text":"<p>grafonnet.query.parca</p>"},{"location":"API/query/parca.html#index","title":"Index","text":"<ul> <li><code>fn withDatasource(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withLabelSelector(value=\"{}\")</code></li> <li><code>fn withProfileTypeId(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> </ul>"},{"location":"API/query/parca.html#fields","title":"Fields","text":""},{"location":"API/query/parca.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Set the datasource for this query.</p>"},{"location":"API/query/parca.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If hide is set to true, Grafana will filter out the response(s) associated with this query before returning it to the panel.</p>"},{"location":"API/query/parca.html#fn-withlabelselector","title":"fn withLabelSelector","text":"<pre><code>withLabelSelector(value=\"{}\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"{}\"</code></li> </ul> </li> </ul> <p>Specifies the query label selectors.</p>"},{"location":"API/query/parca.html#fn-withprofiletypeid","title":"fn withProfileTypeId","text":"<pre><code>withProfileTypeId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specifies the type of profile to query.</p>"},{"location":"API/query/parca.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specify the query flavor TODO make this required and give it a default</p>"},{"location":"API/query/parca.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>A unique identifier for the query within the list of targets. In server side expressions, the refId is used as a variable name to identify results. By default, the UI will assign A-&gt;Z; however setting meaningful names may be useful.</p>"},{"location":"API/query/prometheus.html","title":"prometheus","text":"<p>grafonnet.query.prometheus</p>"},{"location":"API/query/prometheus.html#index","title":"Index","text":"<ul> <li><code>fn new(datasource, expr)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withEditorMode(value)</code></li> <li><code>fn withExemplar(value=true)</code></li> <li><code>fn withExpr(value)</code></li> <li><code>fn withFormat(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withInstant(value=true)</code></li> <li><code>fn withInterval(value)</code></li> <li><code>fn withIntervalFactor(value)</code></li> <li><code>fn withLegendFormat(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRange(value=true)</code></li> <li><code>fn withRefId(value)</code></li> </ul>"},{"location":"API/query/prometheus.html#fields","title":"Fields","text":""},{"location":"API/query/prometheus.html#fn-new","title":"fn new","text":"<pre><code>new(datasource, expr)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>datasource (<code>string</code>)</li> <li>expr (<code>string</code>)</li> </ul> <p>Creates a new prometheus query target for panels.</p>"},{"location":"API/query/prometheus.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Set the datasource for this query.</p>"},{"location":"API/query/prometheus.html#fn-witheditormode","title":"fn withEditorMode","text":"<pre><code>withEditorMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"code\"</code>, <code>\"builder\"</code></li> </ul> </li> </ul>"},{"location":"API/query/prometheus.html#fn-withexemplar","title":"fn withExemplar","text":"<pre><code>withExemplar(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Execute an additional query to identify interesting raw samples relevant for the given expr</p>"},{"location":"API/query/prometheus.html#fn-withexpr","title":"fn withExpr","text":"<pre><code>withExpr(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The actual expression/query that will be evaluated by Prometheus</p>"},{"location":"API/query/prometheus.html#fn-withformat","title":"fn withFormat","text":"<pre><code>withFormat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"time_series\"</code>, <code>\"table\"</code>, <code>\"heatmap\"</code></li> </ul> </li> </ul>"},{"location":"API/query/prometheus.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If hide is set to true, Grafana will filter out the response(s) associated with this query before returning it to the panel.</p>"},{"location":"API/query/prometheus.html#fn-withinstant","title":"fn withInstant","text":"<pre><code>withInstant(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Returns only the latest value that Prometheus has scraped for the requested time series</p>"},{"location":"API/query/prometheus.html#fn-withinterval","title":"fn withInterval","text":"<pre><code>withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An additional lower limit for the step parameter of the Prometheus query and for the <code>$__interval</code> and <code>$__rate_interval</code> variables.</p>"},{"location":"API/query/prometheus.html#fn-withintervalfactor","title":"fn withIntervalFactor","text":"<pre><code>withIntervalFactor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Set the interval factor for this query.</p>"},{"location":"API/query/prometheus.html#fn-withlegendformat","title":"fn withLegendFormat","text":"<pre><code>withLegendFormat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Set the legend format for this query.</p>"},{"location":"API/query/prometheus.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specify the query flavor TODO make this required and give it a default</p>"},{"location":"API/query/prometheus.html#fn-withrange","title":"fn withRange","text":"<pre><code>withRange(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Returns a Range vector, comprised of a set of time series containing a range of data points over time for each time series</p>"},{"location":"API/query/prometheus.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>A unique identifier for the query within the list of targets. In server side expressions, the refId is used as a variable name to identify results. By default, the UI will assign A-&gt;Z; however setting meaningful names may be useful.</p>"},{"location":"API/query/azureMonitor/index.html","title":"azureMonitor","text":"<p>grafonnet.query.azureMonitor</p>"},{"location":"API/query/azureMonitor/index.html#subpackages","title":"Subpackages","text":"<ul> <li>azureMonitor.dimensionFilters</li> <li>azureMonitor.resources</li> <li>azureTraces.filters</li> </ul>"},{"location":"API/query/azureMonitor/index.html#index","title":"Index","text":"<ul> <li><code>fn withAzureLogAnalytics(value)</code></li> <li><code>fn withAzureLogAnalyticsMixin(value)</code></li> <li><code>fn withAzureMonitor(value)</code></li> <li><code>fn withAzureMonitorMixin(value)</code></li> <li><code>fn withAzureResourceGraph(value)</code></li> <li><code>fn withAzureResourceGraphMixin(value)</code></li> <li><code>fn withAzureTraces(value)</code></li> <li><code>fn withAzureTracesMixin(value)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withGrafanaTemplateVariableFn(value)</code></li> <li><code>fn withGrafanaTemplateVariableFnMixin(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withNamespace(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withRegion(value)</code></li> <li><code>fn withResource(value)</code></li> <li><code>fn withResourceGroup(value)</code></li> <li><code>fn withSubscription(value)</code></li> <li><code>fn withSubscriptions(value)</code></li> <li><code>fn withSubscriptionsMixin(value)</code></li> <li><code>obj azureLogAnalytics</code><ul> <li><code>fn withDashboardTime(value=true)</code></li> <li><code>fn withIntersectTime(value=true)</code></li> <li><code>fn withQuery(value)</code></li> <li><code>fn withResource(value)</code></li> <li><code>fn withResources(value)</code></li> <li><code>fn withResourcesMixin(value)</code></li> <li><code>fn withResultFormat(value)</code></li> <li><code>fn withTimeColumn(value)</code></li> <li><code>fn withWorkspace(value)</code></li> </ul> </li> <li><code>obj azureMonitor</code><ul> <li><code>fn withAggregation(value)</code></li> <li><code>fn withAlias(value)</code></li> <li><code>fn withAllowedTimeGrainsMs(value)</code></li> <li><code>fn withAllowedTimeGrainsMsMixin(value)</code></li> <li><code>fn withCustomNamespace(value)</code></li> <li><code>fn withDimension(value)</code></li> <li><code>fn withDimensionFilter(value)</code></li> <li><code>fn withDimensionFilters(value)</code></li> <li><code>fn withDimensionFiltersMixin(value)</code></li> <li><code>fn withMetricDefinition(value)</code></li> <li><code>fn withMetricName(value)</code></li> <li><code>fn withMetricNamespace(value)</code></li> <li><code>fn withRegion(value)</code></li> <li><code>fn withResourceGroup(value)</code></li> <li><code>fn withResourceName(value)</code></li> <li><code>fn withResourceUri(value)</code></li> <li><code>fn withResources(value)</code></li> <li><code>fn withResourcesMixin(value)</code></li> <li><code>fn withTimeGrain(value)</code></li> <li><code>fn withTimeGrainUnit(value)</code></li> <li><code>fn withTop(value)</code></li> </ul> </li> <li><code>obj azureResourceGraph</code><ul> <li><code>fn withQuery(value)</code></li> <li><code>fn withResultFormat(value)</code></li> </ul> </li> <li><code>obj azureTraces</code><ul> <li><code>fn withFilters(value)</code></li> <li><code>fn withFiltersMixin(value)</code></li> <li><code>fn withOperationId(value)</code></li> <li><code>fn withQuery(value)</code></li> <li><code>fn withResources(value)</code></li> <li><code>fn withResourcesMixin(value)</code></li> <li><code>fn withResultFormat(value)</code></li> <li><code>fn withTraceTypes(value)</code></li> <li><code>fn withTraceTypesMixin(value)</code></li> </ul> </li> <li><code>obj grafanaTemplateVariableFn</code><ul> <li><code>fn withAppInsightsGroupByQuery(value)</code></li> <li><code>fn withAppInsightsGroupByQueryMixin(value)</code></li> <li><code>fn withAppInsightsMetricNameQuery(value)</code></li> <li><code>fn withAppInsightsMetricNameQueryMixin(value)</code></li> <li><code>fn withMetricDefinitionsQuery(value)</code></li> <li><code>fn withMetricDefinitionsQueryMixin(value)</code></li> <li><code>fn withMetricNamesQuery(value)</code></li> <li><code>fn withMetricNamesQueryMixin(value)</code></li> <li><code>fn withMetricNamespaceQuery(value)</code></li> <li><code>fn withMetricNamespaceQueryMixin(value)</code></li> <li><code>fn withResourceGroupsQuery(value)</code></li> <li><code>fn withResourceGroupsQueryMixin(value)</code></li> <li><code>fn withResourceNamesQuery(value)</code></li> <li><code>fn withResourceNamesQueryMixin(value)</code></li> <li><code>fn withSubscriptionsQuery(value)</code></li> <li><code>fn withSubscriptionsQueryMixin(value)</code></li> <li><code>fn withUnknownQuery(value)</code></li> <li><code>fn withUnknownQueryMixin(value)</code></li> <li><code>fn withWorkspacesQuery(value)</code></li> <li><code>fn withWorkspacesQueryMixin(value)</code></li> <li><code>obj AppInsightsGroupByQuery</code><ul> <li><code>fn withKind()</code></li> <li><code>fn withMetricName(value)</code></li> <li><code>fn withRawQuery(value)</code></li> </ul> </li> <li><code>obj AppInsightsMetricNameQuery</code><ul> <li><code>fn withKind()</code></li> <li><code>fn withRawQuery(value)</code></li> </ul> </li> <li><code>obj MetricDefinitionsQuery</code><ul> <li><code>fn withKind()</code></li> <li><code>fn withMetricNamespace(value)</code></li> <li><code>fn withRawQuery(value)</code></li> <li><code>fn withResourceGroup(value)</code></li> <li><code>fn withResourceName(value)</code></li> <li><code>fn withSubscription(value)</code></li> </ul> </li> <li><code>obj MetricNamesQuery</code><ul> <li><code>fn withKind()</code></li> <li><code>fn withMetricNamespace(value)</code></li> <li><code>fn withRawQuery(value)</code></li> <li><code>fn withResourceGroup(value)</code></li> <li><code>fn withResourceName(value)</code></li> <li><code>fn withSubscription(value)</code></li> </ul> </li> <li><code>obj MetricNamespaceQuery</code><ul> <li><code>fn withKind()</code></li> <li><code>fn withMetricNamespace(value)</code></li> <li><code>fn withRawQuery(value)</code></li> <li><code>fn withResourceGroup(value)</code></li> <li><code>fn withResourceName(value)</code></li> <li><code>fn withSubscription(value)</code></li> </ul> </li> <li><code>obj ResourceGroupsQuery</code><ul> <li><code>fn withKind()</code></li> <li><code>fn withRawQuery(value)</code></li> <li><code>fn withSubscription(value)</code></li> </ul> </li> <li><code>obj ResourceNamesQuery</code><ul> <li><code>fn withKind()</code></li> <li><code>fn withMetricNamespace(value)</code></li> <li><code>fn withRawQuery(value)</code></li> <li><code>fn withResourceGroup(value)</code></li> <li><code>fn withSubscription(value)</code></li> </ul> </li> <li><code>obj SubscriptionsQuery</code><ul> <li><code>fn withKind()</code></li> <li><code>fn withRawQuery(value)</code></li> </ul> </li> <li><code>obj UnknownQuery</code><ul> <li><code>fn withKind()</code></li> <li><code>fn withRawQuery(value)</code></li> </ul> </li> <li><code>obj WorkspacesQuery</code><ul> <li><code>fn withKind()</code></li> <li><code>fn withRawQuery(value)</code></li> <li><code>fn withSubscription(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/query/azureMonitor/index.html#fields","title":"Fields","text":""},{"location":"API/query/azureMonitor/index.html#fn-withazureloganalytics","title":"fn withAzureLogAnalytics","text":"<pre><code>withAzureLogAnalytics(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Azure Monitor Logs sub-query properties</p>"},{"location":"API/query/azureMonitor/index.html#fn-withazureloganalyticsmixin","title":"fn withAzureLogAnalyticsMixin","text":"<pre><code>withAzureLogAnalyticsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Azure Monitor Logs sub-query properties</p>"},{"location":"API/query/azureMonitor/index.html#fn-withazuremonitor","title":"fn withAzureMonitor","text":"<pre><code>withAzureMonitor(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-withazuremonitormixin","title":"fn withAzureMonitorMixin","text":"<pre><code>withAzureMonitorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-withazureresourcegraph","title":"fn withAzureResourceGraph","text":"<pre><code>withAzureResourceGraph(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-withazureresourcegraphmixin","title":"fn withAzureResourceGraphMixin","text":"<pre><code>withAzureResourceGraphMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-withazuretraces","title":"fn withAzureTraces","text":"<pre><code>withAzureTraces(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Application Insights Traces sub-query properties</p>"},{"location":"API/query/azureMonitor/index.html#fn-withazuretracesmixin","title":"fn withAzureTracesMixin","text":"<pre><code>withAzureTracesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Application Insights Traces sub-query properties</p>"},{"location":"API/query/azureMonitor/index.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Set the datasource for this query.</p>"},{"location":"API/query/azureMonitor/index.html#fn-withgrafanatemplatevariablefn","title":"fn withGrafanaTemplateVariableFn","text":"<pre><code>withGrafanaTemplateVariableFn(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-withgrafanatemplatevariablefnmixin","title":"fn withGrafanaTemplateVariableFnMixin","text":"<pre><code>withGrafanaTemplateVariableFnMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If hide is set to true, Grafana will filter out the response(s) associated with this query before returning it to the panel.</p>"},{"location":"API/query/azureMonitor/index.html#fn-withnamespace","title":"fn withNamespace","text":"<pre><code>withNamespace(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specify the query flavor TODO make this required and give it a default</p>"},{"location":"API/query/azureMonitor/index.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>A unique identifier for the query within the list of targets. In server side expressions, the refId is used as a variable name to identify results. By default, the UI will assign A-&gt;Z; however setting meaningful names may be useful.</p>"},{"location":"API/query/azureMonitor/index.html#fn-withregion","title":"fn withRegion","text":"<pre><code>withRegion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Azure Monitor query type. queryType: #AzureQueryType</p>"},{"location":"API/query/azureMonitor/index.html#fn-withresource","title":"fn withResource","text":"<pre><code>withResource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-withresourcegroup","title":"fn withResourceGroup","text":"<pre><code>withResourceGroup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Template variables params. These exist for backwards compatiblity with legacy template variables.</p>"},{"location":"API/query/azureMonitor/index.html#fn-withsubscription","title":"fn withSubscription","text":"<pre><code>withSubscription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Azure subscription containing the resource(s) to be queried.</p>"},{"location":"API/query/azureMonitor/index.html#fn-withsubscriptions","title":"fn withSubscriptions","text":"<pre><code>withSubscriptions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Subscriptions to be queried via Azure Resource Graph.</p>"},{"location":"API/query/azureMonitor/index.html#fn-withsubscriptionsmixin","title":"fn withSubscriptionsMixin","text":"<pre><code>withSubscriptionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Subscriptions to be queried via Azure Resource Graph.</p>"},{"location":"API/query/azureMonitor/index.html#obj-azureloganalytics","title":"obj azureLogAnalytics","text":""},{"location":"API/query/azureMonitor/index.html#fn-azureloganalyticswithdashboardtime","title":"fn azureLogAnalytics.withDashboardTime","text":"<pre><code>azureLogAnalytics.withDashboardTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If set to true the dashboard time range will be used as a filter for the query. Otherwise the query time ranges will be used. Defaults to false.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azureloganalyticswithintersecttime","title":"fn azureLogAnalytics.withIntersectTime","text":"<pre><code>azureLogAnalytics.withIntersectTime(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>@deprecated Use dashboardTime instead</p>"},{"location":"API/query/azureMonitor/index.html#fn-azureloganalyticswithquery","title":"fn azureLogAnalytics.withQuery","text":"<pre><code>azureLogAnalytics.withQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>KQL query to be executed.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azureloganalyticswithresource","title":"fn azureLogAnalytics.withResource","text":"<pre><code>azureLogAnalytics.withResource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>@deprecated Use resources instead</p>"},{"location":"API/query/azureMonitor/index.html#fn-azureloganalyticswithresources","title":"fn azureLogAnalytics.withResources","text":"<pre><code>azureLogAnalytics.withResources(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Array of resource URIs to be queried.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azureloganalyticswithresourcesmixin","title":"fn azureLogAnalytics.withResourcesMixin","text":"<pre><code>azureLogAnalytics.withResourcesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Array of resource URIs to be queried.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azureloganalyticswithresultformat","title":"fn azureLogAnalytics.withResultFormat","text":"<pre><code>azureLogAnalytics.withResultFormat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"table\"</code>, <code>\"time_series\"</code>, <code>\"trace\"</code>, <code>\"logs\"</code></li> </ul> </li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-azureloganalyticswithtimecolumn","title":"fn azureLogAnalytics.withTimeColumn","text":"<pre><code>azureLogAnalytics.withTimeColumn(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>If dashboardTime is set to true this value dictates which column the time filter will be applied to. Defaults to the first tables timeSpan column, the first datetime column found, or TimeGenerated</p>"},{"location":"API/query/azureMonitor/index.html#fn-azureloganalyticswithworkspace","title":"fn azureLogAnalytics.withWorkspace","text":"<pre><code>azureLogAnalytics.withWorkspace(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Workspace ID. This was removed in Grafana 8, but remains for backwards compat.</p>"},{"location":"API/query/azureMonitor/index.html#obj-azuremonitor","title":"obj azureMonitor","text":""},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithaggregation","title":"fn azureMonitor.withAggregation","text":"<pre><code>azureMonitor.withAggregation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The aggregation to be used within the query. Defaults to the primaryAggregationType defined by the metric.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithalias","title":"fn azureMonitor.withAlias","text":"<pre><code>azureMonitor.withAlias(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Aliases can be set to modify the legend labels. e.g. {{ resourceGroup }}. See docs for more detail.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithallowedtimegrainsms","title":"fn azureMonitor.withAllowedTimeGrainsMs","text":"<pre><code>azureMonitor.withAllowedTimeGrainsMs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Time grains that are supported by the metric.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithallowedtimegrainsmsmixin","title":"fn azureMonitor.withAllowedTimeGrainsMsMixin","text":"<pre><code>azureMonitor.withAllowedTimeGrainsMsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Time grains that are supported by the metric.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithcustomnamespace","title":"fn azureMonitor.withCustomNamespace","text":"<pre><code>azureMonitor.withCustomNamespace(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Used as the value for the metricNamespace property when it's different from the resource namespace.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithdimension","title":"fn azureMonitor.withDimension","text":"<pre><code>azureMonitor.withDimension(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>@deprecated This property was migrated to dimensionFilters and should only be accessed in the migration</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithdimensionfilter","title":"fn azureMonitor.withDimensionFilter","text":"<pre><code>azureMonitor.withDimensionFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>@deprecated This property was migrated to dimensionFilters and should only be accessed in the migration</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithdimensionfilters","title":"fn azureMonitor.withDimensionFilters","text":"<pre><code>azureMonitor.withDimensionFilters(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Filters to reduce the set of data returned. Dimensions that can be filtered on are defined by the metric.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithdimensionfiltersmixin","title":"fn azureMonitor.withDimensionFiltersMixin","text":"<pre><code>azureMonitor.withDimensionFiltersMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Filters to reduce the set of data returned. Dimensions that can be filtered on are defined by the metric.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithmetricdefinition","title":"fn azureMonitor.withMetricDefinition","text":"<pre><code>azureMonitor.withMetricDefinition(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>@deprecated Use metricNamespace instead</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithmetricname","title":"fn azureMonitor.withMetricName","text":"<pre><code>azureMonitor.withMetricName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The metric to query data for within the specified metricNamespace. e.g. UsedCapacity</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithmetricnamespace","title":"fn azureMonitor.withMetricNamespace","text":"<pre><code>azureMonitor.withMetricNamespace(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>metricNamespace is used as the resource type (or resource namespace). It's usually equal to the target metric namespace. e.g. microsoft.storage/storageaccounts Kept the name of the variable as metricNamespace to avoid backward incompatibility issues.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithregion","title":"fn azureMonitor.withRegion","text":"<pre><code>azureMonitor.withRegion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The Azure region containing the resource(s).</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithresourcegroup","title":"fn azureMonitor.withResourceGroup","text":"<pre><code>azureMonitor.withResourceGroup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>@deprecated Use resources instead</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithresourcename","title":"fn azureMonitor.withResourceName","text":"<pre><code>azureMonitor.withResourceName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>@deprecated Use resources instead</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithresourceuri","title":"fn azureMonitor.withResourceUri","text":"<pre><code>azureMonitor.withResourceUri(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>@deprecated Use resourceGroup, resourceName and metricNamespace instead</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithresources","title":"fn azureMonitor.withResources","text":"<pre><code>azureMonitor.withResources(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Array of resource URIs to be queried.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithresourcesmixin","title":"fn azureMonitor.withResourcesMixin","text":"<pre><code>azureMonitor.withResourcesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Array of resource URIs to be queried.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithtimegrain","title":"fn azureMonitor.withTimeGrain","text":"<pre><code>azureMonitor.withTimeGrain(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The granularity of data points to be queried. Defaults to auto.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithtimegrainunit","title":"fn azureMonitor.withTimeGrainUnit","text":"<pre><code>azureMonitor.withTimeGrainUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>@deprecated</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuremonitorwithtop","title":"fn azureMonitor.withTop","text":"<pre><code>azureMonitor.withTop(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Maximum number of records to return. Defaults to 10.</p>"},{"location":"API/query/azureMonitor/index.html#obj-azureresourcegraph","title":"obj azureResourceGraph","text":""},{"location":"API/query/azureMonitor/index.html#fn-azureresourcegraphwithquery","title":"fn azureResourceGraph.withQuery","text":"<pre><code>azureResourceGraph.withQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Azure Resource Graph KQL query to be executed.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azureresourcegraphwithresultformat","title":"fn azureResourceGraph.withResultFormat","text":"<pre><code>azureResourceGraph.withResultFormat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specifies the format results should be returned as. Defaults to table.</p>"},{"location":"API/query/azureMonitor/index.html#obj-azuretraces","title":"obj azureTraces","text":""},{"location":"API/query/azureMonitor/index.html#fn-azuretraceswithfilters","title":"fn azureTraces.withFilters","text":"<pre><code>azureTraces.withFilters(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Filters for property values.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuretraceswithfiltersmixin","title":"fn azureTraces.withFiltersMixin","text":"<pre><code>azureTraces.withFiltersMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Filters for property values.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuretraceswithoperationid","title":"fn azureTraces.withOperationId","text":"<pre><code>azureTraces.withOperationId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Operation ID. Used only for Traces queries.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuretraceswithquery","title":"fn azureTraces.withQuery","text":"<pre><code>azureTraces.withQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>KQL query to be executed.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuretraceswithresources","title":"fn azureTraces.withResources","text":"<pre><code>azureTraces.withResources(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Array of resource URIs to be queried.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuretraceswithresourcesmixin","title":"fn azureTraces.withResourcesMixin","text":"<pre><code>azureTraces.withResourcesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Array of resource URIs to be queried.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuretraceswithresultformat","title":"fn azureTraces.withResultFormat","text":"<pre><code>azureTraces.withResultFormat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"table\"</code>, <code>\"time_series\"</code>, <code>\"trace\"</code>, <code>\"logs\"</code></li> </ul> </li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-azuretraceswithtracetypes","title":"fn azureTraces.withTraceTypes","text":"<pre><code>azureTraces.withTraceTypes(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Types of events to filter by.</p>"},{"location":"API/query/azureMonitor/index.html#fn-azuretraceswithtracetypesmixin","title":"fn azureTraces.withTraceTypesMixin","text":"<pre><code>azureTraces.withTraceTypesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Types of events to filter by.</p>"},{"location":"API/query/azureMonitor/index.html#obj-grafanatemplatevariablefn","title":"obj grafanaTemplateVariableFn","text":""},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithappinsightsgroupbyquery","title":"fn grafanaTemplateVariableFn.withAppInsightsGroupByQuery","text":"<pre><code>grafanaTemplateVariableFn.withAppInsightsGroupByQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithappinsightsgroupbyquerymixin","title":"fn grafanaTemplateVariableFn.withAppInsightsGroupByQueryMixin","text":"<pre><code>grafanaTemplateVariableFn.withAppInsightsGroupByQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithappinsightsmetricnamequery","title":"fn grafanaTemplateVariableFn.withAppInsightsMetricNameQuery","text":"<pre><code>grafanaTemplateVariableFn.withAppInsightsMetricNameQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithappinsightsmetricnamequerymixin","title":"fn grafanaTemplateVariableFn.withAppInsightsMetricNameQueryMixin","text":"<pre><code>grafanaTemplateVariableFn.withAppInsightsMetricNameQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithmetricdefinitionsquery","title":"fn grafanaTemplateVariableFn.withMetricDefinitionsQuery","text":"<pre><code>grafanaTemplateVariableFn.withMetricDefinitionsQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>@deprecated Use MetricNamespaceQuery instead</p>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithmetricdefinitionsquerymixin","title":"fn grafanaTemplateVariableFn.withMetricDefinitionsQueryMixin","text":"<pre><code>grafanaTemplateVariableFn.withMetricDefinitionsQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>@deprecated Use MetricNamespaceQuery instead</p>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithmetricnamesquery","title":"fn grafanaTemplateVariableFn.withMetricNamesQuery","text":"<pre><code>grafanaTemplateVariableFn.withMetricNamesQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithmetricnamesquerymixin","title":"fn grafanaTemplateVariableFn.withMetricNamesQueryMixin","text":"<pre><code>grafanaTemplateVariableFn.withMetricNamesQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithmetricnamespacequery","title":"fn grafanaTemplateVariableFn.withMetricNamespaceQuery","text":"<pre><code>grafanaTemplateVariableFn.withMetricNamespaceQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithmetricnamespacequerymixin","title":"fn grafanaTemplateVariableFn.withMetricNamespaceQueryMixin","text":"<pre><code>grafanaTemplateVariableFn.withMetricNamespaceQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithresourcegroupsquery","title":"fn grafanaTemplateVariableFn.withResourceGroupsQuery","text":"<pre><code>grafanaTemplateVariableFn.withResourceGroupsQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithresourcegroupsquerymixin","title":"fn grafanaTemplateVariableFn.withResourceGroupsQueryMixin","text":"<pre><code>grafanaTemplateVariableFn.withResourceGroupsQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithresourcenamesquery","title":"fn grafanaTemplateVariableFn.withResourceNamesQuery","text":"<pre><code>grafanaTemplateVariableFn.withResourceNamesQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithresourcenamesquerymixin","title":"fn grafanaTemplateVariableFn.withResourceNamesQueryMixin","text":"<pre><code>grafanaTemplateVariableFn.withResourceNamesQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithsubscriptionsquery","title":"fn grafanaTemplateVariableFn.withSubscriptionsQuery","text":"<pre><code>grafanaTemplateVariableFn.withSubscriptionsQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithsubscriptionsquerymixin","title":"fn grafanaTemplateVariableFn.withSubscriptionsQueryMixin","text":"<pre><code>grafanaTemplateVariableFn.withSubscriptionsQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithunknownquery","title":"fn grafanaTemplateVariableFn.withUnknownQuery","text":"<pre><code>grafanaTemplateVariableFn.withUnknownQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithunknownquerymixin","title":"fn grafanaTemplateVariableFn.withUnknownQueryMixin","text":"<pre><code>grafanaTemplateVariableFn.withUnknownQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithworkspacesquery","title":"fn grafanaTemplateVariableFn.withWorkspacesQuery","text":"<pre><code>grafanaTemplateVariableFn.withWorkspacesQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnwithworkspacesquerymixin","title":"fn grafanaTemplateVariableFn.withWorkspacesQueryMixin","text":"<pre><code>grafanaTemplateVariableFn.withWorkspacesQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#obj-grafanatemplatevariablefnappinsightsgroupbyquery","title":"obj grafanaTemplateVariableFn.AppInsightsGroupByQuery","text":""},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnappinsightsgroupbyquerywithkind","title":"fn grafanaTemplateVariableFn.AppInsightsGroupByQuery.withKind","text":"<pre><code>grafanaTemplateVariableFn.AppInsightsGroupByQuery.withKind()\n</code></pre>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnappinsightsgroupbyquerywithmetricname","title":"fn grafanaTemplateVariableFn.AppInsightsGroupByQuery.withMetricName","text":"<pre><code>grafanaTemplateVariableFn.AppInsightsGroupByQuery.withMetricName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnappinsightsgroupbyquerywithrawquery","title":"fn grafanaTemplateVariableFn.AppInsightsGroupByQuery.withRawQuery","text":"<pre><code>grafanaTemplateVariableFn.AppInsightsGroupByQuery.withRawQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#obj-grafanatemplatevariablefnappinsightsmetricnamequery","title":"obj grafanaTemplateVariableFn.AppInsightsMetricNameQuery","text":""},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnappinsightsmetricnamequerywithkind","title":"fn grafanaTemplateVariableFn.AppInsightsMetricNameQuery.withKind","text":"<pre><code>grafanaTemplateVariableFn.AppInsightsMetricNameQuery.withKind()\n</code></pre>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnappinsightsmetricnamequerywithrawquery","title":"fn grafanaTemplateVariableFn.AppInsightsMetricNameQuery.withRawQuery","text":"<pre><code>grafanaTemplateVariableFn.AppInsightsMetricNameQuery.withRawQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#obj-grafanatemplatevariablefnmetricdefinitionsquery","title":"obj grafanaTemplateVariableFn.MetricDefinitionsQuery","text":""},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricdefinitionsquerywithkind","title":"fn grafanaTemplateVariableFn.MetricDefinitionsQuery.withKind","text":"<pre><code>grafanaTemplateVariableFn.MetricDefinitionsQuery.withKind()\n</code></pre>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricdefinitionsquerywithmetricnamespace","title":"fn grafanaTemplateVariableFn.MetricDefinitionsQuery.withMetricNamespace","text":"<pre><code>grafanaTemplateVariableFn.MetricDefinitionsQuery.withMetricNamespace(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricdefinitionsquerywithrawquery","title":"fn grafanaTemplateVariableFn.MetricDefinitionsQuery.withRawQuery","text":"<pre><code>grafanaTemplateVariableFn.MetricDefinitionsQuery.withRawQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricdefinitionsquerywithresourcegroup","title":"fn grafanaTemplateVariableFn.MetricDefinitionsQuery.withResourceGroup","text":"<pre><code>grafanaTemplateVariableFn.MetricDefinitionsQuery.withResourceGroup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricdefinitionsquerywithresourcename","title":"fn grafanaTemplateVariableFn.MetricDefinitionsQuery.withResourceName","text":"<pre><code>grafanaTemplateVariableFn.MetricDefinitionsQuery.withResourceName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricdefinitionsquerywithsubscription","title":"fn grafanaTemplateVariableFn.MetricDefinitionsQuery.withSubscription","text":"<pre><code>grafanaTemplateVariableFn.MetricDefinitionsQuery.withSubscription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#obj-grafanatemplatevariablefnmetricnamesquery","title":"obj grafanaTemplateVariableFn.MetricNamesQuery","text":""},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricnamesquerywithkind","title":"fn grafanaTemplateVariableFn.MetricNamesQuery.withKind","text":"<pre><code>grafanaTemplateVariableFn.MetricNamesQuery.withKind()\n</code></pre>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricnamesquerywithmetricnamespace","title":"fn grafanaTemplateVariableFn.MetricNamesQuery.withMetricNamespace","text":"<pre><code>grafanaTemplateVariableFn.MetricNamesQuery.withMetricNamespace(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricnamesquerywithrawquery","title":"fn grafanaTemplateVariableFn.MetricNamesQuery.withRawQuery","text":"<pre><code>grafanaTemplateVariableFn.MetricNamesQuery.withRawQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricnamesquerywithresourcegroup","title":"fn grafanaTemplateVariableFn.MetricNamesQuery.withResourceGroup","text":"<pre><code>grafanaTemplateVariableFn.MetricNamesQuery.withResourceGroup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricnamesquerywithresourcename","title":"fn grafanaTemplateVariableFn.MetricNamesQuery.withResourceName","text":"<pre><code>grafanaTemplateVariableFn.MetricNamesQuery.withResourceName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricnamesquerywithsubscription","title":"fn grafanaTemplateVariableFn.MetricNamesQuery.withSubscription","text":"<pre><code>grafanaTemplateVariableFn.MetricNamesQuery.withSubscription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#obj-grafanatemplatevariablefnmetricnamespacequery","title":"obj grafanaTemplateVariableFn.MetricNamespaceQuery","text":""},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricnamespacequerywithkind","title":"fn grafanaTemplateVariableFn.MetricNamespaceQuery.withKind","text":"<pre><code>grafanaTemplateVariableFn.MetricNamespaceQuery.withKind()\n</code></pre>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricnamespacequerywithmetricnamespace","title":"fn grafanaTemplateVariableFn.MetricNamespaceQuery.withMetricNamespace","text":"<pre><code>grafanaTemplateVariableFn.MetricNamespaceQuery.withMetricNamespace(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricnamespacequerywithrawquery","title":"fn grafanaTemplateVariableFn.MetricNamespaceQuery.withRawQuery","text":"<pre><code>grafanaTemplateVariableFn.MetricNamespaceQuery.withRawQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricnamespacequerywithresourcegroup","title":"fn grafanaTemplateVariableFn.MetricNamespaceQuery.withResourceGroup","text":"<pre><code>grafanaTemplateVariableFn.MetricNamespaceQuery.withResourceGroup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricnamespacequerywithresourcename","title":"fn grafanaTemplateVariableFn.MetricNamespaceQuery.withResourceName","text":"<pre><code>grafanaTemplateVariableFn.MetricNamespaceQuery.withResourceName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnmetricnamespacequerywithsubscription","title":"fn grafanaTemplateVariableFn.MetricNamespaceQuery.withSubscription","text":"<pre><code>grafanaTemplateVariableFn.MetricNamespaceQuery.withSubscription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#obj-grafanatemplatevariablefnresourcegroupsquery","title":"obj grafanaTemplateVariableFn.ResourceGroupsQuery","text":""},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnresourcegroupsquerywithkind","title":"fn grafanaTemplateVariableFn.ResourceGroupsQuery.withKind","text":"<pre><code>grafanaTemplateVariableFn.ResourceGroupsQuery.withKind()\n</code></pre>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnresourcegroupsquerywithrawquery","title":"fn grafanaTemplateVariableFn.ResourceGroupsQuery.withRawQuery","text":"<pre><code>grafanaTemplateVariableFn.ResourceGroupsQuery.withRawQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnresourcegroupsquerywithsubscription","title":"fn grafanaTemplateVariableFn.ResourceGroupsQuery.withSubscription","text":"<pre><code>grafanaTemplateVariableFn.ResourceGroupsQuery.withSubscription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#obj-grafanatemplatevariablefnresourcenamesquery","title":"obj grafanaTemplateVariableFn.ResourceNamesQuery","text":""},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnresourcenamesquerywithkind","title":"fn grafanaTemplateVariableFn.ResourceNamesQuery.withKind","text":"<pre><code>grafanaTemplateVariableFn.ResourceNamesQuery.withKind()\n</code></pre>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnresourcenamesquerywithmetricnamespace","title":"fn grafanaTemplateVariableFn.ResourceNamesQuery.withMetricNamespace","text":"<pre><code>grafanaTemplateVariableFn.ResourceNamesQuery.withMetricNamespace(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnresourcenamesquerywithrawquery","title":"fn grafanaTemplateVariableFn.ResourceNamesQuery.withRawQuery","text":"<pre><code>grafanaTemplateVariableFn.ResourceNamesQuery.withRawQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnresourcenamesquerywithresourcegroup","title":"fn grafanaTemplateVariableFn.ResourceNamesQuery.withResourceGroup","text":"<pre><code>grafanaTemplateVariableFn.ResourceNamesQuery.withResourceGroup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnresourcenamesquerywithsubscription","title":"fn grafanaTemplateVariableFn.ResourceNamesQuery.withSubscription","text":"<pre><code>grafanaTemplateVariableFn.ResourceNamesQuery.withSubscription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#obj-grafanatemplatevariablefnsubscriptionsquery","title":"obj grafanaTemplateVariableFn.SubscriptionsQuery","text":""},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnsubscriptionsquerywithkind","title":"fn grafanaTemplateVariableFn.SubscriptionsQuery.withKind","text":"<pre><code>grafanaTemplateVariableFn.SubscriptionsQuery.withKind()\n</code></pre>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnsubscriptionsquerywithrawquery","title":"fn grafanaTemplateVariableFn.SubscriptionsQuery.withRawQuery","text":"<pre><code>grafanaTemplateVariableFn.SubscriptionsQuery.withRawQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#obj-grafanatemplatevariablefnunknownquery","title":"obj grafanaTemplateVariableFn.UnknownQuery","text":""},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnunknownquerywithkind","title":"fn grafanaTemplateVariableFn.UnknownQuery.withKind","text":"<pre><code>grafanaTemplateVariableFn.UnknownQuery.withKind()\n</code></pre>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnunknownquerywithrawquery","title":"fn grafanaTemplateVariableFn.UnknownQuery.withRawQuery","text":"<pre><code>grafanaTemplateVariableFn.UnknownQuery.withRawQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#obj-grafanatemplatevariablefnworkspacesquery","title":"obj grafanaTemplateVariableFn.WorkspacesQuery","text":""},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnworkspacesquerywithkind","title":"fn grafanaTemplateVariableFn.WorkspacesQuery.withKind","text":"<pre><code>grafanaTemplateVariableFn.WorkspacesQuery.withKind()\n</code></pre>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnworkspacesquerywithrawquery","title":"fn grafanaTemplateVariableFn.WorkspacesQuery.withRawQuery","text":"<pre><code>grafanaTemplateVariableFn.WorkspacesQuery.withRawQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/index.html#fn-grafanatemplatevariablefnworkspacesquerywithsubscription","title":"fn grafanaTemplateVariableFn.WorkspacesQuery.withSubscription","text":"<pre><code>grafanaTemplateVariableFn.WorkspacesQuery.withSubscription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/azureMonitor/dimensionFilters.html","title":"dimensionFilters","text":""},{"location":"API/query/azureMonitor/azureMonitor/dimensionFilters.html#index","title":"Index","text":"<ul> <li><code>fn withDimension(value)</code></li> <li><code>fn withFilter(value)</code></li> <li><code>fn withFilters(value)</code></li> <li><code>fn withFiltersMixin(value)</code></li> <li><code>fn withOperator(value)</code></li> </ul>"},{"location":"API/query/azureMonitor/azureMonitor/dimensionFilters.html#fields","title":"Fields","text":""},{"location":"API/query/azureMonitor/azureMonitor/dimensionFilters.html#fn-withdimension","title":"fn withDimension","text":"<pre><code>withDimension(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of Dimension to be filtered on.</p>"},{"location":"API/query/azureMonitor/azureMonitor/dimensionFilters.html#fn-withfilter","title":"fn withFilter","text":"<pre><code>withFilter(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>@deprecated filter is deprecated in favour of filters to support multiselect.</p>"},{"location":"API/query/azureMonitor/azureMonitor/dimensionFilters.html#fn-withfilters","title":"fn withFilters","text":"<pre><code>withFilters(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Values to match with the filter.</p>"},{"location":"API/query/azureMonitor/azureMonitor/dimensionFilters.html#fn-withfiltersmixin","title":"fn withFiltersMixin","text":"<pre><code>withFiltersMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Values to match with the filter.</p>"},{"location":"API/query/azureMonitor/azureMonitor/dimensionFilters.html#fn-withoperator","title":"fn withOperator","text":"<pre><code>withOperator(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>String denoting the filter operation. Supports 'eq' - equals,'ne' - not equals, 'sw' - starts with. Note that some dimensions may not support all operators.</p>"},{"location":"API/query/azureMonitor/azureMonitor/resources.html","title":"resources","text":""},{"location":"API/query/azureMonitor/azureMonitor/resources.html#index","title":"Index","text":"<ul> <li><code>fn withMetricNamespace(value)</code></li> <li><code>fn withRegion(value)</code></li> <li><code>fn withResourceGroup(value)</code></li> <li><code>fn withResourceName(value)</code></li> <li><code>fn withSubscription(value)</code></li> </ul>"},{"location":"API/query/azureMonitor/azureMonitor/resources.html#fields","title":"Fields","text":""},{"location":"API/query/azureMonitor/azureMonitor/resources.html#fn-withmetricnamespace","title":"fn withMetricNamespace","text":"<pre><code>withMetricNamespace(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/azureMonitor/resources.html#fn-withregion","title":"fn withRegion","text":"<pre><code>withRegion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/azureMonitor/resources.html#fn-withresourcegroup","title":"fn withResourceGroup","text":"<pre><code>withResourceGroup(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/azureMonitor/resources.html#fn-withresourcename","title":"fn withResourceName","text":"<pre><code>withResourceName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/azureMonitor/resources.html#fn-withsubscription","title":"fn withSubscription","text":"<pre><code>withSubscription(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/azureMonitor/azureTraces/filters.html","title":"filters","text":""},{"location":"API/query/azureMonitor/azureTraces/filters.html#index","title":"Index","text":"<ul> <li><code>fn withFilters(value)</code></li> <li><code>fn withFiltersMixin(value)</code></li> <li><code>fn withOperation(value)</code></li> <li><code>fn withProperty(value)</code></li> </ul>"},{"location":"API/query/azureMonitor/azureTraces/filters.html#fields","title":"Fields","text":""},{"location":"API/query/azureMonitor/azureTraces/filters.html#fn-withfilters","title":"fn withFilters","text":"<pre><code>withFilters(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Values to filter by.</p>"},{"location":"API/query/azureMonitor/azureTraces/filters.html#fn-withfiltersmixin","title":"fn withFiltersMixin","text":"<pre><code>withFiltersMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Values to filter by.</p>"},{"location":"API/query/azureMonitor/azureTraces/filters.html#fn-withoperation","title":"fn withOperation","text":"<pre><code>withOperation(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Comparison operator to use. Either equals or not equals.</p>"},{"location":"API/query/azureMonitor/azureTraces/filters.html#fn-withproperty","title":"fn withProperty","text":"<pre><code>withProperty(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Property name, auto-populated based on available traces.</p>"},{"location":"API/query/cloudWatch/index.html","title":"cloudWatch","text":"<p>grafonnet.query.cloudWatch</p>"},{"location":"API/query/cloudWatch/index.html#subpackages","title":"Subpackages","text":"<ul> <li>CloudWatchLogsQuery.logGroups</li> <li>CloudWatchMetricsQuery.sql.from.QueryEditorFunctionExpression.parameters</li> <li>CloudWatchMetricsQuery.sql.orderBy.parameters</li> <li>CloudWatchMetricsQuery.sql.select.parameters</li> </ul>"},{"location":"API/query/cloudWatch/index.html#index","title":"Index","text":"<ul> <li><code>obj CloudWatchAnnotationQuery</code><ul> <li><code>fn withAccountId(value)</code></li> <li><code>fn withActionPrefix(value)</code></li> <li><code>fn withAlarmNamePrefix(value)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withDimensions(value)</code></li> <li><code>fn withDimensionsMixin(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withMatchExact(value=true)</code></li> <li><code>fn withMetricName(value)</code></li> <li><code>fn withNamespace(value)</code></li> <li><code>fn withPeriod(value)</code></li> <li><code>fn withPrefixMatching(value=true)</code></li> <li><code>fn withQueryMode(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withRegion(value)</code></li> <li><code>fn withStatistic(value)</code></li> <li><code>fn withStatistics(value)</code></li> <li><code>fn withStatisticsMixin(value)</code></li> </ul> </li> <li><code>obj CloudWatchLogsQuery</code><ul> <li><code>fn withDatasource(value)</code></li> <li><code>fn withExpression(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withLogGroupNames(value)</code></li> <li><code>fn withLogGroupNamesMixin(value)</code></li> <li><code>fn withLogGroups(value)</code></li> <li><code>fn withLogGroupsMixin(value)</code></li> <li><code>fn withQueryMode(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withRegion(value)</code></li> <li><code>fn withStatsGroups(value)</code></li> <li><code>fn withStatsGroupsMixin(value)</code></li> </ul> </li> <li><code>obj CloudWatchMetricsQuery</code><ul> <li><code>fn withAccountId(value)</code></li> <li><code>fn withAlias(value)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withDimensions(value)</code></li> <li><code>fn withDimensionsMixin(value)</code></li> <li><code>fn withExpression(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withLabel(value)</code></li> <li><code>fn withMatchExact(value=true)</code></li> <li><code>fn withMetricEditorMode(value)</code></li> <li><code>fn withMetricName(value)</code></li> <li><code>fn withMetricQueryType(value)</code></li> <li><code>fn withNamespace(value)</code></li> <li><code>fn withPeriod(value)</code></li> <li><code>fn withQueryMode(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withRegion(value)</code></li> <li><code>fn withSql(value)</code></li> <li><code>fn withSqlExpression(value)</code></li> <li><code>fn withSqlMixin(value)</code></li> <li><code>fn withStatistic(value)</code></li> <li><code>fn withStatistics(value)</code></li> <li><code>fn withStatisticsMixin(value)</code></li> <li><code>obj sql</code><ul> <li><code>fn withFrom(value)</code></li> <li><code>fn withFromMixin(value)</code></li> <li><code>fn withGroupBy(value)</code></li> <li><code>fn withGroupByMixin(value)</code></li> <li><code>fn withLimit(value)</code></li> <li><code>fn withOrderBy(value)</code></li> <li><code>fn withOrderByDirection(value)</code></li> <li><code>fn withOrderByMixin(value)</code></li> <li><code>fn withSelect(value)</code></li> <li><code>fn withSelectMixin(value)</code></li> <li><code>fn withWhere(value)</code></li> <li><code>fn withWhereMixin(value)</code></li> <li><code>obj from</code><ul> <li><code>fn withQueryEditorFunctionExpression(value)</code></li> <li><code>fn withQueryEditorFunctionExpressionMixin(value)</code></li> <li><code>fn withQueryEditorPropertyExpression(value)</code></li> <li><code>fn withQueryEditorPropertyExpressionMixin(value)</code></li> <li><code>obj QueryEditorFunctionExpression</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withParameters(value)</code></li> <li><code>fn withParametersMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> <li><code>obj QueryEditorPropertyExpression</code><ul> <li><code>fn withProperty(value)</code></li> <li><code>fn withPropertyMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj property</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj groupBy</code><ul> <li><code>fn withExpressions(value)</code></li> <li><code>fn withExpressionsMixin(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> <li><code>obj orderBy</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withParameters(value)</code></li> <li><code>fn withParametersMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> <li><code>obj select</code><ul> <li><code>fn withName(value)</code></li> <li><code>fn withParameters(value)</code></li> <li><code>fn withParametersMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> <li><code>obj where</code><ul> <li><code>fn withExpressions(value)</code></li> <li><code>fn withExpressionsMixin(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"API/query/cloudWatch/index.html#fields","title":"Fields","text":""},{"location":"API/query/cloudWatch/index.html#obj-cloudwatchannotationquery","title":"obj CloudWatchAnnotationQuery","text":""},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithaccountid","title":"fn CloudWatchAnnotationQuery.withAccountId","text":"<pre><code>CloudWatchAnnotationQuery.withAccountId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The ID of the AWS account to query for the metric, specifying <code>all</code> will query all accounts that the monitoring account is permitted to query.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithactionprefix","title":"fn CloudWatchAnnotationQuery.withActionPrefix","text":"<pre><code>CloudWatchAnnotationQuery.withActionPrefix(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic. e.g. <code>arn:aws:sns:us-east-1:123456789012:my-app-</code> would match <code>arn:aws:sns:us-east-1:123456789012:my-app-action</code> but not match <code>arn:aws:sns:us-east-1:123456789012:your-app-action</code></p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithalarmnameprefix","title":"fn CloudWatchAnnotationQuery.withAlarmNamePrefix","text":"<pre><code>CloudWatchAnnotationQuery.withAlarmNamePrefix(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix. e.g. <code>my-team-service-</code> would match <code>my-team-service-high-cpu</code> but not match <code>your-team-service-high-cpu</code></p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithdatasource","title":"fn CloudWatchAnnotationQuery.withDatasource","text":"<pre><code>CloudWatchAnnotationQuery.withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Set the datasource for this query.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithdimensions","title":"fn CloudWatchAnnotationQuery.withDimensions","text":"<pre><code>CloudWatchAnnotationQuery.withDimensions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>A name/value pair that is part of the identity of a metric. For example, you can get statistics for a specific EC2 instance by specifying the InstanceId dimension when you search for metrics.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithdimensionsmixin","title":"fn CloudWatchAnnotationQuery.withDimensionsMixin","text":"<pre><code>CloudWatchAnnotationQuery.withDimensionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>A name/value pair that is part of the identity of a metric. For example, you can get statistics for a specific EC2 instance by specifying the InstanceId dimension when you search for metrics.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithhide","title":"fn CloudWatchAnnotationQuery.withHide","text":"<pre><code>CloudWatchAnnotationQuery.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If hide is set to true, Grafana will filter out the response(s) associated with this query before returning it to the panel.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithmatchexact","title":"fn CloudWatchAnnotationQuery.withMatchExact","text":"<pre><code>CloudWatchAnnotationQuery.withMatchExact(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Only show metrics that exactly match all defined dimension names.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithmetricname","title":"fn CloudWatchAnnotationQuery.withMetricName","text":"<pre><code>CloudWatchAnnotationQuery.withMetricName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of the metric</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithnamespace","title":"fn CloudWatchAnnotationQuery.withNamespace","text":"<pre><code>CloudWatchAnnotationQuery.withNamespace(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>A namespace is a container for CloudWatch metrics. Metrics in different namespaces are isolated from each other, so that metrics from different applications are not mistakenly aggregated into the same statistics. For example, Amazon EC2 uses the AWS/EC2 namespace.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithperiod","title":"fn CloudWatchAnnotationQuery.withPeriod","text":"<pre><code>CloudWatchAnnotationQuery.withPeriod(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The length of time associated with a specific Amazon CloudWatch statistic. Can be specified by a number of seconds, 'auto', or as a duration string e.g. '15m' being 15 minutes</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithprefixmatching","title":"fn CloudWatchAnnotationQuery.withPrefixMatching","text":"<pre><code>CloudWatchAnnotationQuery.withPrefixMatching(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Enable matching on the prefix of the action name or alarm name, specify the prefixes with actionPrefix and/or alarmNamePrefix</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithquerymode","title":"fn CloudWatchAnnotationQuery.withQueryMode","text":"<pre><code>CloudWatchAnnotationQuery.withQueryMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"Metrics\"</code>, <code>\"Logs\"</code>, <code>\"Annotations\"</code></li> </ul> </li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithquerytype","title":"fn CloudWatchAnnotationQuery.withQueryType","text":"<pre><code>CloudWatchAnnotationQuery.withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specify the query flavor TODO make this required and give it a default</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithrefid","title":"fn CloudWatchAnnotationQuery.withRefId","text":"<pre><code>CloudWatchAnnotationQuery.withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>A unique identifier for the query within the list of targets. In server side expressions, the refId is used as a variable name to identify results. By default, the UI will assign A-&gt;Z; however setting meaningful names may be useful.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithregion","title":"fn CloudWatchAnnotationQuery.withRegion","text":"<pre><code>CloudWatchAnnotationQuery.withRegion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>AWS region to query for the metric</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithstatistic","title":"fn CloudWatchAnnotationQuery.withStatistic","text":"<pre><code>CloudWatchAnnotationQuery.withStatistic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Metric data aggregations over specified periods of time. For detailed definitions of the statistics supported by CloudWatch, see https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithstatistics","title":"fn CloudWatchAnnotationQuery.withStatistics","text":"<pre><code>CloudWatchAnnotationQuery.withStatistics(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>@deprecated use statistic</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchannotationquerywithstatisticsmixin","title":"fn CloudWatchAnnotationQuery.withStatisticsMixin","text":"<pre><code>CloudWatchAnnotationQuery.withStatisticsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>@deprecated use statistic</p>"},{"location":"API/query/cloudWatch/index.html#obj-cloudwatchlogsquery","title":"obj CloudWatchLogsQuery","text":""},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchlogsquerywithdatasource","title":"fn CloudWatchLogsQuery.withDatasource","text":"<pre><code>CloudWatchLogsQuery.withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Set the datasource for this query.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchlogsquerywithexpression","title":"fn CloudWatchLogsQuery.withExpression","text":"<pre><code>CloudWatchLogsQuery.withExpression(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The CloudWatch Logs Insights query to execute</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchlogsquerywithhide","title":"fn CloudWatchLogsQuery.withHide","text":"<pre><code>CloudWatchLogsQuery.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If hide is set to true, Grafana will filter out the response(s) associated with this query before returning it to the panel.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchlogsquerywithid","title":"fn CloudWatchLogsQuery.withId","text":"<pre><code>CloudWatchLogsQuery.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchlogsquerywithloggroupnames","title":"fn CloudWatchLogsQuery.withLogGroupNames","text":"<pre><code>CloudWatchLogsQuery.withLogGroupNames(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>@deprecated use logGroups</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchlogsquerywithloggroupnamesmixin","title":"fn CloudWatchLogsQuery.withLogGroupNamesMixin","text":"<pre><code>CloudWatchLogsQuery.withLogGroupNamesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>@deprecated use logGroups</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchlogsquerywithloggroups","title":"fn CloudWatchLogsQuery.withLogGroups","text":"<pre><code>CloudWatchLogsQuery.withLogGroups(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Log groups to query</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchlogsquerywithloggroupsmixin","title":"fn CloudWatchLogsQuery.withLogGroupsMixin","text":"<pre><code>CloudWatchLogsQuery.withLogGroupsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Log groups to query</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchlogsquerywithquerymode","title":"fn CloudWatchLogsQuery.withQueryMode","text":"<pre><code>CloudWatchLogsQuery.withQueryMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"Metrics\"</code>, <code>\"Logs\"</code>, <code>\"Annotations\"</code></li> </ul> </li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchlogsquerywithquerytype","title":"fn CloudWatchLogsQuery.withQueryType","text":"<pre><code>CloudWatchLogsQuery.withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specify the query flavor TODO make this required and give it a default</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchlogsquerywithrefid","title":"fn CloudWatchLogsQuery.withRefId","text":"<pre><code>CloudWatchLogsQuery.withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>A unique identifier for the query within the list of targets. In server side expressions, the refId is used as a variable name to identify results. By default, the UI will assign A-&gt;Z; however setting meaningful names may be useful.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchlogsquerywithregion","title":"fn CloudWatchLogsQuery.withRegion","text":"<pre><code>CloudWatchLogsQuery.withRegion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>AWS region to query for the logs</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchlogsquerywithstatsgroups","title":"fn CloudWatchLogsQuery.withStatsGroups","text":"<pre><code>CloudWatchLogsQuery.withStatsGroups(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Fields to group the results by, this field is automatically populated whenever the query is updated</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchlogsquerywithstatsgroupsmixin","title":"fn CloudWatchLogsQuery.withStatsGroupsMixin","text":"<pre><code>CloudWatchLogsQuery.withStatsGroupsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Fields to group the results by, this field is automatically populated whenever the query is updated</p>"},{"location":"API/query/cloudWatch/index.html#obj-cloudwatchmetricsquery","title":"obj CloudWatchMetricsQuery","text":""},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithaccountid","title":"fn CloudWatchMetricsQuery.withAccountId","text":"<pre><code>CloudWatchMetricsQuery.withAccountId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The ID of the AWS account to query for the metric, specifying <code>all</code> will query all accounts that the monitoring account is permitted to query.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithalias","title":"fn CloudWatchMetricsQuery.withAlias","text":"<pre><code>CloudWatchMetricsQuery.withAlias(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Deprecated: use label @deprecated use label</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithdatasource","title":"fn CloudWatchMetricsQuery.withDatasource","text":"<pre><code>CloudWatchMetricsQuery.withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Set the datasource for this query.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithdimensions","title":"fn CloudWatchMetricsQuery.withDimensions","text":"<pre><code>CloudWatchMetricsQuery.withDimensions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>A name/value pair that is part of the identity of a metric. For example, you can get statistics for a specific EC2 instance by specifying the InstanceId dimension when you search for metrics.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithdimensionsmixin","title":"fn CloudWatchMetricsQuery.withDimensionsMixin","text":"<pre><code>CloudWatchMetricsQuery.withDimensionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>A name/value pair that is part of the identity of a metric. For example, you can get statistics for a specific EC2 instance by specifying the InstanceId dimension when you search for metrics.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithexpression","title":"fn CloudWatchMetricsQuery.withExpression","text":"<pre><code>CloudWatchMetricsQuery.withExpression(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Math expression query</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithhide","title":"fn CloudWatchMetricsQuery.withHide","text":"<pre><code>CloudWatchMetricsQuery.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If hide is set to true, Grafana will filter out the response(s) associated with this query before returning it to the panel.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithid","title":"fn CloudWatchMetricsQuery.withId","text":"<pre><code>CloudWatchMetricsQuery.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>ID can be used to reference other queries in math expressions. The ID can include numbers, letters, and underscore, and must start with a lowercase letter.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithlabel","title":"fn CloudWatchMetricsQuery.withLabel","text":"<pre><code>CloudWatchMetricsQuery.withLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Change the time series legend names using dynamic labels. See https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html for more details.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithmatchexact","title":"fn CloudWatchMetricsQuery.withMatchExact","text":"<pre><code>CloudWatchMetricsQuery.withMatchExact(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Only show metrics that exactly match all defined dimension names.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithmetriceditormode","title":"fn CloudWatchMetricsQuery.withMetricEditorMode","text":"<pre><code>CloudWatchMetricsQuery.withMetricEditorMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>0</code>, <code>1</code></li> </ul> </li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithmetricname","title":"fn CloudWatchMetricsQuery.withMetricName","text":"<pre><code>CloudWatchMetricsQuery.withMetricName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of the metric</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithmetricquerytype","title":"fn CloudWatchMetricsQuery.withMetricQueryType","text":"<pre><code>CloudWatchMetricsQuery.withMetricQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>0</code>, <code>1</code></li> </ul> </li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithnamespace","title":"fn CloudWatchMetricsQuery.withNamespace","text":"<pre><code>CloudWatchMetricsQuery.withNamespace(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>A namespace is a container for CloudWatch metrics. Metrics in different namespaces are isolated from each other, so that metrics from different applications are not mistakenly aggregated into the same statistics. For example, Amazon EC2 uses the AWS/EC2 namespace.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithperiod","title":"fn CloudWatchMetricsQuery.withPeriod","text":"<pre><code>CloudWatchMetricsQuery.withPeriod(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The length of time associated with a specific Amazon CloudWatch statistic. Can be specified by a number of seconds, 'auto', or as a duration string e.g. '15m' being 15 minutes</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithquerymode","title":"fn CloudWatchMetricsQuery.withQueryMode","text":"<pre><code>CloudWatchMetricsQuery.withQueryMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"Metrics\"</code>, <code>\"Logs\"</code>, <code>\"Annotations\"</code></li> </ul> </li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithquerytype","title":"fn CloudWatchMetricsQuery.withQueryType","text":"<pre><code>CloudWatchMetricsQuery.withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specify the query flavor TODO make this required and give it a default</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithrefid","title":"fn CloudWatchMetricsQuery.withRefId","text":"<pre><code>CloudWatchMetricsQuery.withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>A unique identifier for the query within the list of targets. In server side expressions, the refId is used as a variable name to identify results. By default, the UI will assign A-&gt;Z; however setting meaningful names may be useful.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithregion","title":"fn CloudWatchMetricsQuery.withRegion","text":"<pre><code>CloudWatchMetricsQuery.withRegion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>AWS region to query for the metric</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithsql","title":"fn CloudWatchMetricsQuery.withSql","text":"<pre><code>CloudWatchMetricsQuery.withSql(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithsqlexpression","title":"fn CloudWatchMetricsQuery.withSqlExpression","text":"<pre><code>CloudWatchMetricsQuery.withSqlExpression(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>When the metric query type is <code>metricQueryType</code> is set to <code>Query</code>, this field is used to specify the query string.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithsqlmixin","title":"fn CloudWatchMetricsQuery.withSqlMixin","text":"<pre><code>CloudWatchMetricsQuery.withSqlMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithstatistic","title":"fn CloudWatchMetricsQuery.withStatistic","text":"<pre><code>CloudWatchMetricsQuery.withStatistic(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Metric data aggregations over specified periods of time. For detailed definitions of the statistics supported by CloudWatch, see https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithstatistics","title":"fn CloudWatchMetricsQuery.withStatistics","text":"<pre><code>CloudWatchMetricsQuery.withStatistics(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>@deprecated use statistic</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerywithstatisticsmixin","title":"fn CloudWatchMetricsQuery.withStatisticsMixin","text":"<pre><code>CloudWatchMetricsQuery.withStatisticsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>@deprecated use statistic</p>"},{"location":"API/query/cloudWatch/index.html#obj-cloudwatchmetricsquerysql","title":"obj CloudWatchMetricsQuery.sql","text":""},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwithfrom","title":"fn CloudWatchMetricsQuery.sql.withFrom","text":"<pre><code>CloudWatchMetricsQuery.sql.withFrom(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>FROM part of the SQL expression</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwithfrommixin","title":"fn CloudWatchMetricsQuery.sql.withFromMixin","text":"<pre><code>CloudWatchMetricsQuery.sql.withFromMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>FROM part of the SQL expression</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwithgroupby","title":"fn CloudWatchMetricsQuery.sql.withGroupBy","text":"<pre><code>CloudWatchMetricsQuery.sql.withGroupBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwithgroupbymixin","title":"fn CloudWatchMetricsQuery.sql.withGroupByMixin","text":"<pre><code>CloudWatchMetricsQuery.sql.withGroupByMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwithlimit","title":"fn CloudWatchMetricsQuery.sql.withLimit","text":"<pre><code>CloudWatchMetricsQuery.sql.withLimit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>LIMIT part of the SQL expression</p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwithorderby","title":"fn CloudWatchMetricsQuery.sql.withOrderBy","text":"<pre><code>CloudWatchMetricsQuery.sql.withOrderBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwithorderbydirection","title":"fn CloudWatchMetricsQuery.sql.withOrderByDirection","text":"<pre><code>CloudWatchMetricsQuery.sql.withOrderByDirection(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The sort order of the SQL expression, <code>ASC</code> or <code>DESC</code></p>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwithorderbymixin","title":"fn CloudWatchMetricsQuery.sql.withOrderByMixin","text":"<pre><code>CloudWatchMetricsQuery.sql.withOrderByMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwithselect","title":"fn CloudWatchMetricsQuery.sql.withSelect","text":"<pre><code>CloudWatchMetricsQuery.sql.withSelect(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwithselectmixin","title":"fn CloudWatchMetricsQuery.sql.withSelectMixin","text":"<pre><code>CloudWatchMetricsQuery.sql.withSelectMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwithwhere","title":"fn CloudWatchMetricsQuery.sql.withWhere","text":"<pre><code>CloudWatchMetricsQuery.sql.withWhere(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwithwheremixin","title":"fn CloudWatchMetricsQuery.sql.withWhereMixin","text":"<pre><code>CloudWatchMetricsQuery.sql.withWhereMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#obj-cloudwatchmetricsquerysqlfrom","title":"obj CloudWatchMetricsQuery.sql.from","text":""},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlfromwithqueryeditorfunctionexpression","title":"fn CloudWatchMetricsQuery.sql.from.withQueryEditorFunctionExpression","text":"<pre><code>CloudWatchMetricsQuery.sql.from.withQueryEditorFunctionExpression(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlfromwithqueryeditorfunctionexpressionmixin","title":"fn CloudWatchMetricsQuery.sql.from.withQueryEditorFunctionExpressionMixin","text":"<pre><code>CloudWatchMetricsQuery.sql.from.withQueryEditorFunctionExpressionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlfromwithqueryeditorpropertyexpression","title":"fn CloudWatchMetricsQuery.sql.from.withQueryEditorPropertyExpression","text":"<pre><code>CloudWatchMetricsQuery.sql.from.withQueryEditorPropertyExpression(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlfromwithqueryeditorpropertyexpressionmixin","title":"fn CloudWatchMetricsQuery.sql.from.withQueryEditorPropertyExpressionMixin","text":"<pre><code>CloudWatchMetricsQuery.sql.from.withQueryEditorPropertyExpressionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#obj-cloudwatchmetricsquerysqlfromqueryeditorfunctionexpression","title":"obj CloudWatchMetricsQuery.sql.from.QueryEditorFunctionExpression","text":""},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlfromqueryeditorfunctionexpressionwithname","title":"# fn CloudWatchMetricsQuery.sql.from.QueryEditorFunctionExpression.withName","text":"<pre><code>CloudWatchMetricsQuery.sql.from.QueryEditorFunctionExpression.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlfromqueryeditorfunctionexpressionwithparameters","title":"# fn CloudWatchMetricsQuery.sql.from.QueryEditorFunctionExpression.withParameters","text":"<pre><code>CloudWatchMetricsQuery.sql.from.QueryEditorFunctionExpression.withParameters(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlfromqueryeditorfunctionexpressionwithparametersmixin","title":"# fn CloudWatchMetricsQuery.sql.from.QueryEditorFunctionExpression.withParametersMixin","text":"<pre><code>CloudWatchMetricsQuery.sql.from.QueryEditorFunctionExpression.withParametersMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlfromqueryeditorfunctionexpressionwithtype","title":"# fn CloudWatchMetricsQuery.sql.from.QueryEditorFunctionExpression.withType","text":"<pre><code>CloudWatchMetricsQuery.sql.from.QueryEditorFunctionExpression.withType()\n</code></pre>"},{"location":"API/query/cloudWatch/index.html#obj-cloudwatchmetricsquerysqlfromqueryeditorpropertyexpression","title":"obj CloudWatchMetricsQuery.sql.from.QueryEditorPropertyExpression","text":""},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlfromqueryeditorpropertyexpressionwithproperty","title":"# fn CloudWatchMetricsQuery.sql.from.QueryEditorPropertyExpression.withProperty","text":"<pre><code>CloudWatchMetricsQuery.sql.from.QueryEditorPropertyExpression.withProperty(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlfromqueryeditorpropertyexpressionwithpropertymixin","title":"# fn CloudWatchMetricsQuery.sql.from.QueryEditorPropertyExpression.withPropertyMixin","text":"<pre><code>CloudWatchMetricsQuery.sql.from.QueryEditorPropertyExpression.withPropertyMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlfromqueryeditorpropertyexpressionwithtype","title":"# fn CloudWatchMetricsQuery.sql.from.QueryEditorPropertyExpression.withType","text":"<pre><code>CloudWatchMetricsQuery.sql.from.QueryEditorPropertyExpression.withType()\n</code></pre>"},{"location":"API/query/cloudWatch/index.html#obj-cloudwatchmetricsquerysqlfromqueryeditorpropertyexpressionproperty","title":"# obj CloudWatchMetricsQuery.sql.from.QueryEditorPropertyExpression.property","text":""},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlfromqueryeditorpropertyexpressionpropertywithname","title":"## fn CloudWatchMetricsQuery.sql.from.QueryEditorPropertyExpression.property.withName","text":"<pre><code>CloudWatchMetricsQuery.sql.from.QueryEditorPropertyExpression.property.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlfromqueryeditorpropertyexpressionpropertywithtype","title":"## fn CloudWatchMetricsQuery.sql.from.QueryEditorPropertyExpression.property.withType","text":"<pre><code>CloudWatchMetricsQuery.sql.from.QueryEditorPropertyExpression.property.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"string\"</code></li> </ul> </li> </ul>"},{"location":"API/query/cloudWatch/index.html#obj-cloudwatchmetricsquerysqlgroupby","title":"obj CloudWatchMetricsQuery.sql.groupBy","text":""},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlgroupbywithexpressions","title":"fn CloudWatchMetricsQuery.sql.groupBy.withExpressions","text":"<pre><code>CloudWatchMetricsQuery.sql.groupBy.withExpressions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlgroupbywithexpressionsmixin","title":"fn CloudWatchMetricsQuery.sql.groupBy.withExpressionsMixin","text":"<pre><code>CloudWatchMetricsQuery.sql.groupBy.withExpressionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlgroupbywithtype","title":"fn CloudWatchMetricsQuery.sql.groupBy.withType","text":"<pre><code>CloudWatchMetricsQuery.sql.groupBy.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"and\"</code>, <code>\"or\"</code></li> </ul> </li> </ul>"},{"location":"API/query/cloudWatch/index.html#obj-cloudwatchmetricsquerysqlorderby","title":"obj CloudWatchMetricsQuery.sql.orderBy","text":""},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlorderbywithname","title":"fn CloudWatchMetricsQuery.sql.orderBy.withName","text":"<pre><code>CloudWatchMetricsQuery.sql.orderBy.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlorderbywithparameters","title":"fn CloudWatchMetricsQuery.sql.orderBy.withParameters","text":"<pre><code>CloudWatchMetricsQuery.sql.orderBy.withParameters(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlorderbywithparametersmixin","title":"fn CloudWatchMetricsQuery.sql.orderBy.withParametersMixin","text":"<pre><code>CloudWatchMetricsQuery.sql.orderBy.withParametersMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlorderbywithtype","title":"fn CloudWatchMetricsQuery.sql.orderBy.withType","text":"<pre><code>CloudWatchMetricsQuery.sql.orderBy.withType()\n</code></pre>"},{"location":"API/query/cloudWatch/index.html#obj-cloudwatchmetricsquerysqlselect","title":"obj CloudWatchMetricsQuery.sql.select","text":""},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlselectwithname","title":"fn CloudWatchMetricsQuery.sql.select.withName","text":"<pre><code>CloudWatchMetricsQuery.sql.select.withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlselectwithparameters","title":"fn CloudWatchMetricsQuery.sql.select.withParameters","text":"<pre><code>CloudWatchMetricsQuery.sql.select.withParameters(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlselectwithparametersmixin","title":"fn CloudWatchMetricsQuery.sql.select.withParametersMixin","text":"<pre><code>CloudWatchMetricsQuery.sql.select.withParametersMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlselectwithtype","title":"fn CloudWatchMetricsQuery.sql.select.withType","text":"<pre><code>CloudWatchMetricsQuery.sql.select.withType()\n</code></pre>"},{"location":"API/query/cloudWatch/index.html#obj-cloudwatchmetricsquerysqlwhere","title":"obj CloudWatchMetricsQuery.sql.where","text":""},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwherewithexpressions","title":"fn CloudWatchMetricsQuery.sql.where.withExpressions","text":"<pre><code>CloudWatchMetricsQuery.sql.where.withExpressions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwherewithexpressionsmixin","title":"fn CloudWatchMetricsQuery.sql.where.withExpressionsMixin","text":"<pre><code>CloudWatchMetricsQuery.sql.where.withExpressionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/cloudWatch/index.html#fn-cloudwatchmetricsquerysqlwherewithtype","title":"fn CloudWatchMetricsQuery.sql.where.withType","text":"<pre><code>CloudWatchMetricsQuery.sql.where.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"and\"</code>, <code>\"or\"</code></li> </ul> </li> </ul>"},{"location":"API/query/cloudWatch/CloudWatchLogsQuery/logGroups.html","title":"logGroups","text":""},{"location":"API/query/cloudWatch/CloudWatchLogsQuery/logGroups.html#index","title":"Index","text":"<ul> <li><code>fn withAccountId(value)</code></li> <li><code>fn withAccountLabel(value)</code></li> <li><code>fn withArn(value)</code></li> <li><code>fn withName(value)</code></li> </ul>"},{"location":"API/query/cloudWatch/CloudWatchLogsQuery/logGroups.html#fields","title":"Fields","text":""},{"location":"API/query/cloudWatch/CloudWatchLogsQuery/logGroups.html#fn-withaccountid","title":"fn withAccountId","text":"<pre><code>withAccountId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>AccountId of the log group</p>"},{"location":"API/query/cloudWatch/CloudWatchLogsQuery/logGroups.html#fn-withaccountlabel","title":"fn withAccountLabel","text":"<pre><code>withAccountLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Label of the log group</p>"},{"location":"API/query/cloudWatch/CloudWatchLogsQuery/logGroups.html#fn-witharn","title":"fn withArn","text":"<pre><code>withArn(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>ARN of the log group</p>"},{"location":"API/query/cloudWatch/CloudWatchLogsQuery/logGroups.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of the log group</p>"},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/from/QueryEditorFunctionExpression/parameters.html","title":"parameters","text":""},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/from/QueryEditorFunctionExpression/parameters.html#index","title":"Index","text":"<ul> <li><code>fn withName(value)</code></li> <li><code>fn withType()</code></li> </ul>"},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/from/QueryEditorFunctionExpression/parameters.html#fields","title":"Fields","text":""},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/from/QueryEditorFunctionExpression/parameters.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/from/QueryEditorFunctionExpression/parameters.html#fn-withtype","title":"fn withType","text":"<pre><code>withType()\n</code></pre>"},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/orderBy/parameters.html","title":"parameters","text":""},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/orderBy/parameters.html#index","title":"Index","text":"<ul> <li><code>fn withName(value)</code></li> <li><code>fn withType()</code></li> </ul>"},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/orderBy/parameters.html#fields","title":"Fields","text":""},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/orderBy/parameters.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/orderBy/parameters.html#fn-withtype","title":"fn withType","text":"<pre><code>withType()\n</code></pre>"},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/select/parameters.html","title":"parameters","text":""},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/select/parameters.html#index","title":"Index","text":"<ul> <li><code>fn withName(value)</code></li> <li><code>fn withType()</code></li> </ul>"},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/select/parameters.html#fields","title":"Fields","text":""},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/select/parameters.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/cloudWatch/CloudWatchMetricsQuery/sql/select/parameters.html#fn-withtype","title":"fn withType","text":"<pre><code>withType()\n</code></pre>"},{"location":"API/query/elasticsearch/index.html","title":"elasticsearch","text":"<p>grafonnet.query.elasticsearch</p>"},{"location":"API/query/elasticsearch/index.html#subpackages","title":"Subpackages","text":"<ul> <li>bucketAggs</li> <li>metrics</li> </ul>"},{"location":"API/query/elasticsearch/index.html#index","title":"Index","text":"<ul> <li><code>fn withAlias(value)</code></li> <li><code>fn withBucketAggs(value)</code></li> <li><code>fn withBucketAggsMixin(value)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withMetrics(value)</code></li> <li><code>fn withMetricsMixin(value)</code></li> <li><code>fn withQuery(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withTimeField(value)</code></li> </ul>"},{"location":"API/query/elasticsearch/index.html#fields","title":"Fields","text":""},{"location":"API/query/elasticsearch/index.html#fn-withalias","title":"fn withAlias","text":"<pre><code>withAlias(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Alias pattern</p>"},{"location":"API/query/elasticsearch/index.html#fn-withbucketaggs","title":"fn withBucketAggs","text":"<pre><code>withBucketAggs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of bucket aggregations</p>"},{"location":"API/query/elasticsearch/index.html#fn-withbucketaggsmixin","title":"fn withBucketAggsMixin","text":"<pre><code>withBucketAggsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of bucket aggregations</p>"},{"location":"API/query/elasticsearch/index.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Set the datasource for this query.</p>"},{"location":"API/query/elasticsearch/index.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If hide is set to true, Grafana will filter out the response(s) associated with this query before returning it to the panel.</p>"},{"location":"API/query/elasticsearch/index.html#fn-withmetrics","title":"fn withMetrics","text":"<pre><code>withMetrics(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of metric aggregations</p>"},{"location":"API/query/elasticsearch/index.html#fn-withmetricsmixin","title":"fn withMetricsMixin","text":"<pre><code>withMetricsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>List of metric aggregations</p>"},{"location":"API/query/elasticsearch/index.html#fn-withquery","title":"fn withQuery","text":"<pre><code>withQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Lucene query</p>"},{"location":"API/query/elasticsearch/index.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specify the query flavor TODO make this required and give it a default</p>"},{"location":"API/query/elasticsearch/index.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>A unique identifier for the query within the list of targets. In server side expressions, the refId is used as a variable name to identify results. By default, the UI will assign A-&gt;Z; however setting meaningful names may be useful.</p>"},{"location":"API/query/elasticsearch/index.html#fn-withtimefield","title":"fn withTimeField","text":"<pre><code>withTimeField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Name of time field</p>"},{"location":"API/query/elasticsearch/bucketAggs/index.html","title":"bucketAggs","text":""},{"location":"API/query/elasticsearch/bucketAggs/index.html#subpackages","title":"Subpackages","text":"<ul> <li>Filters.settings.filters</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#index","title":"Index","text":"<ul> <li><code>obj DateHistogram</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withInterval(value)</code></li> <li><code>fn withMinDocCount(value)</code></li> <li><code>fn withOffset(value)</code></li> <li><code>fn withTimeZone(value)</code></li> <li><code>fn withTrimEdges(value)</code></li> </ul> </li> </ul> </li> <li><code>obj Filters</code><ul> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withFilters(value)</code></li> <li><code>fn withFiltersMixin(value)</code></li> </ul> </li> </ul> </li> <li><code>obj GeoHashGrid</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withPrecision(value)</code></li> </ul> </li> </ul> </li> <li><code>obj Histogram</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withInterval(value)</code></li> <li><code>fn withMinDocCount(value)</code></li> </ul> </li> </ul> </li> <li><code>obj Nested</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> <li><code>obj Terms</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withMinDocCount(value)</code></li> <li><code>fn withMissing(value)</code></li> <li><code>fn withOrder(value)</code></li> <li><code>fn withOrderBy(value)</code></li> <li><code>fn withSize(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fields","title":"Fields","text":""},{"location":"API/query/elasticsearch/bucketAggs/index.html#obj-datehistogram","title":"obj DateHistogram","text":""},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-datehistogramwithfield","title":"fn DateHistogram.withField","text":"<pre><code>DateHistogram.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-datehistogramwithid","title":"fn DateHistogram.withId","text":"<pre><code>DateHistogram.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-datehistogramwithsettings","title":"fn DateHistogram.withSettings","text":"<pre><code>DateHistogram.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-datehistogramwithsettingsmixin","title":"fn DateHistogram.withSettingsMixin","text":"<pre><code>DateHistogram.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-datehistogramwithtype","title":"fn DateHistogram.withType","text":"<pre><code>DateHistogram.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#obj-datehistogramsettings","title":"obj DateHistogram.settings","text":""},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-datehistogramsettingswithinterval","title":"fn DateHistogram.settings.withInterval","text":"<pre><code>DateHistogram.settings.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-datehistogramsettingswithmindoccount","title":"fn DateHistogram.settings.withMinDocCount","text":"<pre><code>DateHistogram.settings.withMinDocCount(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-datehistogramsettingswithoffset","title":"fn DateHistogram.settings.withOffset","text":"<pre><code>DateHistogram.settings.withOffset(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-datehistogramsettingswithtimezone","title":"fn DateHistogram.settings.withTimeZone","text":"<pre><code>DateHistogram.settings.withTimeZone(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-datehistogramsettingswithtrimedges","title":"fn DateHistogram.settings.withTrimEdges","text":"<pre><code>DateHistogram.settings.withTrimEdges(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#obj-filters","title":"obj Filters","text":""},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-filterswithid","title":"fn Filters.withId","text":"<pre><code>Filters.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-filterswithsettings","title":"fn Filters.withSettings","text":"<pre><code>Filters.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-filterswithsettingsmixin","title":"fn Filters.withSettingsMixin","text":"<pre><code>Filters.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-filterswithtype","title":"fn Filters.withType","text":"<pre><code>Filters.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#obj-filterssettings","title":"obj Filters.settings","text":""},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-filterssettingswithfilters","title":"fn Filters.settings.withFilters","text":"<pre><code>Filters.settings.withFilters(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-filterssettingswithfiltersmixin","title":"fn Filters.settings.withFiltersMixin","text":"<pre><code>Filters.settings.withFiltersMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#obj-geohashgrid","title":"obj GeoHashGrid","text":""},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-geohashgridwithfield","title":"fn GeoHashGrid.withField","text":"<pre><code>GeoHashGrid.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-geohashgridwithid","title":"fn GeoHashGrid.withId","text":"<pre><code>GeoHashGrid.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-geohashgridwithsettings","title":"fn GeoHashGrid.withSettings","text":"<pre><code>GeoHashGrid.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-geohashgridwithsettingsmixin","title":"fn GeoHashGrid.withSettingsMixin","text":"<pre><code>GeoHashGrid.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-geohashgridwithtype","title":"fn GeoHashGrid.withType","text":"<pre><code>GeoHashGrid.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#obj-geohashgridsettings","title":"obj GeoHashGrid.settings","text":""},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-geohashgridsettingswithprecision","title":"fn GeoHashGrid.settings.withPrecision","text":"<pre><code>GeoHashGrid.settings.withPrecision(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#obj-histogram","title":"obj Histogram","text":""},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-histogramwithfield","title":"fn Histogram.withField","text":"<pre><code>Histogram.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-histogramwithid","title":"fn Histogram.withId","text":"<pre><code>Histogram.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-histogramwithsettings","title":"fn Histogram.withSettings","text":"<pre><code>Histogram.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-histogramwithsettingsmixin","title":"fn Histogram.withSettingsMixin","text":"<pre><code>Histogram.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-histogramwithtype","title":"fn Histogram.withType","text":"<pre><code>Histogram.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#obj-histogramsettings","title":"obj Histogram.settings","text":""},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-histogramsettingswithinterval","title":"fn Histogram.settings.withInterval","text":"<pre><code>Histogram.settings.withInterval(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-histogramsettingswithmindoccount","title":"fn Histogram.settings.withMinDocCount","text":"<pre><code>Histogram.settings.withMinDocCount(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#obj-nested","title":"obj Nested","text":""},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-nestedwithfield","title":"fn Nested.withField","text":"<pre><code>Nested.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-nestedwithid","title":"fn Nested.withId","text":"<pre><code>Nested.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-nestedwithsettings","title":"fn Nested.withSettings","text":"<pre><code>Nested.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-nestedwithsettingsmixin","title":"fn Nested.withSettingsMixin","text":"<pre><code>Nested.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-nestedwithtype","title":"fn Nested.withType","text":"<pre><code>Nested.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#obj-terms","title":"obj Terms","text":""},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-termswithfield","title":"fn Terms.withField","text":"<pre><code>Terms.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-termswithid","title":"fn Terms.withId","text":"<pre><code>Terms.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-termswithsettings","title":"fn Terms.withSettings","text":"<pre><code>Terms.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-termswithsettingsmixin","title":"fn Terms.withSettingsMixin","text":"<pre><code>Terms.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-termswithtype","title":"fn Terms.withType","text":"<pre><code>Terms.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#obj-termssettings","title":"obj Terms.settings","text":""},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-termssettingswithmindoccount","title":"fn Terms.settings.withMinDocCount","text":"<pre><code>Terms.settings.withMinDocCount(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-termssettingswithmissing","title":"fn Terms.settings.withMissing","text":"<pre><code>Terms.settings.withMissing(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-termssettingswithorder","title":"fn Terms.settings.withOrder","text":"<pre><code>Terms.settings.withOrder(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"desc\"</code>, <code>\"asc\"</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-termssettingswithorderby","title":"fn Terms.settings.withOrderBy","text":"<pre><code>Terms.settings.withOrderBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/index.html#fn-termssettingswithsize","title":"fn Terms.settings.withSize","text":"<pre><code>Terms.settings.withSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/Filters/settings/filters.html","title":"filters","text":""},{"location":"API/query/elasticsearch/bucketAggs/Filters/settings/filters.html#index","title":"Index","text":"<ul> <li><code>fn withLabel(value)</code></li> <li><code>fn withQuery(value)</code></li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/Filters/settings/filters.html#fields","title":"Fields","text":""},{"location":"API/query/elasticsearch/bucketAggs/Filters/settings/filters.html#fn-withlabel","title":"fn withLabel","text":"<pre><code>withLabel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/bucketAggs/Filters/settings/filters.html#fn-withquery","title":"fn withQuery","text":"<pre><code>withQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html","title":"metrics","text":""},{"location":"API/query/elasticsearch/metrics/index.html#subpackages","title":"Subpackages","text":"<ul> <li>MetricAggregationWithSettings.BucketScript.pipelineVariables</li> <li>PipelineMetricAggregation.BucketScript.pipelineVariables</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#index","title":"Index","text":"<ul> <li><code>obj Count</code><ul> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> <li><code>obj MetricAggregationWithSettings</code><ul> <li><code>obj Average</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withMissing(value)</code></li> <li><code>fn withScript(value)</code></li> <li><code>fn withScriptMixin(value)</code></li> <li><code>obj script</code><ul> <li><code>fn withInline(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj BucketScript</code><ul> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withPipelineVariables(value)</code></li> <li><code>fn withPipelineVariablesMixin(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withScript(value)</code></li> <li><code>fn withScriptMixin(value)</code></li> <li><code>obj script</code><ul> <li><code>fn withInline(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj CumulativeSum</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withPipelineAgg(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withFormat(value)</code></li> </ul> </li> </ul> </li> <li><code>obj Derivative</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withPipelineAgg(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withUnit(value)</code></li> </ul> </li> </ul> </li> <li><code>obj ExtendedStats</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withMeta(value)</code></li> <li><code>fn withMetaMixin(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withMissing(value)</code></li> <li><code>fn withScript(value)</code></li> <li><code>fn withScriptMixin(value)</code></li> <li><code>fn withSigma(value)</code></li> <li><code>obj script</code><ul> <li><code>fn withInline(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj Logs</code><ul> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withLimit(value)</code></li> </ul> </li> </ul> </li> <li><code>obj Max</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withMissing(value)</code></li> <li><code>fn withScript(value)</code></li> <li><code>fn withScriptMixin(value)</code></li> <li><code>obj script</code><ul> <li><code>fn withInline(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj Min</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withMissing(value)</code></li> <li><code>fn withScript(value)</code></li> <li><code>fn withScriptMixin(value)</code></li> <li><code>obj script</code><ul> <li><code>fn withInline(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj MovingAverage</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withPipelineAgg(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> <li><code>obj MovingFunction</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withPipelineAgg(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withScript(value)</code></li> <li><code>fn withScriptMixin(value)</code></li> <li><code>fn withShift(value)</code></li> <li><code>fn withWindow(value)</code></li> <li><code>obj script</code><ul> <li><code>fn withInline(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj Percentiles</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withMissing(value)</code></li> <li><code>fn withPercents(value)</code></li> <li><code>fn withPercentsMixin(value)</code></li> <li><code>fn withScript(value)</code></li> <li><code>fn withScriptMixin(value)</code></li> <li><code>obj script</code><ul> <li><code>fn withInline(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj Rate</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withUnit(value)</code></li> </ul> </li> </ul> </li> <li><code>obj RawData</code><ul> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withSize(value)</code></li> </ul> </li> </ul> </li> <li><code>obj RawDocument</code><ul> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withSize(value)</code></li> </ul> </li> </ul> </li> <li><code>obj SerialDiff</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withPipelineAgg(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withLag(value)</code></li> </ul> </li> </ul> </li> <li><code>obj Sum</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withMissing(value)</code></li> <li><code>fn withScript(value)</code></li> <li><code>fn withScriptMixin(value)</code></li> <li><code>obj script</code><ul> <li><code>fn withInline(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj TopMetrics</code><ul> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withMetrics(value)</code></li> <li><code>fn withMetricsMixin(value)</code></li> <li><code>fn withOrder(value)</code></li> <li><code>fn withOrderBy(value)</code></li> </ul> </li> </ul> </li> <li><code>obj UniqueCount</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withMissing(value)</code></li> <li><code>fn withPrecisionThreshold(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj PipelineMetricAggregation</code><ul> <li><code>obj BucketScript</code><ul> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withPipelineVariables(value)</code></li> <li><code>fn withPipelineVariablesMixin(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withScript(value)</code></li> <li><code>fn withScriptMixin(value)</code></li> <li><code>obj script</code><ul> <li><code>fn withInline(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj CumulativeSum</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withPipelineAgg(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withFormat(value)</code></li> </ul> </li> </ul> </li> <li><code>obj Derivative</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withPipelineAgg(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj settings</code><ul> <li><code>fn withUnit(value)</code></li> </ul> </li> </ul> </li> <li><code>obj MovingAverage</code><ul> <li><code>fn withField(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withId(value)</code></li> <li><code>fn withPipelineAgg(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withType()</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fields","title":"Fields","text":""},{"location":"API/query/elasticsearch/metrics/index.html#obj-count","title":"obj Count","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-countwithhide","title":"fn Count.withHide","text":"<pre><code>Count.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-countwithid","title":"fn Count.withId","text":"<pre><code>Count.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-countwithtype","title":"fn Count.withType","text":"<pre><code>Count.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettings","title":"obj MetricAggregationWithSettings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsaverage","title":"obj MetricAggregationWithSettings.Average","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsaveragewithfield","title":"fn MetricAggregationWithSettings.Average.withField","text":"<pre><code>MetricAggregationWithSettings.Average.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsaveragewithhide","title":"fn MetricAggregationWithSettings.Average.withHide","text":"<pre><code>MetricAggregationWithSettings.Average.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsaveragewithid","title":"fn MetricAggregationWithSettings.Average.withId","text":"<pre><code>MetricAggregationWithSettings.Average.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsaveragewithsettings","title":"fn MetricAggregationWithSettings.Average.withSettings","text":"<pre><code>MetricAggregationWithSettings.Average.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsaveragewithsettingsmixin","title":"fn MetricAggregationWithSettings.Average.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.Average.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsaveragewithtype","title":"fn MetricAggregationWithSettings.Average.withType","text":"<pre><code>MetricAggregationWithSettings.Average.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsaveragesettings","title":"obj MetricAggregationWithSettings.Average.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsaveragesettingswithmissing","title":"fn MetricAggregationWithSettings.Average.settings.withMissing","text":"<pre><code>MetricAggregationWithSettings.Average.settings.withMissing(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsaveragesettingswithscript","title":"fn MetricAggregationWithSettings.Average.settings.withScript","text":"<pre><code>MetricAggregationWithSettings.Average.settings.withScript(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsaveragesettingswithscriptmixin","title":"fn MetricAggregationWithSettings.Average.settings.withScriptMixin","text":"<pre><code>MetricAggregationWithSettings.Average.settings.withScriptMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsaveragesettingsscript","title":"obj MetricAggregationWithSettings.Average.settings.script","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsaveragesettingsscriptwithinline","title":"# fn MetricAggregationWithSettings.Average.settings.script.withInline","text":"<pre><code>MetricAggregationWithSettings.Average.settings.script.withInline(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsbucketscript","title":"obj MetricAggregationWithSettings.BucketScript","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsbucketscriptwithhide","title":"fn MetricAggregationWithSettings.BucketScript.withHide","text":"<pre><code>MetricAggregationWithSettings.BucketScript.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsbucketscriptwithid","title":"fn MetricAggregationWithSettings.BucketScript.withId","text":"<pre><code>MetricAggregationWithSettings.BucketScript.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsbucketscriptwithpipelinevariables","title":"fn MetricAggregationWithSettings.BucketScript.withPipelineVariables","text":"<pre><code>MetricAggregationWithSettings.BucketScript.withPipelineVariables(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsbucketscriptwithpipelinevariablesmixin","title":"fn MetricAggregationWithSettings.BucketScript.withPipelineVariablesMixin","text":"<pre><code>MetricAggregationWithSettings.BucketScript.withPipelineVariablesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsbucketscriptwithsettings","title":"fn MetricAggregationWithSettings.BucketScript.withSettings","text":"<pre><code>MetricAggregationWithSettings.BucketScript.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsbucketscriptwithsettingsmixin","title":"fn MetricAggregationWithSettings.BucketScript.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.BucketScript.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsbucketscriptwithtype","title":"fn MetricAggregationWithSettings.BucketScript.withType","text":"<pre><code>MetricAggregationWithSettings.BucketScript.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsbucketscriptsettings","title":"obj MetricAggregationWithSettings.BucketScript.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsbucketscriptsettingswithscript","title":"fn MetricAggregationWithSettings.BucketScript.settings.withScript","text":"<pre><code>MetricAggregationWithSettings.BucketScript.settings.withScript(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsbucketscriptsettingswithscriptmixin","title":"fn MetricAggregationWithSettings.BucketScript.settings.withScriptMixin","text":"<pre><code>MetricAggregationWithSettings.BucketScript.settings.withScriptMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsbucketscriptsettingsscript","title":"obj MetricAggregationWithSettings.BucketScript.settings.script","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsbucketscriptsettingsscriptwithinline","title":"# fn MetricAggregationWithSettings.BucketScript.settings.script.withInline","text":"<pre><code>MetricAggregationWithSettings.BucketScript.settings.script.withInline(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingscumulativesum","title":"obj MetricAggregationWithSettings.CumulativeSum","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingscumulativesumwithfield","title":"fn MetricAggregationWithSettings.CumulativeSum.withField","text":"<pre><code>MetricAggregationWithSettings.CumulativeSum.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingscumulativesumwithhide","title":"fn MetricAggregationWithSettings.CumulativeSum.withHide","text":"<pre><code>MetricAggregationWithSettings.CumulativeSum.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingscumulativesumwithid","title":"fn MetricAggregationWithSettings.CumulativeSum.withId","text":"<pre><code>MetricAggregationWithSettings.CumulativeSum.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingscumulativesumwithpipelineagg","title":"fn MetricAggregationWithSettings.CumulativeSum.withPipelineAgg","text":"<pre><code>MetricAggregationWithSettings.CumulativeSum.withPipelineAgg(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingscumulativesumwithsettings","title":"fn MetricAggregationWithSettings.CumulativeSum.withSettings","text":"<pre><code>MetricAggregationWithSettings.CumulativeSum.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingscumulativesumwithsettingsmixin","title":"fn MetricAggregationWithSettings.CumulativeSum.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.CumulativeSum.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingscumulativesumwithtype","title":"fn MetricAggregationWithSettings.CumulativeSum.withType","text":"<pre><code>MetricAggregationWithSettings.CumulativeSum.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingscumulativesumsettings","title":"obj MetricAggregationWithSettings.CumulativeSum.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingscumulativesumsettingswithformat","title":"fn MetricAggregationWithSettings.CumulativeSum.settings.withFormat","text":"<pre><code>MetricAggregationWithSettings.CumulativeSum.settings.withFormat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsderivative","title":"obj MetricAggregationWithSettings.Derivative","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsderivativewithfield","title":"fn MetricAggregationWithSettings.Derivative.withField","text":"<pre><code>MetricAggregationWithSettings.Derivative.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsderivativewithhide","title":"fn MetricAggregationWithSettings.Derivative.withHide","text":"<pre><code>MetricAggregationWithSettings.Derivative.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsderivativewithid","title":"fn MetricAggregationWithSettings.Derivative.withId","text":"<pre><code>MetricAggregationWithSettings.Derivative.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsderivativewithpipelineagg","title":"fn MetricAggregationWithSettings.Derivative.withPipelineAgg","text":"<pre><code>MetricAggregationWithSettings.Derivative.withPipelineAgg(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsderivativewithsettings","title":"fn MetricAggregationWithSettings.Derivative.withSettings","text":"<pre><code>MetricAggregationWithSettings.Derivative.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsderivativewithsettingsmixin","title":"fn MetricAggregationWithSettings.Derivative.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.Derivative.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsderivativewithtype","title":"fn MetricAggregationWithSettings.Derivative.withType","text":"<pre><code>MetricAggregationWithSettings.Derivative.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsderivativesettings","title":"obj MetricAggregationWithSettings.Derivative.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsderivativesettingswithunit","title":"fn MetricAggregationWithSettings.Derivative.settings.withUnit","text":"<pre><code>MetricAggregationWithSettings.Derivative.settings.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsextendedstats","title":"obj MetricAggregationWithSettings.ExtendedStats","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsextendedstatswithfield","title":"fn MetricAggregationWithSettings.ExtendedStats.withField","text":"<pre><code>MetricAggregationWithSettings.ExtendedStats.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsextendedstatswithhide","title":"fn MetricAggregationWithSettings.ExtendedStats.withHide","text":"<pre><code>MetricAggregationWithSettings.ExtendedStats.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsextendedstatswithid","title":"fn MetricAggregationWithSettings.ExtendedStats.withId","text":"<pre><code>MetricAggregationWithSettings.ExtendedStats.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsextendedstatswithmeta","title":"fn MetricAggregationWithSettings.ExtendedStats.withMeta","text":"<pre><code>MetricAggregationWithSettings.ExtendedStats.withMeta(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsextendedstatswithmetamixin","title":"fn MetricAggregationWithSettings.ExtendedStats.withMetaMixin","text":"<pre><code>MetricAggregationWithSettings.ExtendedStats.withMetaMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsextendedstatswithsettings","title":"fn MetricAggregationWithSettings.ExtendedStats.withSettings","text":"<pre><code>MetricAggregationWithSettings.ExtendedStats.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsextendedstatswithsettingsmixin","title":"fn MetricAggregationWithSettings.ExtendedStats.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.ExtendedStats.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsextendedstatswithtype","title":"fn MetricAggregationWithSettings.ExtendedStats.withType","text":"<pre><code>MetricAggregationWithSettings.ExtendedStats.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsextendedstatssettings","title":"obj MetricAggregationWithSettings.ExtendedStats.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsextendedstatssettingswithmissing","title":"fn MetricAggregationWithSettings.ExtendedStats.settings.withMissing","text":"<pre><code>MetricAggregationWithSettings.ExtendedStats.settings.withMissing(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsextendedstatssettingswithscript","title":"fn MetricAggregationWithSettings.ExtendedStats.settings.withScript","text":"<pre><code>MetricAggregationWithSettings.ExtendedStats.settings.withScript(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsextendedstatssettingswithscriptmixin","title":"fn MetricAggregationWithSettings.ExtendedStats.settings.withScriptMixin","text":"<pre><code>MetricAggregationWithSettings.ExtendedStats.settings.withScriptMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsextendedstatssettingswithsigma","title":"fn MetricAggregationWithSettings.ExtendedStats.settings.withSigma","text":"<pre><code>MetricAggregationWithSettings.ExtendedStats.settings.withSigma(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsextendedstatssettingsscript","title":"obj MetricAggregationWithSettings.ExtendedStats.settings.script","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsextendedstatssettingsscriptwithinline","title":"# fn MetricAggregationWithSettings.ExtendedStats.settings.script.withInline","text":"<pre><code>MetricAggregationWithSettings.ExtendedStats.settings.script.withInline(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingslogs","title":"obj MetricAggregationWithSettings.Logs","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingslogswithhide","title":"fn MetricAggregationWithSettings.Logs.withHide","text":"<pre><code>MetricAggregationWithSettings.Logs.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingslogswithid","title":"fn MetricAggregationWithSettings.Logs.withId","text":"<pre><code>MetricAggregationWithSettings.Logs.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingslogswithsettings","title":"fn MetricAggregationWithSettings.Logs.withSettings","text":"<pre><code>MetricAggregationWithSettings.Logs.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingslogswithsettingsmixin","title":"fn MetricAggregationWithSettings.Logs.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.Logs.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingslogswithtype","title":"fn MetricAggregationWithSettings.Logs.withType","text":"<pre><code>MetricAggregationWithSettings.Logs.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingslogssettings","title":"obj MetricAggregationWithSettings.Logs.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingslogssettingswithlimit","title":"fn MetricAggregationWithSettings.Logs.settings.withLimit","text":"<pre><code>MetricAggregationWithSettings.Logs.settings.withLimit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsmax","title":"obj MetricAggregationWithSettings.Max","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmaxwithfield","title":"fn MetricAggregationWithSettings.Max.withField","text":"<pre><code>MetricAggregationWithSettings.Max.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmaxwithhide","title":"fn MetricAggregationWithSettings.Max.withHide","text":"<pre><code>MetricAggregationWithSettings.Max.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmaxwithid","title":"fn MetricAggregationWithSettings.Max.withId","text":"<pre><code>MetricAggregationWithSettings.Max.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmaxwithsettings","title":"fn MetricAggregationWithSettings.Max.withSettings","text":"<pre><code>MetricAggregationWithSettings.Max.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmaxwithsettingsmixin","title":"fn MetricAggregationWithSettings.Max.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.Max.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmaxwithtype","title":"fn MetricAggregationWithSettings.Max.withType","text":"<pre><code>MetricAggregationWithSettings.Max.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsmaxsettings","title":"obj MetricAggregationWithSettings.Max.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmaxsettingswithmissing","title":"fn MetricAggregationWithSettings.Max.settings.withMissing","text":"<pre><code>MetricAggregationWithSettings.Max.settings.withMissing(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmaxsettingswithscript","title":"fn MetricAggregationWithSettings.Max.settings.withScript","text":"<pre><code>MetricAggregationWithSettings.Max.settings.withScript(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmaxsettingswithscriptmixin","title":"fn MetricAggregationWithSettings.Max.settings.withScriptMixin","text":"<pre><code>MetricAggregationWithSettings.Max.settings.withScriptMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsmaxsettingsscript","title":"obj MetricAggregationWithSettings.Max.settings.script","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmaxsettingsscriptwithinline","title":"# fn MetricAggregationWithSettings.Max.settings.script.withInline","text":"<pre><code>MetricAggregationWithSettings.Max.settings.script.withInline(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsmin","title":"obj MetricAggregationWithSettings.Min","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsminwithfield","title":"fn MetricAggregationWithSettings.Min.withField","text":"<pre><code>MetricAggregationWithSettings.Min.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsminwithhide","title":"fn MetricAggregationWithSettings.Min.withHide","text":"<pre><code>MetricAggregationWithSettings.Min.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsminwithid","title":"fn MetricAggregationWithSettings.Min.withId","text":"<pre><code>MetricAggregationWithSettings.Min.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsminwithsettings","title":"fn MetricAggregationWithSettings.Min.withSettings","text":"<pre><code>MetricAggregationWithSettings.Min.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsminwithsettingsmixin","title":"fn MetricAggregationWithSettings.Min.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.Min.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsminwithtype","title":"fn MetricAggregationWithSettings.Min.withType","text":"<pre><code>MetricAggregationWithSettings.Min.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsminsettings","title":"obj MetricAggregationWithSettings.Min.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsminsettingswithmissing","title":"fn MetricAggregationWithSettings.Min.settings.withMissing","text":"<pre><code>MetricAggregationWithSettings.Min.settings.withMissing(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsminsettingswithscript","title":"fn MetricAggregationWithSettings.Min.settings.withScript","text":"<pre><code>MetricAggregationWithSettings.Min.settings.withScript(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsminsettingswithscriptmixin","title":"fn MetricAggregationWithSettings.Min.settings.withScriptMixin","text":"<pre><code>MetricAggregationWithSettings.Min.settings.withScriptMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsminsettingsscript","title":"obj MetricAggregationWithSettings.Min.settings.script","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsminsettingsscriptwithinline","title":"# fn MetricAggregationWithSettings.Min.settings.script.withInline","text":"<pre><code>MetricAggregationWithSettings.Min.settings.script.withInline(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsmovingaverage","title":"obj MetricAggregationWithSettings.MovingAverage","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingaveragewithfield","title":"fn MetricAggregationWithSettings.MovingAverage.withField","text":"<pre><code>MetricAggregationWithSettings.MovingAverage.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingaveragewithhide","title":"fn MetricAggregationWithSettings.MovingAverage.withHide","text":"<pre><code>MetricAggregationWithSettings.MovingAverage.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingaveragewithid","title":"fn MetricAggregationWithSettings.MovingAverage.withId","text":"<pre><code>MetricAggregationWithSettings.MovingAverage.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingaveragewithpipelineagg","title":"fn MetricAggregationWithSettings.MovingAverage.withPipelineAgg","text":"<pre><code>MetricAggregationWithSettings.MovingAverage.withPipelineAgg(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingaveragewithsettings","title":"fn MetricAggregationWithSettings.MovingAverage.withSettings","text":"<pre><code>MetricAggregationWithSettings.MovingAverage.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingaveragewithsettingsmixin","title":"fn MetricAggregationWithSettings.MovingAverage.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.MovingAverage.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingaveragewithtype","title":"fn MetricAggregationWithSettings.MovingAverage.withType","text":"<pre><code>MetricAggregationWithSettings.MovingAverage.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsmovingfunction","title":"obj MetricAggregationWithSettings.MovingFunction","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingfunctionwithfield","title":"fn MetricAggregationWithSettings.MovingFunction.withField","text":"<pre><code>MetricAggregationWithSettings.MovingFunction.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingfunctionwithhide","title":"fn MetricAggregationWithSettings.MovingFunction.withHide","text":"<pre><code>MetricAggregationWithSettings.MovingFunction.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingfunctionwithid","title":"fn MetricAggregationWithSettings.MovingFunction.withId","text":"<pre><code>MetricAggregationWithSettings.MovingFunction.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingfunctionwithpipelineagg","title":"fn MetricAggregationWithSettings.MovingFunction.withPipelineAgg","text":"<pre><code>MetricAggregationWithSettings.MovingFunction.withPipelineAgg(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingfunctionwithsettings","title":"fn MetricAggregationWithSettings.MovingFunction.withSettings","text":"<pre><code>MetricAggregationWithSettings.MovingFunction.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingfunctionwithsettingsmixin","title":"fn MetricAggregationWithSettings.MovingFunction.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.MovingFunction.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingfunctionwithtype","title":"fn MetricAggregationWithSettings.MovingFunction.withType","text":"<pre><code>MetricAggregationWithSettings.MovingFunction.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsmovingfunctionsettings","title":"obj MetricAggregationWithSettings.MovingFunction.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingfunctionsettingswithscript","title":"fn MetricAggregationWithSettings.MovingFunction.settings.withScript","text":"<pre><code>MetricAggregationWithSettings.MovingFunction.settings.withScript(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingfunctionsettingswithscriptmixin","title":"fn MetricAggregationWithSettings.MovingFunction.settings.withScriptMixin","text":"<pre><code>MetricAggregationWithSettings.MovingFunction.settings.withScriptMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingfunctionsettingswithshift","title":"fn MetricAggregationWithSettings.MovingFunction.settings.withShift","text":"<pre><code>MetricAggregationWithSettings.MovingFunction.settings.withShift(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingfunctionsettingswithwindow","title":"fn MetricAggregationWithSettings.MovingFunction.settings.withWindow","text":"<pre><code>MetricAggregationWithSettings.MovingFunction.settings.withWindow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsmovingfunctionsettingsscript","title":"obj MetricAggregationWithSettings.MovingFunction.settings.script","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsmovingfunctionsettingsscriptwithinline","title":"# fn MetricAggregationWithSettings.MovingFunction.settings.script.withInline","text":"<pre><code>MetricAggregationWithSettings.MovingFunction.settings.script.withInline(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingspercentiles","title":"obj MetricAggregationWithSettings.Percentiles","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingspercentileswithfield","title":"fn MetricAggregationWithSettings.Percentiles.withField","text":"<pre><code>MetricAggregationWithSettings.Percentiles.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingspercentileswithhide","title":"fn MetricAggregationWithSettings.Percentiles.withHide","text":"<pre><code>MetricAggregationWithSettings.Percentiles.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingspercentileswithid","title":"fn MetricAggregationWithSettings.Percentiles.withId","text":"<pre><code>MetricAggregationWithSettings.Percentiles.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingspercentileswithsettings","title":"fn MetricAggregationWithSettings.Percentiles.withSettings","text":"<pre><code>MetricAggregationWithSettings.Percentiles.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingspercentileswithsettingsmixin","title":"fn MetricAggregationWithSettings.Percentiles.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.Percentiles.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingspercentileswithtype","title":"fn MetricAggregationWithSettings.Percentiles.withType","text":"<pre><code>MetricAggregationWithSettings.Percentiles.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingspercentilessettings","title":"obj MetricAggregationWithSettings.Percentiles.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingspercentilessettingswithmissing","title":"fn MetricAggregationWithSettings.Percentiles.settings.withMissing","text":"<pre><code>MetricAggregationWithSettings.Percentiles.settings.withMissing(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingspercentilessettingswithpercents","title":"fn MetricAggregationWithSettings.Percentiles.settings.withPercents","text":"<pre><code>MetricAggregationWithSettings.Percentiles.settings.withPercents(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingspercentilessettingswithpercentsmixin","title":"fn MetricAggregationWithSettings.Percentiles.settings.withPercentsMixin","text":"<pre><code>MetricAggregationWithSettings.Percentiles.settings.withPercentsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingspercentilessettingswithscript","title":"fn MetricAggregationWithSettings.Percentiles.settings.withScript","text":"<pre><code>MetricAggregationWithSettings.Percentiles.settings.withScript(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingspercentilessettingswithscriptmixin","title":"fn MetricAggregationWithSettings.Percentiles.settings.withScriptMixin","text":"<pre><code>MetricAggregationWithSettings.Percentiles.settings.withScriptMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingspercentilessettingsscript","title":"obj MetricAggregationWithSettings.Percentiles.settings.script","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingspercentilessettingsscriptwithinline","title":"# fn MetricAggregationWithSettings.Percentiles.settings.script.withInline","text":"<pre><code>MetricAggregationWithSettings.Percentiles.settings.script.withInline(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsrate","title":"obj MetricAggregationWithSettings.Rate","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsratewithfield","title":"fn MetricAggregationWithSettings.Rate.withField","text":"<pre><code>MetricAggregationWithSettings.Rate.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsratewithhide","title":"fn MetricAggregationWithSettings.Rate.withHide","text":"<pre><code>MetricAggregationWithSettings.Rate.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsratewithid","title":"fn MetricAggregationWithSettings.Rate.withId","text":"<pre><code>MetricAggregationWithSettings.Rate.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsratewithsettings","title":"fn MetricAggregationWithSettings.Rate.withSettings","text":"<pre><code>MetricAggregationWithSettings.Rate.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsratewithsettingsmixin","title":"fn MetricAggregationWithSettings.Rate.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.Rate.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsratewithtype","title":"fn MetricAggregationWithSettings.Rate.withType","text":"<pre><code>MetricAggregationWithSettings.Rate.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsratesettings","title":"obj MetricAggregationWithSettings.Rate.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsratesettingswithmode","title":"fn MetricAggregationWithSettings.Rate.settings.withMode","text":"<pre><code>MetricAggregationWithSettings.Rate.settings.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsratesettingswithunit","title":"fn MetricAggregationWithSettings.Rate.settings.withUnit","text":"<pre><code>MetricAggregationWithSettings.Rate.settings.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsrawdata","title":"obj MetricAggregationWithSettings.RawData","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsrawdatawithhide","title":"fn MetricAggregationWithSettings.RawData.withHide","text":"<pre><code>MetricAggregationWithSettings.RawData.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsrawdatawithid","title":"fn MetricAggregationWithSettings.RawData.withId","text":"<pre><code>MetricAggregationWithSettings.RawData.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsrawdatawithsettings","title":"fn MetricAggregationWithSettings.RawData.withSettings","text":"<pre><code>MetricAggregationWithSettings.RawData.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsrawdatawithsettingsmixin","title":"fn MetricAggregationWithSettings.RawData.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.RawData.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsrawdatawithtype","title":"fn MetricAggregationWithSettings.RawData.withType","text":"<pre><code>MetricAggregationWithSettings.RawData.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsrawdatasettings","title":"obj MetricAggregationWithSettings.RawData.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsrawdatasettingswithsize","title":"fn MetricAggregationWithSettings.RawData.settings.withSize","text":"<pre><code>MetricAggregationWithSettings.RawData.settings.withSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsrawdocument","title":"obj MetricAggregationWithSettings.RawDocument","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsrawdocumentwithhide","title":"fn MetricAggregationWithSettings.RawDocument.withHide","text":"<pre><code>MetricAggregationWithSettings.RawDocument.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsrawdocumentwithid","title":"fn MetricAggregationWithSettings.RawDocument.withId","text":"<pre><code>MetricAggregationWithSettings.RawDocument.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsrawdocumentwithsettings","title":"fn MetricAggregationWithSettings.RawDocument.withSettings","text":"<pre><code>MetricAggregationWithSettings.RawDocument.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsrawdocumentwithsettingsmixin","title":"fn MetricAggregationWithSettings.RawDocument.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.RawDocument.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsrawdocumentwithtype","title":"fn MetricAggregationWithSettings.RawDocument.withType","text":"<pre><code>MetricAggregationWithSettings.RawDocument.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsrawdocumentsettings","title":"obj MetricAggregationWithSettings.RawDocument.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsrawdocumentsettingswithsize","title":"fn MetricAggregationWithSettings.RawDocument.settings.withSize","text":"<pre><code>MetricAggregationWithSettings.RawDocument.settings.withSize(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsserialdiff","title":"obj MetricAggregationWithSettings.SerialDiff","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsserialdiffwithfield","title":"fn MetricAggregationWithSettings.SerialDiff.withField","text":"<pre><code>MetricAggregationWithSettings.SerialDiff.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsserialdiffwithhide","title":"fn MetricAggregationWithSettings.SerialDiff.withHide","text":"<pre><code>MetricAggregationWithSettings.SerialDiff.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsserialdiffwithid","title":"fn MetricAggregationWithSettings.SerialDiff.withId","text":"<pre><code>MetricAggregationWithSettings.SerialDiff.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsserialdiffwithpipelineagg","title":"fn MetricAggregationWithSettings.SerialDiff.withPipelineAgg","text":"<pre><code>MetricAggregationWithSettings.SerialDiff.withPipelineAgg(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsserialdiffwithsettings","title":"fn MetricAggregationWithSettings.SerialDiff.withSettings","text":"<pre><code>MetricAggregationWithSettings.SerialDiff.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsserialdiffwithsettingsmixin","title":"fn MetricAggregationWithSettings.SerialDiff.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.SerialDiff.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsserialdiffwithtype","title":"fn MetricAggregationWithSettings.SerialDiff.withType","text":"<pre><code>MetricAggregationWithSettings.SerialDiff.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsserialdiffsettings","title":"obj MetricAggregationWithSettings.SerialDiff.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsserialdiffsettingswithlag","title":"fn MetricAggregationWithSettings.SerialDiff.settings.withLag","text":"<pre><code>MetricAggregationWithSettings.SerialDiff.settings.withLag(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingssum","title":"obj MetricAggregationWithSettings.Sum","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingssumwithfield","title":"fn MetricAggregationWithSettings.Sum.withField","text":"<pre><code>MetricAggregationWithSettings.Sum.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingssumwithhide","title":"fn MetricAggregationWithSettings.Sum.withHide","text":"<pre><code>MetricAggregationWithSettings.Sum.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingssumwithid","title":"fn MetricAggregationWithSettings.Sum.withId","text":"<pre><code>MetricAggregationWithSettings.Sum.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingssumwithsettings","title":"fn MetricAggregationWithSettings.Sum.withSettings","text":"<pre><code>MetricAggregationWithSettings.Sum.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingssumwithsettingsmixin","title":"fn MetricAggregationWithSettings.Sum.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.Sum.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingssumwithtype","title":"fn MetricAggregationWithSettings.Sum.withType","text":"<pre><code>MetricAggregationWithSettings.Sum.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingssumsettings","title":"obj MetricAggregationWithSettings.Sum.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingssumsettingswithmissing","title":"fn MetricAggregationWithSettings.Sum.settings.withMissing","text":"<pre><code>MetricAggregationWithSettings.Sum.settings.withMissing(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingssumsettingswithscript","title":"fn MetricAggregationWithSettings.Sum.settings.withScript","text":"<pre><code>MetricAggregationWithSettings.Sum.settings.withScript(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingssumsettingswithscriptmixin","title":"fn MetricAggregationWithSettings.Sum.settings.withScriptMixin","text":"<pre><code>MetricAggregationWithSettings.Sum.settings.withScriptMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingssumsettingsscript","title":"obj MetricAggregationWithSettings.Sum.settings.script","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingssumsettingsscriptwithinline","title":"# fn MetricAggregationWithSettings.Sum.settings.script.withInline","text":"<pre><code>MetricAggregationWithSettings.Sum.settings.script.withInline(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingstopmetrics","title":"obj MetricAggregationWithSettings.TopMetrics","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingstopmetricswithhide","title":"fn MetricAggregationWithSettings.TopMetrics.withHide","text":"<pre><code>MetricAggregationWithSettings.TopMetrics.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingstopmetricswithid","title":"fn MetricAggregationWithSettings.TopMetrics.withId","text":"<pre><code>MetricAggregationWithSettings.TopMetrics.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingstopmetricswithsettings","title":"fn MetricAggregationWithSettings.TopMetrics.withSettings","text":"<pre><code>MetricAggregationWithSettings.TopMetrics.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingstopmetricswithsettingsmixin","title":"fn MetricAggregationWithSettings.TopMetrics.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.TopMetrics.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingstopmetricswithtype","title":"fn MetricAggregationWithSettings.TopMetrics.withType","text":"<pre><code>MetricAggregationWithSettings.TopMetrics.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingstopmetricssettings","title":"obj MetricAggregationWithSettings.TopMetrics.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingstopmetricssettingswithmetrics","title":"fn MetricAggregationWithSettings.TopMetrics.settings.withMetrics","text":"<pre><code>MetricAggregationWithSettings.TopMetrics.settings.withMetrics(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingstopmetricssettingswithmetricsmixin","title":"fn MetricAggregationWithSettings.TopMetrics.settings.withMetricsMixin","text":"<pre><code>MetricAggregationWithSettings.TopMetrics.settings.withMetricsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingstopmetricssettingswithorder","title":"fn MetricAggregationWithSettings.TopMetrics.settings.withOrder","text":"<pre><code>MetricAggregationWithSettings.TopMetrics.settings.withOrder(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingstopmetricssettingswithorderby","title":"fn MetricAggregationWithSettings.TopMetrics.settings.withOrderBy","text":"<pre><code>MetricAggregationWithSettings.TopMetrics.settings.withOrderBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsuniquecount","title":"obj MetricAggregationWithSettings.UniqueCount","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsuniquecountwithfield","title":"fn MetricAggregationWithSettings.UniqueCount.withField","text":"<pre><code>MetricAggregationWithSettings.UniqueCount.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsuniquecountwithhide","title":"fn MetricAggregationWithSettings.UniqueCount.withHide","text":"<pre><code>MetricAggregationWithSettings.UniqueCount.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsuniquecountwithid","title":"fn MetricAggregationWithSettings.UniqueCount.withId","text":"<pre><code>MetricAggregationWithSettings.UniqueCount.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsuniquecountwithsettings","title":"fn MetricAggregationWithSettings.UniqueCount.withSettings","text":"<pre><code>MetricAggregationWithSettings.UniqueCount.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsuniquecountwithsettingsmixin","title":"fn MetricAggregationWithSettings.UniqueCount.withSettingsMixin","text":"<pre><code>MetricAggregationWithSettings.UniqueCount.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsuniquecountwithtype","title":"fn MetricAggregationWithSettings.UniqueCount.withType","text":"<pre><code>MetricAggregationWithSettings.UniqueCount.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-metricaggregationwithsettingsuniquecountsettings","title":"obj MetricAggregationWithSettings.UniqueCount.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsuniquecountsettingswithmissing","title":"fn MetricAggregationWithSettings.UniqueCount.settings.withMissing","text":"<pre><code>MetricAggregationWithSettings.UniqueCount.settings.withMissing(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-metricaggregationwithsettingsuniquecountsettingswithprecisionthreshold","title":"fn MetricAggregationWithSettings.UniqueCount.settings.withPrecisionThreshold","text":"<pre><code>MetricAggregationWithSettings.UniqueCount.settings.withPrecisionThreshold(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-pipelinemetricaggregation","title":"obj PipelineMetricAggregation","text":""},{"location":"API/query/elasticsearch/metrics/index.html#obj-pipelinemetricaggregationbucketscript","title":"obj PipelineMetricAggregation.BucketScript","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationbucketscriptwithhide","title":"fn PipelineMetricAggregation.BucketScript.withHide","text":"<pre><code>PipelineMetricAggregation.BucketScript.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationbucketscriptwithid","title":"fn PipelineMetricAggregation.BucketScript.withId","text":"<pre><code>PipelineMetricAggregation.BucketScript.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationbucketscriptwithpipelinevariables","title":"fn PipelineMetricAggregation.BucketScript.withPipelineVariables","text":"<pre><code>PipelineMetricAggregation.BucketScript.withPipelineVariables(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationbucketscriptwithpipelinevariablesmixin","title":"fn PipelineMetricAggregation.BucketScript.withPipelineVariablesMixin","text":"<pre><code>PipelineMetricAggregation.BucketScript.withPipelineVariablesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationbucketscriptwithsettings","title":"fn PipelineMetricAggregation.BucketScript.withSettings","text":"<pre><code>PipelineMetricAggregation.BucketScript.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationbucketscriptwithsettingsmixin","title":"fn PipelineMetricAggregation.BucketScript.withSettingsMixin","text":"<pre><code>PipelineMetricAggregation.BucketScript.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationbucketscriptwithtype","title":"fn PipelineMetricAggregation.BucketScript.withType","text":"<pre><code>PipelineMetricAggregation.BucketScript.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-pipelinemetricaggregationbucketscriptsettings","title":"obj PipelineMetricAggregation.BucketScript.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationbucketscriptsettingswithscript","title":"fn PipelineMetricAggregation.BucketScript.settings.withScript","text":"<pre><code>PipelineMetricAggregation.BucketScript.settings.withScript(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationbucketscriptsettingswithscriptmixin","title":"fn PipelineMetricAggregation.BucketScript.settings.withScriptMixin","text":"<pre><code>PipelineMetricAggregation.BucketScript.settings.withScriptMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>,<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-pipelinemetricaggregationbucketscriptsettingsscript","title":"obj PipelineMetricAggregation.BucketScript.settings.script","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationbucketscriptsettingsscriptwithinline","title":"# fn PipelineMetricAggregation.BucketScript.settings.script.withInline","text":"<pre><code>PipelineMetricAggregation.BucketScript.settings.script.withInline(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-pipelinemetricaggregationcumulativesum","title":"obj PipelineMetricAggregation.CumulativeSum","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationcumulativesumwithfield","title":"fn PipelineMetricAggregation.CumulativeSum.withField","text":"<pre><code>PipelineMetricAggregation.CumulativeSum.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationcumulativesumwithhide","title":"fn PipelineMetricAggregation.CumulativeSum.withHide","text":"<pre><code>PipelineMetricAggregation.CumulativeSum.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationcumulativesumwithid","title":"fn PipelineMetricAggregation.CumulativeSum.withId","text":"<pre><code>PipelineMetricAggregation.CumulativeSum.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationcumulativesumwithpipelineagg","title":"fn PipelineMetricAggregation.CumulativeSum.withPipelineAgg","text":"<pre><code>PipelineMetricAggregation.CumulativeSum.withPipelineAgg(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationcumulativesumwithsettings","title":"fn PipelineMetricAggregation.CumulativeSum.withSettings","text":"<pre><code>PipelineMetricAggregation.CumulativeSum.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationcumulativesumwithsettingsmixin","title":"fn PipelineMetricAggregation.CumulativeSum.withSettingsMixin","text":"<pre><code>PipelineMetricAggregation.CumulativeSum.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationcumulativesumwithtype","title":"fn PipelineMetricAggregation.CumulativeSum.withType","text":"<pre><code>PipelineMetricAggregation.CumulativeSum.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-pipelinemetricaggregationcumulativesumsettings","title":"obj PipelineMetricAggregation.CumulativeSum.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationcumulativesumsettingswithformat","title":"fn PipelineMetricAggregation.CumulativeSum.settings.withFormat","text":"<pre><code>PipelineMetricAggregation.CumulativeSum.settings.withFormat(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-pipelinemetricaggregationderivative","title":"obj PipelineMetricAggregation.Derivative","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationderivativewithfield","title":"fn PipelineMetricAggregation.Derivative.withField","text":"<pre><code>PipelineMetricAggregation.Derivative.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationderivativewithhide","title":"fn PipelineMetricAggregation.Derivative.withHide","text":"<pre><code>PipelineMetricAggregation.Derivative.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationderivativewithid","title":"fn PipelineMetricAggregation.Derivative.withId","text":"<pre><code>PipelineMetricAggregation.Derivative.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationderivativewithpipelineagg","title":"fn PipelineMetricAggregation.Derivative.withPipelineAgg","text":"<pre><code>PipelineMetricAggregation.Derivative.withPipelineAgg(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationderivativewithsettings","title":"fn PipelineMetricAggregation.Derivative.withSettings","text":"<pre><code>PipelineMetricAggregation.Derivative.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationderivativewithsettingsmixin","title":"fn PipelineMetricAggregation.Derivative.withSettingsMixin","text":"<pre><code>PipelineMetricAggregation.Derivative.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationderivativewithtype","title":"fn PipelineMetricAggregation.Derivative.withType","text":"<pre><code>PipelineMetricAggregation.Derivative.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-pipelinemetricaggregationderivativesettings","title":"obj PipelineMetricAggregation.Derivative.settings","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationderivativesettingswithunit","title":"fn PipelineMetricAggregation.Derivative.settings.withUnit","text":"<pre><code>PipelineMetricAggregation.Derivative.settings.withUnit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#obj-pipelinemetricaggregationmovingaverage","title":"obj PipelineMetricAggregation.MovingAverage","text":""},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationmovingaveragewithfield","title":"fn PipelineMetricAggregation.MovingAverage.withField","text":"<pre><code>PipelineMetricAggregation.MovingAverage.withField(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationmovingaveragewithhide","title":"fn PipelineMetricAggregation.MovingAverage.withHide","text":"<pre><code>PipelineMetricAggregation.MovingAverage.withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationmovingaveragewithid","title":"fn PipelineMetricAggregation.MovingAverage.withId","text":"<pre><code>PipelineMetricAggregation.MovingAverage.withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationmovingaveragewithpipelineagg","title":"fn PipelineMetricAggregation.MovingAverage.withPipelineAgg","text":"<pre><code>PipelineMetricAggregation.MovingAverage.withPipelineAgg(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationmovingaveragewithsettings","title":"fn PipelineMetricAggregation.MovingAverage.withSettings","text":"<pre><code>PipelineMetricAggregation.MovingAverage.withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationmovingaveragewithsettingsmixin","title":"fn PipelineMetricAggregation.MovingAverage.withSettingsMixin","text":"<pre><code>PipelineMetricAggregation.MovingAverage.withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/index.html#fn-pipelinemetricaggregationmovingaveragewithtype","title":"fn PipelineMetricAggregation.MovingAverage.withType","text":"<pre><code>PipelineMetricAggregation.MovingAverage.withType()\n</code></pre>"},{"location":"API/query/elasticsearch/metrics/MetricAggregationWithSettings/BucketScript/pipelineVariables.html","title":"pipelineVariables","text":""},{"location":"API/query/elasticsearch/metrics/MetricAggregationWithSettings/BucketScript/pipelineVariables.html#index","title":"Index","text":"<ul> <li><code>fn withName(value)</code></li> <li><code>fn withPipelineAgg(value)</code></li> </ul>"},{"location":"API/query/elasticsearch/metrics/MetricAggregationWithSettings/BucketScript/pipelineVariables.html#fields","title":"Fields","text":""},{"location":"API/query/elasticsearch/metrics/MetricAggregationWithSettings/BucketScript/pipelineVariables.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/MetricAggregationWithSettings/BucketScript/pipelineVariables.html#fn-withpipelineagg","title":"fn withPipelineAgg","text":"<pre><code>withPipelineAgg(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/PipelineMetricAggregation/BucketScript/pipelineVariables.html","title":"pipelineVariables","text":""},{"location":"API/query/elasticsearch/metrics/PipelineMetricAggregation/BucketScript/pipelineVariables.html#index","title":"Index","text":"<ul> <li><code>fn withName(value)</code></li> <li><code>fn withPipelineAgg(value)</code></li> </ul>"},{"location":"API/query/elasticsearch/metrics/PipelineMetricAggregation/BucketScript/pipelineVariables.html#fields","title":"Fields","text":""},{"location":"API/query/elasticsearch/metrics/PipelineMetricAggregation/BucketScript/pipelineVariables.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/elasticsearch/metrics/PipelineMetricAggregation/BucketScript/pipelineVariables.html#fn-withpipelineagg","title":"fn withPipelineAgg","text":"<pre><code>withPipelineAgg(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/expr/index.html","title":"expr","text":"<p>Server Side Expression operations for grafonnet.alerting.ruleGroup.rule</p>"},{"location":"API/query/expr/index.html#subpackages","title":"Subpackages","text":"<ul> <li>TypeClassicConditions</li> <li>TypeMath</li> <li>TypeReduce</li> <li>TypeResample</li> <li>TypeSql</li> <li>TypeThreshold</li> </ul>"},{"location":"API/query/expr/TypeMath.html","title":"TypeMath","text":"<p>grafonnet.query.expr.TypeMath</p>"},{"location":"API/query/expr/TypeMath.html#index","title":"Index","text":"<ul> <li><code>fn withDatasource(value)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withExpression(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withIntervalMs(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withResultAssertions(value)</code></li> <li><code>fn withResultAssertionsMixin(value)</code></li> <li><code>fn withTimeRange(value)</code></li> <li><code>fn withTimeRangeMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj datasource</code><ul> <li><code>fn withApiVersion(value)</code></li> <li><code>fn withType()</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj resultAssertions</code><ul> <li><code>fn withMaxFrames(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withTypeVersion(value)</code></li> <li><code>fn withTypeVersionMixin(value)</code></li> </ul> </li> <li><code>obj timeRange</code><ul> <li><code>fn withFrom(value=\"now-6h\")</code></li> <li><code>fn withTo(value=\"now\")</code></li> </ul> </li> </ul>"},{"location":"API/query/expr/TypeMath.html#fields","title":"Fields","text":""},{"location":"API/query/expr/TypeMath.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The datasource</p>"},{"location":"API/query/expr/TypeMath.html#fn-withdatasourcemixin","title":"fn withDatasourceMixin","text":"<pre><code>withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The datasource</p>"},{"location":"API/query/expr/TypeMath.html#fn-withexpression","title":"fn withExpression","text":"<pre><code>withExpression(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>General math expression</p>"},{"location":"API/query/expr/TypeMath.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>true if query is disabled (ie should not be returned to the dashboard) NOTE: this does not always imply that the query should not be executed since the results from a hidden query may be used as the input to other queries (SSE etc)</p>"},{"location":"API/query/expr/TypeMath.html#fn-withintervalms","title":"fn withIntervalMs","text":"<pre><code>withIntervalMs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Interval is the suggested duration between time points in a time series query. NOTE: the values for intervalMs is not saved in the query model.  It is typically calculated from the interval required to fill a pixels in the visualization</p>"},{"location":"API/query/expr/TypeMath.html#fn-withmaxdatapoints","title":"fn withMaxDataPoints","text":"<pre><code>withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>MaxDataPoints is the maximum number of data points that should be returned from a time series query. NOTE: the values for maxDataPoints is not saved in the query model.  It is typically calculated from the number of pixels visible in a visualization</p>"},{"location":"API/query/expr/TypeMath.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>QueryType is an optional identifier for the type of query. It can be used to distinguish different types of queries.</p>"},{"location":"API/query/expr/TypeMath.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>RefID is the unique identifier of the query, set by the frontend call.</p>"},{"location":"API/query/expr/TypeMath.html#fn-withresultassertions","title":"fn withResultAssertions","text":"<pre><code>withResultAssertions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Optionally define expected query result behavior</p>"},{"location":"API/query/expr/TypeMath.html#fn-withresultassertionsmixin","title":"fn withResultAssertionsMixin","text":"<pre><code>withResultAssertionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Optionally define expected query result behavior</p>"},{"location":"API/query/expr/TypeMath.html#fn-withtimerange","title":"fn withTimeRange","text":"<pre><code>withTimeRange(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TimeRange represents the query range NOTE: unlike generic /ds/query, we can now send explicit time values in each query NOTE: the values for timeRange are not saved in a dashboard, they are constructed on the fly</p>"},{"location":"API/query/expr/TypeMath.html#fn-withtimerangemixin","title":"fn withTimeRangeMixin","text":"<pre><code>withTimeRangeMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TimeRange represents the query range NOTE: unlike generic /ds/query, we can now send explicit time values in each query NOTE: the values for timeRange are not saved in a dashboard, they are constructed on the fly</p>"},{"location":"API/query/expr/TypeMath.html#fn-withtype","title":"fn withType","text":"<pre><code>withType()\n</code></pre>"},{"location":"API/query/expr/TypeMath.html#obj-datasource","title":"obj datasource","text":""},{"location":"API/query/expr/TypeMath.html#fn-datasourcewithapiversion","title":"fn datasource.withApiVersion","text":"<pre><code>datasource.withApiVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The apiserver version</p>"},{"location":"API/query/expr/TypeMath.html#fn-datasourcewithtype","title":"fn datasource.withType","text":"<pre><code>datasource.withType()\n</code></pre> <p>The datasource plugin type</p>"},{"location":"API/query/expr/TypeMath.html#fn-datasourcewithuid","title":"fn datasource.withUid","text":"<pre><code>datasource.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Datasource UID (NOTE: name in k8s)</p>"},{"location":"API/query/expr/TypeMath.html#obj-resultassertions","title":"obj resultAssertions","text":""},{"location":"API/query/expr/TypeMath.html#fn-resultassertionswithmaxframes","title":"fn resultAssertions.withMaxFrames","text":"<pre><code>resultAssertions.withMaxFrames(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Maximum frame count</p>"},{"location":"API/query/expr/TypeMath.html#fn-resultassertionswithtype","title":"fn resultAssertions.withType","text":"<pre><code>resultAssertions.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"\"</code>, <code>\"timeseries-wide\"</code>, <code>\"timeseries-long\"</code>, <code>\"timeseries-many\"</code>, <code>\"timeseries-multi\"</code>, <code>\"directory-listing\"</code>, <code>\"table\"</code>, <code>\"numeric-wide\"</code>, <code>\"numeric-multi\"</code>, <code>\"numeric-long\"</code>, <code>\"log-lines\"</code></li> </ul> </li> </ul> <p>Type asserts that the frame matches a known type structure. Possible enum values:  - <code>\"\"</code>   - <code>\"timeseries-wide\"</code>   - <code>\"timeseries-long\"</code>   - <code>\"timeseries-many\"</code>   - <code>\"timeseries-multi\"</code>   - <code>\"directory-listing\"</code>   - <code>\"table\"</code>   - <code>\"numeric-wide\"</code>   - <code>\"numeric-multi\"</code>   - <code>\"numeric-long\"</code>   - <code>\"log-lines\"</code> </p>"},{"location":"API/query/expr/TypeMath.html#fn-resultassertionswithtypeversion","title":"fn resultAssertions.withTypeVersion","text":"<pre><code>resultAssertions.withTypeVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane contract documentation https://grafana.github.io/dataplane/contract/.</p>"},{"location":"API/query/expr/TypeMath.html#fn-resultassertionswithtypeversionmixin","title":"fn resultAssertions.withTypeVersionMixin","text":"<pre><code>resultAssertions.withTypeVersionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane contract documentation https://grafana.github.io/dataplane/contract/.</p>"},{"location":"API/query/expr/TypeMath.html#obj-timerange","title":"obj timeRange","text":""},{"location":"API/query/expr/TypeMath.html#fn-timerangewithfrom","title":"fn timeRange.withFrom","text":"<pre><code>timeRange.withFrom(value=\"now-6h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now-6h\"</code></li> </ul> </li> </ul> <p>From is the start time of the query.</p>"},{"location":"API/query/expr/TypeMath.html#fn-timerangewithto","title":"fn timeRange.withTo","text":"<pre><code>timeRange.withTo(value=\"now\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now\"</code></li> </ul> </li> </ul> <p>To is the end time of the query.</p>"},{"location":"API/query/expr/TypeReduce.html","title":"TypeReduce","text":"<p>grafonnet.query.expr.TypeReduce</p>"},{"location":"API/query/expr/TypeReduce.html#index","title":"Index","text":"<ul> <li><code>fn withDatasource(value)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withExpression(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withIntervalMs(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withReducer(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withResultAssertions(value)</code></li> <li><code>fn withResultAssertionsMixin(value)</code></li> <li><code>fn withSettings(value)</code></li> <li><code>fn withSettingsMixin(value)</code></li> <li><code>fn withTimeRange(value)</code></li> <li><code>fn withTimeRangeMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj datasource</code><ul> <li><code>fn withApiVersion(value)</code></li> <li><code>fn withType()</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj resultAssertions</code><ul> <li><code>fn withMaxFrames(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withTypeVersion(value)</code></li> <li><code>fn withTypeVersionMixin(value)</code></li> </ul> </li> <li><code>obj settings</code><ul> <li><code>fn withMode(value)</code></li> <li><code>fn withReplaceWithValue(value)</code></li> </ul> </li> <li><code>obj timeRange</code><ul> <li><code>fn withFrom(value=\"now-6h\")</code></li> <li><code>fn withTo(value=\"now\")</code></li> </ul> </li> </ul>"},{"location":"API/query/expr/TypeReduce.html#fields","title":"Fields","text":""},{"location":"API/query/expr/TypeReduce.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The datasource</p>"},{"location":"API/query/expr/TypeReduce.html#fn-withdatasourcemixin","title":"fn withDatasourceMixin","text":"<pre><code>withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The datasource</p>"},{"location":"API/query/expr/TypeReduce.html#fn-withexpression","title":"fn withExpression","text":"<pre><code>withExpression(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Reference to single query result</p>"},{"location":"API/query/expr/TypeReduce.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>true if query is disabled (ie should not be returned to the dashboard) NOTE: this does not always imply that the query should not be executed since the results from a hidden query may be used as the input to other queries (SSE etc)</p>"},{"location":"API/query/expr/TypeReduce.html#fn-withintervalms","title":"fn withIntervalMs","text":"<pre><code>withIntervalMs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Interval is the suggested duration between time points in a time series query. NOTE: the values for intervalMs is not saved in the query model.  It is typically calculated from the interval required to fill a pixels in the visualization</p>"},{"location":"API/query/expr/TypeReduce.html#fn-withmaxdatapoints","title":"fn withMaxDataPoints","text":"<pre><code>withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>MaxDataPoints is the maximum number of data points that should be returned from a time series query. NOTE: the values for maxDataPoints is not saved in the query model.  It is typically calculated from the number of pixels visible in a visualization</p>"},{"location":"API/query/expr/TypeReduce.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>QueryType is an optional identifier for the type of query. It can be used to distinguish different types of queries.</p>"},{"location":"API/query/expr/TypeReduce.html#fn-withreducer","title":"fn withReducer","text":"<pre><code>withReducer(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"sum\"</code>, <code>\"mean\"</code>, <code>\"min\"</code>, <code>\"max\"</code>, <code>\"count\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>The reducer Possible enum values:  - <code>\"sum\"</code>   - <code>\"mean\"</code>   - <code>\"min\"</code>   - <code>\"max\"</code>   - <code>\"count\"</code>   - <code>\"last\"</code> </p>"},{"location":"API/query/expr/TypeReduce.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>RefID is the unique identifier of the query, set by the frontend call.</p>"},{"location":"API/query/expr/TypeReduce.html#fn-withresultassertions","title":"fn withResultAssertions","text":"<pre><code>withResultAssertions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Optionally define expected query result behavior</p>"},{"location":"API/query/expr/TypeReduce.html#fn-withresultassertionsmixin","title":"fn withResultAssertionsMixin","text":"<pre><code>withResultAssertionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Optionally define expected query result behavior</p>"},{"location":"API/query/expr/TypeReduce.html#fn-withsettings","title":"fn withSettings","text":"<pre><code>withSettings(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Reducer Options</p>"},{"location":"API/query/expr/TypeReduce.html#fn-withsettingsmixin","title":"fn withSettingsMixin","text":"<pre><code>withSettingsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Reducer Options</p>"},{"location":"API/query/expr/TypeReduce.html#fn-withtimerange","title":"fn withTimeRange","text":"<pre><code>withTimeRange(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TimeRange represents the query range NOTE: unlike generic /ds/query, we can now send explicit time values in each query NOTE: the values for timeRange are not saved in a dashboard, they are constructed on the fly</p>"},{"location":"API/query/expr/TypeReduce.html#fn-withtimerangemixin","title":"fn withTimeRangeMixin","text":"<pre><code>withTimeRangeMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TimeRange represents the query range NOTE: unlike generic /ds/query, we can now send explicit time values in each query NOTE: the values for timeRange are not saved in a dashboard, they are constructed on the fly</p>"},{"location":"API/query/expr/TypeReduce.html#fn-withtype","title":"fn withType","text":"<pre><code>withType()\n</code></pre>"},{"location":"API/query/expr/TypeReduce.html#obj-datasource","title":"obj datasource","text":""},{"location":"API/query/expr/TypeReduce.html#fn-datasourcewithapiversion","title":"fn datasource.withApiVersion","text":"<pre><code>datasource.withApiVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The apiserver version</p>"},{"location":"API/query/expr/TypeReduce.html#fn-datasourcewithtype","title":"fn datasource.withType","text":"<pre><code>datasource.withType()\n</code></pre> <p>The datasource plugin type</p>"},{"location":"API/query/expr/TypeReduce.html#fn-datasourcewithuid","title":"fn datasource.withUid","text":"<pre><code>datasource.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Datasource UID (NOTE: name in k8s)</p>"},{"location":"API/query/expr/TypeReduce.html#obj-resultassertions","title":"obj resultAssertions","text":""},{"location":"API/query/expr/TypeReduce.html#fn-resultassertionswithmaxframes","title":"fn resultAssertions.withMaxFrames","text":"<pre><code>resultAssertions.withMaxFrames(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Maximum frame count</p>"},{"location":"API/query/expr/TypeReduce.html#fn-resultassertionswithtype","title":"fn resultAssertions.withType","text":"<pre><code>resultAssertions.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"\"</code>, <code>\"timeseries-wide\"</code>, <code>\"timeseries-long\"</code>, <code>\"timeseries-many\"</code>, <code>\"timeseries-multi\"</code>, <code>\"directory-listing\"</code>, <code>\"table\"</code>, <code>\"numeric-wide\"</code>, <code>\"numeric-multi\"</code>, <code>\"numeric-long\"</code>, <code>\"log-lines\"</code></li> </ul> </li> </ul> <p>Type asserts that the frame matches a known type structure. Possible enum values:  - <code>\"\"</code>   - <code>\"timeseries-wide\"</code>   - <code>\"timeseries-long\"</code>   - <code>\"timeseries-many\"</code>   - <code>\"timeseries-multi\"</code>   - <code>\"directory-listing\"</code>   - <code>\"table\"</code>   - <code>\"numeric-wide\"</code>   - <code>\"numeric-multi\"</code>   - <code>\"numeric-long\"</code>   - <code>\"log-lines\"</code> </p>"},{"location":"API/query/expr/TypeReduce.html#fn-resultassertionswithtypeversion","title":"fn resultAssertions.withTypeVersion","text":"<pre><code>resultAssertions.withTypeVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane contract documentation https://grafana.github.io/dataplane/contract/.</p>"},{"location":"API/query/expr/TypeReduce.html#fn-resultassertionswithtypeversionmixin","title":"fn resultAssertions.withTypeVersionMixin","text":"<pre><code>resultAssertions.withTypeVersionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane contract documentation https://grafana.github.io/dataplane/contract/.</p>"},{"location":"API/query/expr/TypeReduce.html#obj-settings","title":"obj settings","text":""},{"location":"API/query/expr/TypeReduce.html#fn-settingswithmode","title":"fn settings.withMode","text":"<pre><code>settings.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"dropNN\"</code>, <code>\"replaceNN\"</code></li> </ul> </li> </ul> <p>Non-number reduce behavior Possible enum values:  - <code>\"dropNN\"</code> Drop non-numbers  - <code>\"replaceNN\"</code> Replace non-numbers</p>"},{"location":"API/query/expr/TypeReduce.html#fn-settingswithreplacewithvalue","title":"fn settings.withReplaceWithValue","text":"<pre><code>settings.withReplaceWithValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Only valid when mode is replace</p>"},{"location":"API/query/expr/TypeReduce.html#obj-timerange","title":"obj timeRange","text":""},{"location":"API/query/expr/TypeReduce.html#fn-timerangewithfrom","title":"fn timeRange.withFrom","text":"<pre><code>timeRange.withFrom(value=\"now-6h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now-6h\"</code></li> </ul> </li> </ul> <p>From is the start time of the query.</p>"},{"location":"API/query/expr/TypeReduce.html#fn-timerangewithto","title":"fn timeRange.withTo","text":"<pre><code>timeRange.withTo(value=\"now\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now\"</code></li> </ul> </li> </ul> <p>To is the end time of the query.</p>"},{"location":"API/query/expr/TypeResample.html","title":"TypeResample","text":"<p>grafonnet.query.expr.TypeResample</p>"},{"location":"API/query/expr/TypeResample.html#index","title":"Index","text":"<ul> <li><code>fn withDatasource(value)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withDownsampler(value)</code></li> <li><code>fn withExpression(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withIntervalMs(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withResultAssertions(value)</code></li> <li><code>fn withResultAssertionsMixin(value)</code></li> <li><code>fn withTimeRange(value)</code></li> <li><code>fn withTimeRangeMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>fn withUpsampler(value)</code></li> <li><code>fn withWindow(value)</code></li> <li><code>obj datasource</code><ul> <li><code>fn withApiVersion(value)</code></li> <li><code>fn withType()</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj resultAssertions</code><ul> <li><code>fn withMaxFrames(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withTypeVersion(value)</code></li> <li><code>fn withTypeVersionMixin(value)</code></li> </ul> </li> <li><code>obj timeRange</code><ul> <li><code>fn withFrom(value=\"now-6h\")</code></li> <li><code>fn withTo(value=\"now\")</code></li> </ul> </li> </ul>"},{"location":"API/query/expr/TypeResample.html#fields","title":"Fields","text":""},{"location":"API/query/expr/TypeResample.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The datasource</p>"},{"location":"API/query/expr/TypeResample.html#fn-withdatasourcemixin","title":"fn withDatasourceMixin","text":"<pre><code>withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The datasource</p>"},{"location":"API/query/expr/TypeResample.html#fn-withdownsampler","title":"fn withDownsampler","text":"<pre><code>withDownsampler(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"sum\"</code>, <code>\"mean\"</code>, <code>\"min\"</code>, <code>\"max\"</code>, <code>\"count\"</code>, <code>\"last\"</code></li> </ul> </li> </ul> <p>The downsample function Possible enum values:  - <code>\"sum\"</code>   - <code>\"mean\"</code>   - <code>\"min\"</code>   - <code>\"max\"</code>   - <code>\"count\"</code>   - <code>\"last\"</code> </p>"},{"location":"API/query/expr/TypeResample.html#fn-withexpression","title":"fn withExpression","text":"<pre><code>withExpression(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The math expression</p>"},{"location":"API/query/expr/TypeResample.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>true if query is disabled (ie should not be returned to the dashboard) NOTE: this does not always imply that the query should not be executed since the results from a hidden query may be used as the input to other queries (SSE etc)</p>"},{"location":"API/query/expr/TypeResample.html#fn-withintervalms","title":"fn withIntervalMs","text":"<pre><code>withIntervalMs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Interval is the suggested duration between time points in a time series query. NOTE: the values for intervalMs is not saved in the query model.  It is typically calculated from the interval required to fill a pixels in the visualization</p>"},{"location":"API/query/expr/TypeResample.html#fn-withmaxdatapoints","title":"fn withMaxDataPoints","text":"<pre><code>withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>MaxDataPoints is the maximum number of data points that should be returned from a time series query. NOTE: the values for maxDataPoints is not saved in the query model.  It is typically calculated from the number of pixels visible in a visualization</p>"},{"location":"API/query/expr/TypeResample.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>QueryType is an optional identifier for the type of query. It can be used to distinguish different types of queries.</p>"},{"location":"API/query/expr/TypeResample.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>RefID is the unique identifier of the query, set by the frontend call.</p>"},{"location":"API/query/expr/TypeResample.html#fn-withresultassertions","title":"fn withResultAssertions","text":"<pre><code>withResultAssertions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Optionally define expected query result behavior</p>"},{"location":"API/query/expr/TypeResample.html#fn-withresultassertionsmixin","title":"fn withResultAssertionsMixin","text":"<pre><code>withResultAssertionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Optionally define expected query result behavior</p>"},{"location":"API/query/expr/TypeResample.html#fn-withtimerange","title":"fn withTimeRange","text":"<pre><code>withTimeRange(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TimeRange represents the query range NOTE: unlike generic /ds/query, we can now send explicit time values in each query NOTE: the values for timeRange are not saved in a dashboard, they are constructed on the fly</p>"},{"location":"API/query/expr/TypeResample.html#fn-withtimerangemixin","title":"fn withTimeRangeMixin","text":"<pre><code>withTimeRangeMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TimeRange represents the query range NOTE: unlike generic /ds/query, we can now send explicit time values in each query NOTE: the values for timeRange are not saved in a dashboard, they are constructed on the fly</p>"},{"location":"API/query/expr/TypeResample.html#fn-withtype","title":"fn withType","text":"<pre><code>withType()\n</code></pre>"},{"location":"API/query/expr/TypeResample.html#fn-withupsampler","title":"fn withUpsampler","text":"<pre><code>withUpsampler(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"pad\"</code>, <code>\"backfilling\"</code>, <code>\"fillna\"</code></li> </ul> </li> </ul> <p>The upsample function Possible enum values:  - <code>\"pad\"</code> Use the last seen value  - <code>\"backfilling\"</code> backfill  - <code>\"fillna\"</code> Do not fill values (nill)</p>"},{"location":"API/query/expr/TypeResample.html#fn-withwindow","title":"fn withWindow","text":"<pre><code>withWindow(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The time duration</p>"},{"location":"API/query/expr/TypeResample.html#obj-datasource","title":"obj datasource","text":""},{"location":"API/query/expr/TypeResample.html#fn-datasourcewithapiversion","title":"fn datasource.withApiVersion","text":"<pre><code>datasource.withApiVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The apiserver version</p>"},{"location":"API/query/expr/TypeResample.html#fn-datasourcewithtype","title":"fn datasource.withType","text":"<pre><code>datasource.withType()\n</code></pre> <p>The datasource plugin type</p>"},{"location":"API/query/expr/TypeResample.html#fn-datasourcewithuid","title":"fn datasource.withUid","text":"<pre><code>datasource.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Datasource UID (NOTE: name in k8s)</p>"},{"location":"API/query/expr/TypeResample.html#obj-resultassertions","title":"obj resultAssertions","text":""},{"location":"API/query/expr/TypeResample.html#fn-resultassertionswithmaxframes","title":"fn resultAssertions.withMaxFrames","text":"<pre><code>resultAssertions.withMaxFrames(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Maximum frame count</p>"},{"location":"API/query/expr/TypeResample.html#fn-resultassertionswithtype","title":"fn resultAssertions.withType","text":"<pre><code>resultAssertions.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"\"</code>, <code>\"timeseries-wide\"</code>, <code>\"timeseries-long\"</code>, <code>\"timeseries-many\"</code>, <code>\"timeseries-multi\"</code>, <code>\"directory-listing\"</code>, <code>\"table\"</code>, <code>\"numeric-wide\"</code>, <code>\"numeric-multi\"</code>, <code>\"numeric-long\"</code>, <code>\"log-lines\"</code></li> </ul> </li> </ul> <p>Type asserts that the frame matches a known type structure. Possible enum values:  - <code>\"\"</code>   - <code>\"timeseries-wide\"</code>   - <code>\"timeseries-long\"</code>   - <code>\"timeseries-many\"</code>   - <code>\"timeseries-multi\"</code>   - <code>\"directory-listing\"</code>   - <code>\"table\"</code>   - <code>\"numeric-wide\"</code>   - <code>\"numeric-multi\"</code>   - <code>\"numeric-long\"</code>   - <code>\"log-lines\"</code> </p>"},{"location":"API/query/expr/TypeResample.html#fn-resultassertionswithtypeversion","title":"fn resultAssertions.withTypeVersion","text":"<pre><code>resultAssertions.withTypeVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane contract documentation https://grafana.github.io/dataplane/contract/.</p>"},{"location":"API/query/expr/TypeResample.html#fn-resultassertionswithtypeversionmixin","title":"fn resultAssertions.withTypeVersionMixin","text":"<pre><code>resultAssertions.withTypeVersionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane contract documentation https://grafana.github.io/dataplane/contract/.</p>"},{"location":"API/query/expr/TypeResample.html#obj-timerange","title":"obj timeRange","text":""},{"location":"API/query/expr/TypeResample.html#fn-timerangewithfrom","title":"fn timeRange.withFrom","text":"<pre><code>timeRange.withFrom(value=\"now-6h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now-6h\"</code></li> </ul> </li> </ul> <p>From is the start time of the query.</p>"},{"location":"API/query/expr/TypeResample.html#fn-timerangewithto","title":"fn timeRange.withTo","text":"<pre><code>timeRange.withTo(value=\"now\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now\"</code></li> </ul> </li> </ul> <p>To is the end time of the query.</p>"},{"location":"API/query/expr/TypeSql.html","title":"TypeSql","text":"<p>grafonnet.query.expr.TypeSql</p>"},{"location":"API/query/expr/TypeSql.html#index","title":"Index","text":"<ul> <li><code>fn withDatasource(value)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withExpression(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withIntervalMs(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withResultAssertions(value)</code></li> <li><code>fn withResultAssertionsMixin(value)</code></li> <li><code>fn withTimeRange(value)</code></li> <li><code>fn withTimeRangeMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj datasource</code><ul> <li><code>fn withApiVersion(value)</code></li> <li><code>fn withType()</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj resultAssertions</code><ul> <li><code>fn withMaxFrames(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withTypeVersion(value)</code></li> <li><code>fn withTypeVersionMixin(value)</code></li> </ul> </li> <li><code>obj timeRange</code><ul> <li><code>fn withFrom(value=\"now-6h\")</code></li> <li><code>fn withTo(value=\"now\")</code></li> </ul> </li> </ul>"},{"location":"API/query/expr/TypeSql.html#fields","title":"Fields","text":""},{"location":"API/query/expr/TypeSql.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The datasource</p>"},{"location":"API/query/expr/TypeSql.html#fn-withdatasourcemixin","title":"fn withDatasourceMixin","text":"<pre><code>withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The datasource</p>"},{"location":"API/query/expr/TypeSql.html#fn-withexpression","title":"fn withExpression","text":"<pre><code>withExpression(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/expr/TypeSql.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>true if query is disabled (ie should not be returned to the dashboard) NOTE: this does not always imply that the query should not be executed since the results from a hidden query may be used as the input to other queries (SSE etc)</p>"},{"location":"API/query/expr/TypeSql.html#fn-withintervalms","title":"fn withIntervalMs","text":"<pre><code>withIntervalMs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Interval is the suggested duration between time points in a time series query. NOTE: the values for intervalMs is not saved in the query model.  It is typically calculated from the interval required to fill a pixels in the visualization</p>"},{"location":"API/query/expr/TypeSql.html#fn-withmaxdatapoints","title":"fn withMaxDataPoints","text":"<pre><code>withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>MaxDataPoints is the maximum number of data points that should be returned from a time series query. NOTE: the values for maxDataPoints is not saved in the query model.  It is typically calculated from the number of pixels visible in a visualization</p>"},{"location":"API/query/expr/TypeSql.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>QueryType is an optional identifier for the type of query. It can be used to distinguish different types of queries.</p>"},{"location":"API/query/expr/TypeSql.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>RefID is the unique identifier of the query, set by the frontend call.</p>"},{"location":"API/query/expr/TypeSql.html#fn-withresultassertions","title":"fn withResultAssertions","text":"<pre><code>withResultAssertions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Optionally define expected query result behavior</p>"},{"location":"API/query/expr/TypeSql.html#fn-withresultassertionsmixin","title":"fn withResultAssertionsMixin","text":"<pre><code>withResultAssertionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Optionally define expected query result behavior</p>"},{"location":"API/query/expr/TypeSql.html#fn-withtimerange","title":"fn withTimeRange","text":"<pre><code>withTimeRange(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TimeRange represents the query range NOTE: unlike generic /ds/query, we can now send explicit time values in each query NOTE: the values for timeRange are not saved in a dashboard, they are constructed on the fly</p>"},{"location":"API/query/expr/TypeSql.html#fn-withtimerangemixin","title":"fn withTimeRangeMixin","text":"<pre><code>withTimeRangeMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TimeRange represents the query range NOTE: unlike generic /ds/query, we can now send explicit time values in each query NOTE: the values for timeRange are not saved in a dashboard, they are constructed on the fly</p>"},{"location":"API/query/expr/TypeSql.html#fn-withtype","title":"fn withType","text":"<pre><code>withType()\n</code></pre>"},{"location":"API/query/expr/TypeSql.html#obj-datasource","title":"obj datasource","text":""},{"location":"API/query/expr/TypeSql.html#fn-datasourcewithapiversion","title":"fn datasource.withApiVersion","text":"<pre><code>datasource.withApiVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The apiserver version</p>"},{"location":"API/query/expr/TypeSql.html#fn-datasourcewithtype","title":"fn datasource.withType","text":"<pre><code>datasource.withType()\n</code></pre> <p>The datasource plugin type</p>"},{"location":"API/query/expr/TypeSql.html#fn-datasourcewithuid","title":"fn datasource.withUid","text":"<pre><code>datasource.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Datasource UID (NOTE: name in k8s)</p>"},{"location":"API/query/expr/TypeSql.html#obj-resultassertions","title":"obj resultAssertions","text":""},{"location":"API/query/expr/TypeSql.html#fn-resultassertionswithmaxframes","title":"fn resultAssertions.withMaxFrames","text":"<pre><code>resultAssertions.withMaxFrames(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Maximum frame count</p>"},{"location":"API/query/expr/TypeSql.html#fn-resultassertionswithtype","title":"fn resultAssertions.withType","text":"<pre><code>resultAssertions.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"\"</code>, <code>\"timeseries-wide\"</code>, <code>\"timeseries-long\"</code>, <code>\"timeseries-many\"</code>, <code>\"timeseries-multi\"</code>, <code>\"directory-listing\"</code>, <code>\"table\"</code>, <code>\"numeric-wide\"</code>, <code>\"numeric-multi\"</code>, <code>\"numeric-long\"</code>, <code>\"log-lines\"</code></li> </ul> </li> </ul> <p>Type asserts that the frame matches a known type structure. Possible enum values:  - <code>\"\"</code>   - <code>\"timeseries-wide\"</code>   - <code>\"timeseries-long\"</code>   - <code>\"timeseries-many\"</code>   - <code>\"timeseries-multi\"</code>   - <code>\"directory-listing\"</code>   - <code>\"table\"</code>   - <code>\"numeric-wide\"</code>   - <code>\"numeric-multi\"</code>   - <code>\"numeric-long\"</code>   - <code>\"log-lines\"</code> </p>"},{"location":"API/query/expr/TypeSql.html#fn-resultassertionswithtypeversion","title":"fn resultAssertions.withTypeVersion","text":"<pre><code>resultAssertions.withTypeVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane contract documentation https://grafana.github.io/dataplane/contract/.</p>"},{"location":"API/query/expr/TypeSql.html#fn-resultassertionswithtypeversionmixin","title":"fn resultAssertions.withTypeVersionMixin","text":"<pre><code>resultAssertions.withTypeVersionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane contract documentation https://grafana.github.io/dataplane/contract/.</p>"},{"location":"API/query/expr/TypeSql.html#obj-timerange","title":"obj timeRange","text":""},{"location":"API/query/expr/TypeSql.html#fn-timerangewithfrom","title":"fn timeRange.withFrom","text":"<pre><code>timeRange.withFrom(value=\"now-6h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now-6h\"</code></li> </ul> </li> </ul> <p>From is the start time of the query.</p>"},{"location":"API/query/expr/TypeSql.html#fn-timerangewithto","title":"fn timeRange.withTo","text":"<pre><code>timeRange.withTo(value=\"now\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now\"</code></li> </ul> </li> </ul> <p>To is the end time of the query.</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html","title":"TypeClassicConditions","text":"<p>grafonnet.query.expr.TypeClassicConditions</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#subpackages","title":"Subpackages","text":"<ul> <li>conditions</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/index.html#index","title":"Index","text":"<ul> <li><code>fn withConditions(value)</code></li> <li><code>fn withConditionsMixin(value)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withIntervalMs(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withResultAssertions(value)</code></li> <li><code>fn withResultAssertionsMixin(value)</code></li> <li><code>fn withTimeRange(value)</code></li> <li><code>fn withTimeRangeMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj datasource</code><ul> <li><code>fn withApiVersion(value)</code></li> <li><code>fn withType()</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj resultAssertions</code><ul> <li><code>fn withMaxFrames(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withTypeVersion(value)</code></li> <li><code>fn withTypeVersionMixin(value)</code></li> </ul> </li> <li><code>obj timeRange</code><ul> <li><code>fn withFrom(value=\"now-6h\")</code></li> <li><code>fn withTo(value=\"now\")</code></li> </ul> </li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fields","title":"Fields","text":""},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-withconditions","title":"fn withConditions","text":"<pre><code>withConditions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-withconditionsmixin","title":"fn withConditionsMixin","text":"<pre><code>withConditionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The datasource</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-withdatasourcemixin","title":"fn withDatasourceMixin","text":"<pre><code>withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The datasource</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>true if query is disabled (ie should not be returned to the dashboard) NOTE: this does not always imply that the query should not be executed since the results from a hidden query may be used as the input to other queries (SSE etc)</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-withintervalms","title":"fn withIntervalMs","text":"<pre><code>withIntervalMs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Interval is the suggested duration between time points in a time series query. NOTE: the values for intervalMs is not saved in the query model.  It is typically calculated from the interval required to fill a pixels in the visualization</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-withmaxdatapoints","title":"fn withMaxDataPoints","text":"<pre><code>withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>MaxDataPoints is the maximum number of data points that should be returned from a time series query. NOTE: the values for maxDataPoints is not saved in the query model.  It is typically calculated from the number of pixels visible in a visualization</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>QueryType is an optional identifier for the type of query. It can be used to distinguish different types of queries.</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>RefID is the unique identifier of the query, set by the frontend call.</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-withresultassertions","title":"fn withResultAssertions","text":"<pre><code>withResultAssertions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Optionally define expected query result behavior</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-withresultassertionsmixin","title":"fn withResultAssertionsMixin","text":"<pre><code>withResultAssertionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Optionally define expected query result behavior</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-withtimerange","title":"fn withTimeRange","text":"<pre><code>withTimeRange(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TimeRange represents the query range NOTE: unlike generic /ds/query, we can now send explicit time values in each query NOTE: the values for timeRange are not saved in a dashboard, they are constructed on the fly</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-withtimerangemixin","title":"fn withTimeRangeMixin","text":"<pre><code>withTimeRangeMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TimeRange represents the query range NOTE: unlike generic /ds/query, we can now send explicit time values in each query NOTE: the values for timeRange are not saved in a dashboard, they are constructed on the fly</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-withtype","title":"fn withType","text":"<pre><code>withType()\n</code></pre>"},{"location":"API/query/expr/TypeClassicConditions/index.html#obj-datasource","title":"obj datasource","text":""},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-datasourcewithapiversion","title":"fn datasource.withApiVersion","text":"<pre><code>datasource.withApiVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The apiserver version</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-datasourcewithtype","title":"fn datasource.withType","text":"<pre><code>datasource.withType()\n</code></pre> <p>The datasource plugin type</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-datasourcewithuid","title":"fn datasource.withUid","text":"<pre><code>datasource.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Datasource UID (NOTE: name in k8s)</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#obj-resultassertions","title":"obj resultAssertions","text":""},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-resultassertionswithmaxframes","title":"fn resultAssertions.withMaxFrames","text":"<pre><code>resultAssertions.withMaxFrames(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Maximum frame count</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-resultassertionswithtype","title":"fn resultAssertions.withType","text":"<pre><code>resultAssertions.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"\"</code>, <code>\"timeseries-wide\"</code>, <code>\"timeseries-long\"</code>, <code>\"timeseries-many\"</code>, <code>\"timeseries-multi\"</code>, <code>\"directory-listing\"</code>, <code>\"table\"</code>, <code>\"numeric-wide\"</code>, <code>\"numeric-multi\"</code>, <code>\"numeric-long\"</code>, <code>\"log-lines\"</code></li> </ul> </li> </ul> <p>Type asserts that the frame matches a known type structure. Possible enum values:  - <code>\"\"</code>   - <code>\"timeseries-wide\"</code>   - <code>\"timeseries-long\"</code>   - <code>\"timeseries-many\"</code>   - <code>\"timeseries-multi\"</code>   - <code>\"directory-listing\"</code>   - <code>\"table\"</code>   - <code>\"numeric-wide\"</code>   - <code>\"numeric-multi\"</code>   - <code>\"numeric-long\"</code>   - <code>\"log-lines\"</code> </p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-resultassertionswithtypeversion","title":"fn resultAssertions.withTypeVersion","text":"<pre><code>resultAssertions.withTypeVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane contract documentation https://grafana.github.io/dataplane/contract/.</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-resultassertionswithtypeversionmixin","title":"fn resultAssertions.withTypeVersionMixin","text":"<pre><code>resultAssertions.withTypeVersionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane contract documentation https://grafana.github.io/dataplane/contract/.</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#obj-timerange","title":"obj timeRange","text":""},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-timerangewithfrom","title":"fn timeRange.withFrom","text":"<pre><code>timeRange.withFrom(value=\"now-6h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now-6h\"</code></li> </ul> </li> </ul> <p>From is the start time of the query.</p>"},{"location":"API/query/expr/TypeClassicConditions/index.html#fn-timerangewithto","title":"fn timeRange.withTo","text":"<pre><code>timeRange.withTo(value=\"now\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now\"</code></li> </ul> </li> </ul> <p>To is the end time of the query.</p>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html","title":"conditions","text":""},{"location":"API/query/expr/TypeClassicConditions/conditions.html#index","title":"Index","text":"<ul> <li><code>fn withEvaluator(value)</code></li> <li><code>fn withEvaluatorMixin(value)</code></li> <li><code>fn withOperator(value)</code></li> <li><code>fn withOperatorMixin(value)</code></li> <li><code>fn withQuery(value)</code></li> <li><code>fn withQueryMixin(value)</code></li> <li><code>fn withReducer(value)</code></li> <li><code>fn withReducerMixin(value)</code></li> <li><code>obj evaluator</code><ul> <li><code>fn withParams(value)</code></li> <li><code>fn withParamsMixin(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> <li><code>obj operator</code><ul> <li><code>fn withType(value)</code></li> </ul> </li> <li><code>obj query</code><ul> <li><code>fn withParams(value)</code></li> <li><code>fn withParamsMixin(value)</code></li> </ul> </li> <li><code>obj reducer</code><ul> <li><code>fn withType(value)</code></li> </ul> </li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fields","title":"Fields","text":""},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-withevaluator","title":"fn withEvaluator","text":"<pre><code>withEvaluator(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-withevaluatormixin","title":"fn withEvaluatorMixin","text":"<pre><code>withEvaluatorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-withoperator","title":"fn withOperator","text":"<pre><code>withOperator(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-withoperatormixin","title":"fn withOperatorMixin","text":"<pre><code>withOperatorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-withquery","title":"fn withQuery","text":"<pre><code>withQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-withquerymixin","title":"fn withQueryMixin","text":"<pre><code>withQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-withreducer","title":"fn withReducer","text":"<pre><code>withReducer(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-withreducermixin","title":"fn withReducerMixin","text":"<pre><code>withReducerMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#obj-evaluator","title":"obj evaluator","text":""},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-evaluatorwithparams","title":"fn evaluator.withParams","text":"<pre><code>evaluator.withParams(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-evaluatorwithparamsmixin","title":"fn evaluator.withParamsMixin","text":"<pre><code>evaluator.withParamsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-evaluatorwithtype","title":"fn evaluator.withType","text":"<pre><code>evaluator.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>e.g. \"gt\"</p>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#obj-operator","title":"obj operator","text":""},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-operatorwithtype","title":"fn operator.withType","text":"<pre><code>operator.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"and\"</code>, <code>\"or\"</code></li> </ul> </li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#obj-query","title":"obj query","text":""},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-querywithparams","title":"fn query.withParams","text":"<pre><code>query.withParams(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-querywithparamsmixin","title":"fn query.withParamsMixin","text":"<pre><code>query.withParamsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/expr/TypeClassicConditions/conditions.html#obj-reducer","title":"obj reducer","text":""},{"location":"API/query/expr/TypeClassicConditions/conditions.html#fn-reducerwithtype","title":"fn reducer.withType","text":"<pre><code>reducer.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/expr/TypeThreshold/index.html","title":"TypeThreshold","text":"<p>grafonnet.query.expr.TypeThreshold</p>"},{"location":"API/query/expr/TypeThreshold/index.html#subpackages","title":"Subpackages","text":"<ul> <li>conditions</li> </ul>"},{"location":"API/query/expr/TypeThreshold/index.html#index","title":"Index","text":"<ul> <li><code>fn withConditions(value)</code></li> <li><code>fn withConditionsMixin(value)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withDatasourceMixin(value)</code></li> <li><code>fn withExpression(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withIntervalMs(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withResultAssertions(value)</code></li> <li><code>fn withResultAssertionsMixin(value)</code></li> <li><code>fn withTimeRange(value)</code></li> <li><code>fn withTimeRangeMixin(value)</code></li> <li><code>fn withType()</code></li> <li><code>obj datasource</code><ul> <li><code>fn withApiVersion(value)</code></li> <li><code>fn withType()</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj resultAssertions</code><ul> <li><code>fn withMaxFrames(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withTypeVersion(value)</code></li> <li><code>fn withTypeVersionMixin(value)</code></li> </ul> </li> <li><code>obj timeRange</code><ul> <li><code>fn withFrom(value=\"now-6h\")</code></li> <li><code>fn withTo(value=\"now\")</code></li> </ul> </li> </ul>"},{"location":"API/query/expr/TypeThreshold/index.html#fields","title":"Fields","text":""},{"location":"API/query/expr/TypeThreshold/index.html#fn-withconditions","title":"fn withConditions","text":"<pre><code>withConditions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Threshold Conditions</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-withconditionsmixin","title":"fn withConditionsMixin","text":"<pre><code>withConditionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Threshold Conditions</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The datasource</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-withdatasourcemixin","title":"fn withDatasourceMixin","text":"<pre><code>withDatasourceMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>The datasource</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-withexpression","title":"fn withExpression","text":"<pre><code>withExpression(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Reference to single query result</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>true if query is disabled (ie should not be returned to the dashboard) NOTE: this does not always imply that the query should not be executed since the results from a hidden query may be used as the input to other queries (SSE etc)</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-withintervalms","title":"fn withIntervalMs","text":"<pre><code>withIntervalMs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Interval is the suggested duration between time points in a time series query. NOTE: the values for intervalMs is not saved in the query model.  It is typically calculated from the interval required to fill a pixels in the visualization</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-withmaxdatapoints","title":"fn withMaxDataPoints","text":"<pre><code>withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>MaxDataPoints is the maximum number of data points that should be returned from a time series query. NOTE: the values for maxDataPoints is not saved in the query model.  It is typically calculated from the number of pixels visible in a visualization</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>QueryType is an optional identifier for the type of query. It can be used to distinguish different types of queries.</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>RefID is the unique identifier of the query, set by the frontend call.</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-withresultassertions","title":"fn withResultAssertions","text":"<pre><code>withResultAssertions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Optionally define expected query result behavior</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-withresultassertionsmixin","title":"fn withResultAssertionsMixin","text":"<pre><code>withResultAssertionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>Optionally define expected query result behavior</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-withtimerange","title":"fn withTimeRange","text":"<pre><code>withTimeRange(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TimeRange represents the query range NOTE: unlike generic /ds/query, we can now send explicit time values in each query NOTE: the values for timeRange are not saved in a dashboard, they are constructed on the fly</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-withtimerangemixin","title":"fn withTimeRangeMixin","text":"<pre><code>withTimeRangeMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul> <p>TimeRange represents the query range NOTE: unlike generic /ds/query, we can now send explicit time values in each query NOTE: the values for timeRange are not saved in a dashboard, they are constructed on the fly</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-withtype","title":"fn withType","text":"<pre><code>withType()\n</code></pre>"},{"location":"API/query/expr/TypeThreshold/index.html#obj-datasource","title":"obj datasource","text":""},{"location":"API/query/expr/TypeThreshold/index.html#fn-datasourcewithapiversion","title":"fn datasource.withApiVersion","text":"<pre><code>datasource.withApiVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The apiserver version</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-datasourcewithtype","title":"fn datasource.withType","text":"<pre><code>datasource.withType()\n</code></pre> <p>The datasource plugin type</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-datasourcewithuid","title":"fn datasource.withUid","text":"<pre><code>datasource.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Datasource UID (NOTE: name in k8s)</p>"},{"location":"API/query/expr/TypeThreshold/index.html#obj-resultassertions","title":"obj resultAssertions","text":""},{"location":"API/query/expr/TypeThreshold/index.html#fn-resultassertionswithmaxframes","title":"fn resultAssertions.withMaxFrames","text":"<pre><code>resultAssertions.withMaxFrames(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Maximum frame count</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-resultassertionswithtype","title":"fn resultAssertions.withType","text":"<pre><code>resultAssertions.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"\"</code>, <code>\"timeseries-wide\"</code>, <code>\"timeseries-long\"</code>, <code>\"timeseries-many\"</code>, <code>\"timeseries-multi\"</code>, <code>\"directory-listing\"</code>, <code>\"table\"</code>, <code>\"numeric-wide\"</code>, <code>\"numeric-multi\"</code>, <code>\"numeric-long\"</code>, <code>\"log-lines\"</code></li> </ul> </li> </ul> <p>Type asserts that the frame matches a known type structure. Possible enum values:  - <code>\"\"</code>   - <code>\"timeseries-wide\"</code>   - <code>\"timeseries-long\"</code>   - <code>\"timeseries-many\"</code>   - <code>\"timeseries-multi\"</code>   - <code>\"directory-listing\"</code>   - <code>\"table\"</code>   - <code>\"numeric-wide\"</code>   - <code>\"numeric-multi\"</code>   - <code>\"numeric-long\"</code>   - <code>\"log-lines\"</code> </p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-resultassertionswithtypeversion","title":"fn resultAssertions.withTypeVersion","text":"<pre><code>resultAssertions.withTypeVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane contract documentation https://grafana.github.io/dataplane/contract/.</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-resultassertionswithtypeversionmixin","title":"fn resultAssertions.withTypeVersionMixin","text":"<pre><code>resultAssertions.withTypeVersionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane contract documentation https://grafana.github.io/dataplane/contract/.</p>"},{"location":"API/query/expr/TypeThreshold/index.html#obj-timerange","title":"obj timeRange","text":""},{"location":"API/query/expr/TypeThreshold/index.html#fn-timerangewithfrom","title":"fn timeRange.withFrom","text":"<pre><code>timeRange.withFrom(value=\"now-6h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now-6h\"</code></li> </ul> </li> </ul> <p>From is the start time of the query.</p>"},{"location":"API/query/expr/TypeThreshold/index.html#fn-timerangewithto","title":"fn timeRange.withTo","text":"<pre><code>timeRange.withTo(value=\"now\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now\"</code></li> </ul> </li> </ul> <p>To is the end time of the query.</p>"},{"location":"API/query/expr/TypeThreshold/conditions.html","title":"conditions","text":""},{"location":"API/query/expr/TypeThreshold/conditions.html#index","title":"Index","text":"<ul> <li><code>fn withEvaluator(value)</code></li> <li><code>fn withEvaluatorMixin(value)</code></li> <li><code>fn withLoadedDimensions(value)</code></li> <li><code>fn withLoadedDimensionsMixin(value)</code></li> <li><code>fn withUnloadEvaluator(value)</code></li> <li><code>fn withUnloadEvaluatorMixin(value)</code></li> <li><code>obj evaluator</code><ul> <li><code>fn withParams(value)</code></li> <li><code>fn withParamsMixin(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> <li><code>obj unloadEvaluator</code><ul> <li><code>fn withParams(value)</code></li> <li><code>fn withParamsMixin(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> </ul>"},{"location":"API/query/expr/TypeThreshold/conditions.html#fields","title":"Fields","text":""},{"location":"API/query/expr/TypeThreshold/conditions.html#fn-withevaluator","title":"fn withEvaluator","text":"<pre><code>withEvaluator(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/expr/TypeThreshold/conditions.html#fn-withevaluatormixin","title":"fn withEvaluatorMixin","text":"<pre><code>withEvaluatorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/expr/TypeThreshold/conditions.html#fn-withloadeddimensions","title":"fn withLoadedDimensions","text":"<pre><code>withLoadedDimensions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/expr/TypeThreshold/conditions.html#fn-withloadeddimensionsmixin","title":"fn withLoadedDimensionsMixin","text":"<pre><code>withLoadedDimensionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/expr/TypeThreshold/conditions.html#fn-withunloadevaluator","title":"fn withUnloadEvaluator","text":"<pre><code>withUnloadEvaluator(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/expr/TypeThreshold/conditions.html#fn-withunloadevaluatormixin","title":"fn withUnloadEvaluatorMixin","text":"<pre><code>withUnloadEvaluatorMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/expr/TypeThreshold/conditions.html#obj-evaluator","title":"obj evaluator","text":""},{"location":"API/query/expr/TypeThreshold/conditions.html#fn-evaluatorwithparams","title":"fn evaluator.withParams","text":"<pre><code>evaluator.withParams(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/expr/TypeThreshold/conditions.html#fn-evaluatorwithparamsmixin","title":"fn evaluator.withParamsMixin","text":"<pre><code>evaluator.withParamsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/expr/TypeThreshold/conditions.html#fn-evaluatorwithtype","title":"fn evaluator.withType","text":"<pre><code>evaluator.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"gt\"</code>, <code>\"lt\"</code>, <code>\"within_range\"</code>, <code>\"outside_range\"</code></li> </ul> </li> </ul> <p>e.g. \"gt\"</p>"},{"location":"API/query/expr/TypeThreshold/conditions.html#obj-unloadevaluator","title":"obj unloadEvaluator","text":""},{"location":"API/query/expr/TypeThreshold/conditions.html#fn-unloadevaluatorwithparams","title":"fn unloadEvaluator.withParams","text":"<pre><code>unloadEvaluator.withParams(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/expr/TypeThreshold/conditions.html#fn-unloadevaluatorwithparamsmixin","title":"fn unloadEvaluator.withParamsMixin","text":"<pre><code>unloadEvaluator.withParamsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/expr/TypeThreshold/conditions.html#fn-unloadevaluatorwithtype","title":"fn unloadEvaluator.withType","text":"<pre><code>unloadEvaluator.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"gt\"</code>, <code>\"lt\"</code>, <code>\"within_range\"</code>, <code>\"outside_range\"</code></li> </ul> </li> </ul> <p>e.g. \"gt\"</p>"},{"location":"API/query/tempo/index.html","title":"tempo","text":"<p>grafonnet.query.tempo</p>"},{"location":"API/query/tempo/index.html#subpackages","title":"Subpackages","text":"<ul> <li>filters</li> <li>groupBy</li> </ul>"},{"location":"API/query/tempo/index.html#index","title":"Index","text":"<ul> <li><code>fn new(datasource, query, filters)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withFilters(value)</code></li> <li><code>fn withFiltersMixin(value)</code></li> <li><code>fn withGroupBy(value)</code></li> <li><code>fn withGroupByMixin(value)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withLimit(value)</code></li> <li><code>fn withMaxDuration(value)</code></li> <li><code>fn withMinDuration(value)</code></li> <li><code>fn withQuery(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withSearch(value)</code></li> <li><code>fn withServiceMapIncludeNamespace(value=true)</code></li> <li><code>fn withServiceMapQuery(value)</code></li> <li><code>fn withServiceMapQueryMixin(value)</code></li> <li><code>fn withServiceName(value)</code></li> <li><code>fn withSpanName(value)</code></li> <li><code>fn withSpss(value)</code></li> <li><code>fn withTableType(value)</code></li> </ul>"},{"location":"API/query/tempo/index.html#fields","title":"Fields","text":""},{"location":"API/query/tempo/index.html#fn-new","title":"fn new","text":"<pre><code>new(datasource, query, filters)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>datasource (<code>string</code>)</li> <li>query (<code>string</code>)</li> <li>filters (<code>array</code>)</li> </ul> <p>Creates a new tempo query target for panels.</p>"},{"location":"API/query/tempo/index.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Set the datasource for this query.</p>"},{"location":"API/query/tempo/index.html#fn-withfilters","title":"fn withFilters","text":"<pre><code>withFilters(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/tempo/index.html#fn-withfiltersmixin","title":"fn withFiltersMixin","text":"<pre><code>withFiltersMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/tempo/index.html#fn-withgroupby","title":"fn withGroupBy","text":"<pre><code>withGroupBy(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Filters that are used to query the metrics summary</p>"},{"location":"API/query/tempo/index.html#fn-withgroupbymixin","title":"fn withGroupByMixin","text":"<pre><code>withGroupByMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>Filters that are used to query the metrics summary</p>"},{"location":"API/query/tempo/index.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>If hide is set to true, Grafana will filter out the response(s) associated with this query before returning it to the panel.</p>"},{"location":"API/query/tempo/index.html#fn-withlimit","title":"fn withLimit","text":"<pre><code>withLimit(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Defines the maximum number of traces that are returned from Tempo</p>"},{"location":"API/query/tempo/index.html#fn-withmaxduration","title":"fn withMaxDuration","text":"<pre><code>withMaxDuration(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>@deprecated Define the maximum duration to select traces. Use duration format, for example: 1.2s, 100ms</p>"},{"location":"API/query/tempo/index.html#fn-withminduration","title":"fn withMinDuration","text":"<pre><code>withMinDuration(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>@deprecated Define the minimum duration to select traces. Use duration format, for example: 1.2s, 100ms</p>"},{"location":"API/query/tempo/index.html#fn-withquery","title":"fn withQuery","text":"<pre><code>withQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>TraceQL query or trace ID</p>"},{"location":"API/query/tempo/index.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Specify the query flavor TODO make this required and give it a default</p>"},{"location":"API/query/tempo/index.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>A unique identifier for the query within the list of targets. In server side expressions, the refId is used as a variable name to identify results. By default, the UI will assign A-&gt;Z; however setting meaningful names may be useful.</p>"},{"location":"API/query/tempo/index.html#fn-withsearch","title":"fn withSearch","text":"<pre><code>withSearch(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>@deprecated Logfmt query to filter traces by their tags. Example: http.status_code=200 error=true</p>"},{"location":"API/query/tempo/index.html#fn-withservicemapincludenamespace","title":"fn withServiceMapIncludeNamespace","text":"<pre><code>withServiceMapIncludeNamespace(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>Use service.namespace in addition to service.name to uniquely identify a service.</p>"},{"location":"API/query/tempo/index.html#fn-withservicemapquery","title":"fn withServiceMapQuery","text":"<pre><code>withServiceMapQuery(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>,<code>string</code>)</li> </ul> <p>Filters to be included in a PromQL query to select data for the service graph. Example: {client=\"app\",service=\"app\"}. Providing multiple values will produce union of results for each filter, using PromQL OR operator internally.</p>"},{"location":"API/query/tempo/index.html#fn-withservicemapquerymixin","title":"fn withServiceMapQueryMixin","text":"<pre><code>withServiceMapQueryMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>,<code>string</code>)</li> </ul> <p>Filters to be included in a PromQL query to select data for the service graph. Example: {client=\"app\",service=\"app\"}. Providing multiple values will produce union of results for each filter, using PromQL OR operator internally.</p>"},{"location":"API/query/tempo/index.html#fn-withservicename","title":"fn withServiceName","text":"<pre><code>withServiceName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>@deprecated Query traces by service name</p>"},{"location":"API/query/tempo/index.html#fn-withspanname","title":"fn withSpanName","text":"<pre><code>withSpanName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>@deprecated Query traces by span name</p>"},{"location":"API/query/tempo/index.html#fn-withspss","title":"fn withSpss","text":"<pre><code>withSpss(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Defines the maximum number of spans per spanset that are returned from Tempo</p>"},{"location":"API/query/tempo/index.html#fn-withtabletype","title":"fn withTableType","text":"<pre><code>withTableType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"traces\"</code>, <code>\"spans\"</code></li> </ul> </li> </ul> <p>The type of the table that is used to display the search results</p>"},{"location":"API/query/tempo/filters.html","title":"filters","text":""},{"location":"API/query/tempo/filters.html#index","title":"Index","text":"<ul> <li><code>fn withId(value)</code></li> <li><code>fn withOperator(value)</code></li> <li><code>fn withScope(value)</code></li> <li><code>fn withTag(value)</code></li> <li><code>fn withValue(value)</code></li> <li><code>fn withValueMixin(value)</code></li> <li><code>fn withValueType(value)</code></li> </ul>"},{"location":"API/query/tempo/filters.html#fields","title":"Fields","text":""},{"location":"API/query/tempo/filters.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Uniquely identify the filter, will not be used in the query generation</p>"},{"location":"API/query/tempo/filters.html#fn-withoperator","title":"fn withOperator","text":"<pre><code>withOperator(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The operator that connects the tag to the value, for example: =, &gt;, !=, =~</p>"},{"location":"API/query/tempo/filters.html#fn-withscope","title":"fn withScope","text":"<pre><code>withScope(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"intrinsic\"</code>, <code>\"unscoped\"</code>, <code>\"resource\"</code>, <code>\"span\"</code></li> </ul> </li> </ul> <p>static fields are pre-set in the UI, dynamic fields are added by the user</p>"},{"location":"API/query/tempo/filters.html#fn-withtag","title":"fn withTag","text":"<pre><code>withTag(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The tag for the search filter, for example: .http.status_code, .service.name, status</p>"},{"location":"API/query/tempo/filters.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>,<code>string</code>)</li> </ul> <p>The value for the search filter</p>"},{"location":"API/query/tempo/filters.html#fn-withvaluemixin","title":"fn withValueMixin","text":"<pre><code>withValueMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>,<code>string</code>)</li> </ul> <p>The value for the search filter</p>"},{"location":"API/query/tempo/filters.html#fn-withvaluetype","title":"fn withValueType","text":"<pre><code>withValueType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The type of the value, used for example to check whether we need to wrap the value in quotes when generating the query</p>"},{"location":"API/query/tempo/groupBy.html","title":"groupBy","text":""},{"location":"API/query/tempo/groupBy.html#index","title":"Index","text":"<ul> <li><code>fn withId(value)</code></li> <li><code>fn withOperator(value)</code></li> <li><code>fn withScope(value)</code></li> <li><code>fn withTag(value)</code></li> <li><code>fn withValue(value)</code></li> <li><code>fn withValueMixin(value)</code></li> <li><code>fn withValueType(value)</code></li> </ul>"},{"location":"API/query/tempo/groupBy.html#fields","title":"Fields","text":""},{"location":"API/query/tempo/groupBy.html#fn-withid","title":"fn withId","text":"<pre><code>withId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Uniquely identify the filter, will not be used in the query generation</p>"},{"location":"API/query/tempo/groupBy.html#fn-withoperator","title":"fn withOperator","text":"<pre><code>withOperator(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The operator that connects the tag to the value, for example: =, &gt;, !=, =~</p>"},{"location":"API/query/tempo/groupBy.html#fn-withscope","title":"fn withScope","text":"<pre><code>withScope(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"intrinsic\"</code>, <code>\"unscoped\"</code>, <code>\"resource\"</code>, <code>\"span\"</code></li> </ul> </li> </ul> <p>static fields are pre-set in the UI, dynamic fields are added by the user</p>"},{"location":"API/query/tempo/groupBy.html#fn-withtag","title":"fn withTag","text":"<pre><code>withTag(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The tag for the search filter, for example: .http.status_code, .service.name, status</p>"},{"location":"API/query/tempo/groupBy.html#fn-withvalue","title":"fn withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>,<code>string</code>)</li> </ul> <p>The value for the search filter</p>"},{"location":"API/query/tempo/groupBy.html#fn-withvaluemixin","title":"fn withValueMixin","text":"<pre><code>withValueMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>,<code>string</code>)</li> </ul> <p>The value for the search filter</p>"},{"location":"API/query/tempo/groupBy.html#fn-withvaluetype","title":"fn withValueType","text":"<pre><code>withValueType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The type of the value, used for example to check whether we need to wrap the value in quotes when generating the query</p>"},{"location":"API/query/testData/index.html","title":"testData","text":"<p>grafonnet.query.testData</p>"},{"location":"API/query/testData/index.html#subpackages","title":"Subpackages","text":"<ul> <li>csvWave</li> </ul>"},{"location":"API/query/testData/index.html#index","title":"Index","text":"<ul> <li><code>fn withAlias(value)</code></li> <li><code>fn withChannel(value)</code></li> <li><code>fn withCsvContent(value)</code></li> <li><code>fn withCsvFileName(value)</code></li> <li><code>fn withCsvWave(value)</code></li> <li><code>fn withCsvWaveMixin(value)</code></li> <li><code>fn withDatasource(value)</code></li> <li><code>fn withDropPercent(value)</code></li> <li><code>fn withErrorType(value)</code></li> <li><code>fn withFlamegraphDiff(value=true)</code></li> <li><code>fn withHide(value=true)</code></li> <li><code>fn withIntervalMs(value)</code></li> <li><code>fn withLabels(value)</code></li> <li><code>fn withLevelColumn(value=true)</code></li> <li><code>fn withLines(value)</code></li> <li><code>fn withMax(value)</code></li> <li><code>fn withMaxDataPoints(value)</code></li> <li><code>fn withMin(value)</code></li> <li><code>fn withNodes(value)</code></li> <li><code>fn withNodesMixin(value)</code></li> <li><code>fn withNoise(value)</code></li> <li><code>fn withPoints(value)</code></li> <li><code>fn withPointsMixin(value)</code></li> <li><code>fn withPulseWave(value)</code></li> <li><code>fn withPulseWaveMixin(value)</code></li> <li><code>fn withQueryType(value)</code></li> <li><code>fn withRawFrameContent(value)</code></li> <li><code>fn withRefId(value)</code></li> <li><code>fn withResultAssertions(value)</code></li> <li><code>fn withResultAssertionsMixin(value)</code></li> <li><code>fn withScenarioId(value)</code></li> <li><code>fn withSeriesCount(value)</code></li> <li><code>fn withSim(value)</code></li> <li><code>fn withSimMixin(value)</code></li> <li><code>fn withSpanCount(value)</code></li> <li><code>fn withSpread(value)</code></li> <li><code>fn withStartValue(value)</code></li> <li><code>fn withStream(value)</code></li> <li><code>fn withStreamMixin(value)</code></li> <li><code>fn withStringInput(value)</code></li> <li><code>fn withTimeRange(value)</code></li> <li><code>fn withTimeRangeMixin(value)</code></li> <li><code>fn withUsa(value)</code></li> <li><code>fn withUsaMixin(value)</code></li> <li><code>fn withWithNil(value=true)</code></li> <li><code>obj datasource</code><ul> <li><code>fn withType(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> <li><code>obj nodes</code><ul> <li><code>fn withCount(value)</code></li> <li><code>fn withSeed(value)</code></li> <li><code>fn withType(value)</code></li> </ul> </li> <li><code>obj pulseWave</code><ul> <li><code>fn withOffCount(value)</code></li> <li><code>fn withOffValue(value)</code></li> <li><code>fn withOnCount(value)</code></li> <li><code>fn withOnValue(value)</code></li> <li><code>fn withTimeStep(value)</code></li> </ul> </li> <li><code>obj resultAssertions</code><ul> <li><code>fn withMaxFrames(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withTypeVersion(value)</code></li> <li><code>fn withTypeVersionMixin(value)</code></li> </ul> </li> <li><code>obj sim</code><ul> <li><code>fn withConfig(value)</code></li> <li><code>fn withConfigMixin(value)</code></li> <li><code>fn withKey(value)</code></li> <li><code>fn withKeyMixin(value)</code></li> <li><code>fn withLast(value=true)</code></li> <li><code>fn withStream(value=true)</code></li> <li><code>obj key</code><ul> <li><code>fn withTick(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUid(value)</code></li> </ul> </li> </ul> </li> <li><code>obj stream</code><ul> <li><code>fn withBands(value)</code></li> <li><code>fn withNoise(value)</code></li> <li><code>fn withSpeed(value)</code></li> <li><code>fn withSpread(value)</code></li> <li><code>fn withType(value)</code></li> <li><code>fn withUrl(value)</code></li> </ul> </li> <li><code>obj timeRange</code><ul> <li><code>fn withFrom(value=\"now-6h\")</code></li> <li><code>fn withTo(value=\"now\")</code></li> </ul> </li> <li><code>obj usa</code><ul> <li><code>fn withFields(value)</code></li> <li><code>fn withFieldsMixin(value)</code></li> <li><code>fn withMode(value)</code></li> <li><code>fn withPeriod(value)</code></li> <li><code>fn withStates(value)</code></li> <li><code>fn withStatesMixin(value)</code></li> </ul> </li> </ul>"},{"location":"API/query/testData/index.html#fields","title":"Fields","text":""},{"location":"API/query/testData/index.html#fn-withalias","title":"fn withAlias","text":"<pre><code>withAlias(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withchannel","title":"fn withChannel","text":"<pre><code>withChannel(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Used for live query</p>"},{"location":"API/query/testData/index.html#fn-withcsvcontent","title":"fn withCsvContent","text":"<pre><code>withCsvContent(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withcsvfilename","title":"fn withCsvFileName","text":"<pre><code>withCsvFileName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withcsvwave","title":"fn withCsvWave","text":"<pre><code>withCsvWave(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withcsvwavemixin","title":"fn withCsvWaveMixin","text":"<pre><code>withCsvWaveMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withdatasource","title":"fn withDatasource","text":"<pre><code>withDatasource(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Set the datasource for this query.</p>"},{"location":"API/query/testData/index.html#fn-withdroppercent","title":"fn withDropPercent","text":"<pre><code>withDropPercent(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Drop percentage (the chance we will lose a point 0-100)</p>"},{"location":"API/query/testData/index.html#fn-witherrortype","title":"fn withErrorType","text":"<pre><code>withErrorType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"frontend_exception\"</code>, <code>\"frontend_observable\"</code>, <code>\"server_panic\"</code></li> </ul> </li> </ul> <p>Possible enum values:  - <code>\"frontend_exception\"</code>   - <code>\"frontend_observable\"</code>   - <code>\"server_panic\"</code> </p>"},{"location":"API/query/testData/index.html#fn-withflamegraphdiff","title":"fn withFlamegraphDiff","text":"<pre><code>withFlamegraphDiff(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/testData/index.html#fn-withhide","title":"fn withHide","text":"<pre><code>withHide(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul> <p>true if query is disabled (ie should not be returned to the dashboard) NOTE: this does not always imply that the query should not be executed since the results from a hidden query may be used as the input to other queries (SSE etc)</p>"},{"location":"API/query/testData/index.html#fn-withintervalms","title":"fn withIntervalMs","text":"<pre><code>withIntervalMs(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul> <p>Interval is the suggested duration between time points in a time series query. NOTE: the values for intervalMs is not saved in the query model.  It is typically calculated from the interval required to fill a pixels in the visualization</p>"},{"location":"API/query/testData/index.html#fn-withlabels","title":"fn withLabels","text":"<pre><code>withLabels(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withlevelcolumn","title":"fn withLevelColumn","text":"<pre><code>withLevelColumn(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/testData/index.html#fn-withlines","title":"fn withLines","text":"<pre><code>withLines(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withmax","title":"fn withMax","text":"<pre><code>withMax(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withmaxdatapoints","title":"fn withMaxDataPoints","text":"<pre><code>withMaxDataPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>MaxDataPoints is the maximum number of data points that should be returned from a time series query. NOTE: the values for maxDataPoints is not saved in the query model.  It is typically calculated from the number of pixels visible in a visualization</p>"},{"location":"API/query/testData/index.html#fn-withmin","title":"fn withMin","text":"<pre><code>withMin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withnodes","title":"fn withNodes","text":"<pre><code>withNodes(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withnodesmixin","title":"fn withNodesMixin","text":"<pre><code>withNodesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withnoise","title":"fn withNoise","text":"<pre><code>withNoise(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withpoints","title":"fn withPoints","text":"<pre><code>withPoints(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withpointsmixin","title":"fn withPointsMixin","text":"<pre><code>withPointsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withpulsewave","title":"fn withPulseWave","text":"<pre><code>withPulseWave(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withpulsewavemixin","title":"fn withPulseWaveMixin","text":"<pre><code>withPulseWaveMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withquerytype","title":"fn withQueryType","text":"<pre><code>withQueryType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>QueryType is an optional identifier for the type of query. It can be used to distinguish different types of queries.</p>"},{"location":"API/query/testData/index.html#fn-withrawframecontent","title":"fn withRawFrameContent","text":"<pre><code>withRawFrameContent(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withrefid","title":"fn withRefId","text":"<pre><code>withRefId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>RefID is the unique identifier of the query, set by the frontend call.</p>"},{"location":"API/query/testData/index.html#fn-withresultassertions","title":"fn withResultAssertions","text":"<pre><code>withResultAssertions(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withresultassertionsmixin","title":"fn withResultAssertionsMixin","text":"<pre><code>withResultAssertionsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withscenarioid","title":"fn withScenarioId","text":"<pre><code>withScenarioId(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"annotations\"</code>, <code>\"arrow\"</code>, <code>\"csv_content\"</code>, <code>\"csv_file\"</code>, <code>\"csv_metric_values\"</code>, <code>\"datapoints_outside_range\"</code>, <code>\"exponential_heatmap_bucket_data\"</code>, <code>\"flame_graph\"</code>, <code>\"grafana_api\"</code>, <code>\"linear_heatmap_bucket_data\"</code>, <code>\"live\"</code>, <code>\"logs\"</code>, <code>\"manual_entry\"</code>, <code>\"no_data_points\"</code>, <code>\"node_graph\"</code>, <code>\"predictable_csv_wave\"</code>, <code>\"predictable_pulse\"</code>, <code>\"random_walk\"</code>, <code>\"random_walk_table\"</code>, <code>\"random_walk_with_error\"</code>, <code>\"raw_frame\"</code>, <code>\"server_error_500\"</code>, <code>\"simulation\"</code>, <code>\"slow_query\"</code>, <code>\"streaming_client\"</code>, <code>\"table_static\"</code>, <code>\"trace\"</code>, <code>\"usa\"</code>, <code>\"variables-query\"</code></li> </ul> </li> </ul> <p>Possible enum values:  - <code>\"annotations\"</code>   - <code>\"arrow\"</code>   - <code>\"csv_content\"</code>   - <code>\"csv_file\"</code>   - <code>\"csv_metric_values\"</code>   - <code>\"datapoints_outside_range\"</code>   - <code>\"exponential_heatmap_bucket_data\"</code>   - <code>\"flame_graph\"</code>   - <code>\"grafana_api\"</code>   - <code>\"linear_heatmap_bucket_data\"</code>   - <code>\"live\"</code>   - <code>\"logs\"</code>   - <code>\"manual_entry\"</code>   - <code>\"no_data_points\"</code>   - <code>\"node_graph\"</code>   - <code>\"predictable_csv_wave\"</code>   - <code>\"predictable_pulse\"</code>   - <code>\"random_walk\"</code>   - <code>\"random_walk_table\"</code>   - <code>\"random_walk_with_error\"</code>   - <code>\"raw_frame\"</code>   - <code>\"server_error_500\"</code>   - <code>\"simulation\"</code>   - <code>\"slow_query\"</code>   - <code>\"streaming_client\"</code>   - <code>\"table_static\"</code>   - <code>\"trace\"</code>   - <code>\"usa\"</code>   - <code>\"variables-query\"</code> </p>"},{"location":"API/query/testData/index.html#fn-withseriescount","title":"fn withSeriesCount","text":"<pre><code>withSeriesCount(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withsim","title":"fn withSim","text":"<pre><code>withSim(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withsimmixin","title":"fn withSimMixin","text":"<pre><code>withSimMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withspancount","title":"fn withSpanCount","text":"<pre><code>withSpanCount(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withspread","title":"fn withSpread","text":"<pre><code>withSpread(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withstartvalue","title":"fn withStartValue","text":"<pre><code>withStartValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withstream","title":"fn withStream","text":"<pre><code>withStream(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withstreammixin","title":"fn withStreamMixin","text":"<pre><code>withStreamMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withstringinput","title":"fn withStringInput","text":"<pre><code>withStringInput(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>common parameter used by many query types</p>"},{"location":"API/query/testData/index.html#fn-withtimerange","title":"fn withTimeRange","text":"<pre><code>withTimeRange(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withtimerangemixin","title":"fn withTimeRangeMixin","text":"<pre><code>withTimeRangeMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withusa","title":"fn withUsa","text":"<pre><code>withUsa(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withusamixin","title":"fn withUsaMixin","text":"<pre><code>withUsaMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-withwithnil","title":"fn withWithNil","text":"<pre><code>withWithNil(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/testData/index.html#obj-datasource","title":"obj datasource","text":""},{"location":"API/query/testData/index.html#fn-datasourcewithtype","title":"fn datasource.withType","text":"<pre><code>datasource.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>The datasource plugin type</p>"},{"location":"API/query/testData/index.html#fn-datasourcewithuid","title":"fn datasource.withUid","text":"<pre><code>datasource.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul> <p>Datasource UID</p>"},{"location":"API/query/testData/index.html#obj-nodes","title":"obj nodes","text":""},{"location":"API/query/testData/index.html#fn-nodeswithcount","title":"fn nodes.withCount","text":"<pre><code>nodes.withCount(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-nodeswithseed","title":"fn nodes.withSeed","text":"<pre><code>nodes.withSeed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-nodeswithtype","title":"fn nodes.withType","text":"<pre><code>nodes.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"random\"</code>, <code>\"random edges\"</code>, <code>\"response_medium\"</code>, <code>\"response_small\"</code>, <code>\"feature_showcase\"</code></li> </ul> </li> </ul> <p>Possible enum values:  - <code>\"random\"</code>   - <code>\"random edges\"</code>   - <code>\"response_medium\"</code>   - <code>\"response_small\"</code>   - <code>\"feature_showcase\"</code> </p>"},{"location":"API/query/testData/index.html#obj-pulsewave","title":"obj pulseWave","text":""},{"location":"API/query/testData/index.html#fn-pulsewavewithoffcount","title":"fn pulseWave.withOffCount","text":"<pre><code>pulseWave.withOffCount(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-pulsewavewithoffvalue","title":"fn pulseWave.withOffValue","text":"<pre><code>pulseWave.withOffValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-pulsewavewithoncount","title":"fn pulseWave.withOnCount","text":"<pre><code>pulseWave.withOnCount(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-pulsewavewithonvalue","title":"fn pulseWave.withOnValue","text":"<pre><code>pulseWave.withOnValue(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-pulsewavewithtimestep","title":"fn pulseWave.withTimeStep","text":"<pre><code>pulseWave.withTimeStep(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/query/testData/index.html#obj-resultassertions","title":"obj resultAssertions","text":""},{"location":"API/query/testData/index.html#fn-resultassertionswithmaxframes","title":"fn resultAssertions.withMaxFrames","text":"<pre><code>resultAssertions.withMaxFrames(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul> <p>Maximum frame count</p>"},{"location":"API/query/testData/index.html#fn-resultassertionswithtype","title":"fn resultAssertions.withType","text":"<pre><code>resultAssertions.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"\"</code>, <code>\"timeseries-wide\"</code>, <code>\"timeseries-long\"</code>, <code>\"timeseries-many\"</code>, <code>\"timeseries-multi\"</code>, <code>\"directory-listing\"</code>, <code>\"table\"</code>, <code>\"numeric-wide\"</code>, <code>\"numeric-multi\"</code>, <code>\"numeric-long\"</code>, <code>\"log-lines\"</code></li> </ul> </li> </ul> <p>Type asserts that the frame matches a known type structure. Possible enum values:  - <code>\"\"</code>   - <code>\"timeseries-wide\"</code>   - <code>\"timeseries-long\"</code>   - <code>\"timeseries-many\"</code>   - <code>\"timeseries-multi\"</code>   - <code>\"directory-listing\"</code>   - <code>\"table\"</code>   - <code>\"numeric-wide\"</code>   - <code>\"numeric-multi\"</code>   - <code>\"numeric-long\"</code>   - <code>\"log-lines\"</code> </p>"},{"location":"API/query/testData/index.html#fn-resultassertionswithtypeversion","title":"fn resultAssertions.withTypeVersion","text":"<pre><code>resultAssertions.withTypeVersion(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane contract documentation https://grafana.github.io/dataplane/contract/.</p>"},{"location":"API/query/testData/index.html#fn-resultassertionswithtypeversionmixin","title":"fn resultAssertions.withTypeVersionMixin","text":"<pre><code>resultAssertions.withTypeVersionMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul> <p>TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane contract documentation https://grafana.github.io/dataplane/contract/.</p>"},{"location":"API/query/testData/index.html#obj-sim","title":"obj sim","text":""},{"location":"API/query/testData/index.html#fn-simwithconfig","title":"fn sim.withConfig","text":"<pre><code>sim.withConfig(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-simwithconfigmixin","title":"fn sim.withConfigMixin","text":"<pre><code>sim.withConfigMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-simwithkey","title":"fn sim.withKey","text":"<pre><code>sim.withKey(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-simwithkeymixin","title":"fn sim.withKeyMixin","text":"<pre><code>sim.withKeyMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>object</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-simwithlast","title":"fn sim.withLast","text":"<pre><code>sim.withLast(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/testData/index.html#fn-simwithstream","title":"fn sim.withStream","text":"<pre><code>sim.withStream(value=true)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>boolean</code>)<ul> <li>default value: <code>true</code></li> </ul> </li> </ul>"},{"location":"API/query/testData/index.html#obj-simkey","title":"obj sim.key","text":""},{"location":"API/query/testData/index.html#fn-simkeywithtick","title":"fn sim.key.withTick","text":"<pre><code>sim.key.withTick(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-simkeywithtype","title":"fn sim.key.withType","text":"<pre><code>sim.key.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-simkeywithuid","title":"fn sim.key.withUid","text":"<pre><code>sim.key.withUid(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/testData/index.html#obj-stream","title":"obj stream","text":""},{"location":"API/query/testData/index.html#fn-streamwithbands","title":"fn stream.withBands","text":"<pre><code>stream.withBands(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-streamwithnoise","title":"fn stream.withNoise","text":"<pre><code>stream.withNoise(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-streamwithspeed","title":"fn stream.withSpeed","text":"<pre><code>stream.withSpeed(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-streamwithspread","title":"fn stream.withSpread","text":"<pre><code>stream.withSpread(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>number</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-streamwithtype","title":"fn stream.withType","text":"<pre><code>stream.withType(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>valid values: <code>\"fetch\"</code>, <code>\"logs\"</code>, <code>\"signal\"</code>, <code>\"traces\"</code></li> </ul> </li> </ul> <p>Possible enum values:  - <code>\"fetch\"</code>   - <code>\"logs\"</code>   - <code>\"signal\"</code>   - <code>\"traces\"</code> </p>"},{"location":"API/query/testData/index.html#fn-streamwithurl","title":"fn stream.withUrl","text":"<pre><code>stream.withUrl(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/testData/index.html#obj-timerange","title":"obj timeRange","text":""},{"location":"API/query/testData/index.html#fn-timerangewithfrom","title":"fn timeRange.withFrom","text":"<pre><code>timeRange.withFrom(value=\"now-6h\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now-6h\"</code></li> </ul> </li> </ul> <p>From is the start time of the query.</p>"},{"location":"API/query/testData/index.html#fn-timerangewithto","title":"fn timeRange.withTo","text":"<pre><code>timeRange.withTo(value=\"now\")\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)<ul> <li>default value: <code>\"now\"</code></li> </ul> </li> </ul> <p>To is the end time of the query.</p>"},{"location":"API/query/testData/index.html#obj-usa","title":"obj usa","text":""},{"location":"API/query/testData/index.html#fn-usawithfields","title":"fn usa.withFields","text":"<pre><code>usa.withFields(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-usawithfieldsmixin","title":"fn usa.withFieldsMixin","text":"<pre><code>usa.withFieldsMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-usawithmode","title":"fn usa.withMode","text":"<pre><code>usa.withMode(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-usawithperiod","title":"fn usa.withPeriod","text":"<pre><code>usa.withPeriod(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-usawithstates","title":"fn usa.withStates","text":"<pre><code>usa.withStates(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/testData/index.html#fn-usawithstatesmixin","title":"fn usa.withStatesMixin","text":"<pre><code>usa.withStatesMixin(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>array</code>)</li> </ul>"},{"location":"API/query/testData/csvWave.html","title":"csvWave","text":""},{"location":"API/query/testData/csvWave.html#index","title":"Index","text":"<ul> <li><code>fn withLabels(value)</code></li> <li><code>fn withName(value)</code></li> <li><code>fn withTimeStep(value)</code></li> <li><code>fn withValuesCSV(value)</code></li> </ul>"},{"location":"API/query/testData/csvWave.html#fields","title":"Fields","text":""},{"location":"API/query/testData/csvWave.html#fn-withlabels","title":"fn withLabels","text":"<pre><code>withLabels(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/testData/csvWave.html#fn-withname","title":"fn withName","text":"<pre><code>withName(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"API/query/testData/csvWave.html#fn-withtimestep","title":"fn withTimeStep","text":"<pre><code>withTimeStep(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>integer</code>)</li> </ul>"},{"location":"API/query/testData/csvWave.html#fn-withvaluescsv","title":"fn withValuesCSV","text":"<pre><code>withValuesCSV(value)\n</code></pre> <p>PARAMETERS:</p> <ul> <li>value (<code>string</code>)</li> </ul>"},{"location":"examples/runtimeDashboard.html","title":"Controller runtime dashboard","text":"<p>The controller runtime dashboard example shows how to compose a dashboard from reusable components. There are separate definitions of panels, variables and queries. The queries are combined with the panels and then the panels are grouped into rows. Eventually the panels and rows are rendered into a grid. Let's break it down.</p> <p>Similarly to the simple dashboard, Grafonnet is imported through <code>g.libsonnet</code> and <code>row</code> becomes a shortcut for the row panel. Additionally the panels, variables and queries get imported.</p> <pre><code>local g = import 'g.libsonnet';\n\nlocal row = g.panel.row;\n\nlocal panels = import './panels.libsonnet';\nlocal variables = import './variables.libsonnet';\nlocal queries = import './queries.libsonnet';\n</code></pre> <p>The dashboard gets initialized with a title and description. The tooltip is configured to share a crosshair and tooltip on all panels.</p> <pre><code>g.dashboard.new('Controller Runtime')\n+ g.dashboard.withDescription(|||\n  Generic dashboard for controller-runtime based processes\n  (https://github.com/kubernetes-sigs/controller-runtime)\n|||)\n+ g.dashboard.graphTooltip.withSharedCrosshair()\n</code></pre> <p>The variables get added to provide dropdowns for selecting the datasource, cluster, namespace and job values.</p> <pre><code>+ g.dashboard.withVariables([\n  variables.datasource,\n  variables.cluster,\n  variables.namespace,\n  variables.job,\n])\n</code></pre> <p>And eventually add the panels.</p> <pre><code>+ g.dashboard.withPanels( /* ... */ )\n</code></pre>"},{"location":"examples/runtimeDashboard.html#panels","title":"Panels","text":"<p>The panels are defined separately from the queries, this turns them into reusable components. A panels can be called with a title and query. Let's take the 'Threads' panel as an example.</p> <pre><code>panels.timeSeries.seconds('GC Duration Mean', queries.gcDuration),\n</code></pre> <p>The 'Threads' panels uses the <code>base</code> timeSeries panel. Reusing the same panel definition for this and other panels increases consistency. The shortcuts for <code>fieldOverride</code> etc. are intended to make the code more concise.</p> <pre><code>// from panels.libsonnet\nlocal g = import 'g.libsonnet';\n\n{\n  timeseries: {\n    local timeSeries = g.panel.timeSeries,\n    local fieldOverride = g.panel.timeSeries.fieldOverride,\n    local custom = timeSeries.fieldConfig.defaults.custom,\n    local options = timeSeries.options,\n\n    base(title, targets):\n      timeSeries.new(title)\n      + timeSeries.queryOptions.withTargets(targets)\n      + timeSeries.queryOptions.withInterval('1m')\n      + options.legend.withDisplayMode('table')\n      + options.legend.withCalcs([\n        'lastNotNull',\n        'max',\n      ])\n      + custom.withFillOpacity(10)\n      + custom.withShowPoints('never'),\n  }\n}\n</code></pre> <p>The 'GC Duration Mean' panel extends the <code>base</code> panel to display the duration in seconds on a logarithmic scale. The <code>cpuUsage</code> panel is a shortcut to <code>seconds</code> panel.</p> <pre><code>{\n  timeseries: {\n    seconds(title, targets):\n      self.base(title, targets)\n      + timeSeries.standardOptions.withUnit('s')\n      + custom.scaleDistribution.withType('log')\n      + custom.scaleDistribution.withLog(10),\n\n    cpuUsage: self.seconds,\n  }\n}\n</code></pre>"},{"location":"examples/runtimeDashboard.html#rows-and-grid","title":"Rows and Grid","text":"<p>Rows can be used to group panels and optionally collapse them, however using them within Jsonnet can be quite cumbersome. For example: all panels added after a row in the panel array will inevitably become part of the row, also the order in the array doesn't necessarily apply with how Grafana displays them. The <code>makeGrid</code> util function attempts to aid with this.</p> <p>First the panels are consistently added to the rows so that the intention is clear from a Jsonnet perspective.</p> <pre><code>    row.new('Process')\n    + row.withPanels([\n      panels.timeSeries.cpuUsage('CPU Usage', queries.cpuUsage),\n      panels.timeSeries.memoryUsage('Memory Usage', queries.memUsage),\n      panels.timeSeries.base('Goroutines', queries.goroutines),\n      panels.timeSeries.base('Threads', queries.threads),\n      panels.timeSeries.seconds('GC Duration Mean', queries.gcDuration),\n    ]),\n</code></pre> <p>Second the panel array gets processed by <code>makeGrid</code> before added it to the dashboard.</p> <pre><code>+ g.dashboard.withPanels(\n  g.util.grid.makeGrid([\n    row.new('Process')\n    + row.withPanels([\n      panels.timeSeries.cpuUsage('CPU Usage', queries.cpuUsage),\n      panels.timeSeries.memoryUsage('Memory Usage', queries.memUsage),\n      panels.timeSeries.base('Goroutines', queries.goroutines),\n      panels.timeSeries.base('Threads', queries.threads),\n      panels.timeSeries.seconds('GC Duration Mean', queries.gcDuration),\n    ]),\n    row.new('Kubernetes Client')\n    + row.withCollapsed(true)\n    + row.withPanels([\n      panels.heatmap.base('Workqueue Waiting Duration Over Time', queries.wqDurationOverTime),\n      panels.timeSeries.durationQuantile('Workqueue Waiting Duration Quantile', queries.wqDurationQuantile),\n      panels.timeSeries.short('Workqueue Depth', queries.wqDepth),\n      panels.timeSeries.short('Failed Requests', queries.failedRequests),\n    ]),\n    row.new('Controller Runtime')\n    + row.withCollapsed(true)\n    + row.withPanels([\n      panels.heatmap.base('Reconciling Latency Over Time', queries.reconcilingLatencyOverTime),\n      panels.timeSeries.durationQuantile('Reconciling Latency Quantile', queries.reconcilingDurationQuantile),\n    ]),\n  ], panelWidth=8)\n)\n</code></pre>"},{"location":"examples/runtimeDashboard.html#queries","title":"Queries","text":"<p>The queries are defined as separate objects. This allows us to swap out the Prometheus queries for Graphite queries while not having to change the dashboard. Additionally this makes it possible to reuse the queries on different panels or even in different dashboards.</p> <p>Let's take a look at a query definition. The <code>cpuUsage</code> is an instance of a <code>prometheusQuery</code>. Note that the query definition leans heavily on the variables, making the datasource configurable and using variables in the query expression, setting values for the cluster, namespace and job labels. Finally this configures a <code>legendFormat</code>, telling Grafana which values to show in the legend.</p> <pre><code>// from queries.libsonnet\nlocal g = import './g.libsonnet';\nlocal prometheusQuery = g.query.prometheus;\n\nlocal variables = import './variables.libsonnet';\n\n{\n  cpuUsage:\n    prometheusQuery.new(\n      '$' + variables.datasource.name,\n      |||\n        sum by (cluster, namespace, job) (\n            rate(\n                process_cpu_seconds_total{\n                    cluster=~\"$cluster\",\n                    namespace=~\"$namespace\",\n                    job=~\"$job\"\n                }\n            [$__rate_interval])\n        )\n      |||\n    )\n    + prometheusQuery.withIntervalFactor(2)\n    + prometheusQuery.withLegendFormat(|||\n      {{cluster}} - {{namespace}}\n    |||),\n}\n</code></pre>"},{"location":"examples/runtimeDashboard.html#variables","title":"Variables","text":"<p>To make this dashboard dynamic, it uses variables. This allows the user to select and manipulate the data being displayed.</p> <p>In this case there is a single 'datasource' variable and several 'query' variables. The 'query' variables depend on the datasource variable and then cascadingly depend on each other. This means that the values of for example <code>namespace</code> depend on the values from <code>datasource</code> and <code>cluster</code>.</p> <pre><code>// variables.libsonnet\nlocal g = import './g.libsonnet';\nlocal var = g.dashboard.variable;\n\n{\n  datasource:\n    var.datasource.new('datasource', 'prometheus')\n    + var.datasource.withRegex('(ops|dev)-cortex'),\n\n  cluster:\n    var.query.new('cluster')\n    + var.query.withDatasourceFromVariable(self.datasource)\n    + var.query.queryTypes.withLabelValues(\n      'cluster',\n      'process_cpu_seconds_total',\n    )\n    + var.query.withRefresh('time')\n    + var.query.selectionOptions.withMulti()\n    + var.query.selectionOptions.withIncludeAll(),\n\n  namespace:\n    var.query.new('namespace')\n    + var.query.withDatasourceFromVariable(self.datasource)\n    + var.query.queryTypes.withLabelValues(\n      'namespace',\n      'process_cpu_seconds_total{cluster=~\"$%s\"}' % self.cluster.name,\n    )\n    + var.query.withRefresh('time'),\n\n  job:\n    var.query.new('job')\n    + var.query.withDatasourceFromVariable(self.datasource)\n    + var.query.queryTypes.withLabelValues(\n      'job',\n      'process_cpu_seconds_total{cluster=~\"$%s\", namespace=~\"$%s\"}'\n      % [\n        self.cluster.name,\n        self.namespace.name,\n      ],\n    )\n    + var.query.withRefresh('time'),\n}\n</code></pre> <p>The full controller runtime dashboard example can be found in the repo.</p>"},{"location":"examples/simple.html","title":"Simple dashboard","text":"<p>This example shows a simple dashboard with a single panel displaying one query:</p> <pre><code>local g = import 'g.libsonnet';\n\ng.dashboard.new('Faro dashboard')\n+ g.dashboard.withUid('faro-grafonnet-demo')\n+ g.dashboard.withDescription('Dashboard for Faro')\n+ g.dashboard.graphTooltip.withSharedCrosshair()\n+ g.dashboard.withPanels([\n  g.panel.timeSeries.new('Requests / sec')\n  + g.panel.timeSeries.queryOptions.withTargets([\n    g.query.prometheus.new(\n      'mimir',\n      'sum by (status_code) (rate(request_duration_seconds_count{job=~\".*/faro-api\"}[$__rate_interval]))',\n    ),\n  ])\n  + g.panel.timeSeries.standardOptions.withUnit('reqps')\n  + g.panel.timeSeries.gridPos.withW(24)\n  + g.panel.timeSeries.gridPos.withH(8),\n])\n</code></pre> <p>Note the <code>g.libsonnet</code> import at the top. The file contains the import reference to the actual version of Grafonnet being used, either latest or a more specific version. This makes the dashboard more portable. In this case the dashboard references <code>grafonnet-latest</code>:</p> <pre><code>import 'github.com/grafana/grafonnet/gen/grafonnet-latest/main.libsonnet'\n</code></pre>"}]}